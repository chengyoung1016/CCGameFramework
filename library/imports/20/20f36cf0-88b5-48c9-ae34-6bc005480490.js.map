{"version":3,"sources":["assets/script/framework/fsm/DemoFSM.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import FSMState from \"./FSMState\";\nimport FSMComponent from \"./FSMComponent\";\nimport ObjectPoolController from \"../pool/ObjectPoolController\";\nimport FiniteStateMachine from \"./FiniteStateMachine\";\nimport TKLog from \"../log/TKLog\";\nimport ToolsUseful from \"../utils/ToolsUseful\";\n\n/**\n * FSM例子\n * FSM使用一般方法为：\n * 1. 有状态的是一个cc.Component,则替换为继承自FSMComponent\n * 2. 各个状态的定义，每个状态继承FSMState,并实现各自状态内的逻辑\n * 3. 确定各个状态之间的转换条件等关系\n * 4. 初始化状态机，重写FSMInit函数并注册实例化的状态对象\n * 5. 在update函数中调用FSMUpdate()用于更新状态\n * 6. 使用ChangeStateById()来改变当前状态\n */\n\n\nconst {ccclass, property} = cc._decorator;\n\nenum DemoFSMState {\n    Init,\n    Run,\n    Destroy,\n}\n@ccclass\nexport default class DemoFSM extends FSMComponent<DemoFSM> {\n    private stateInit : DemoFSMState_Init = new DemoFSMState_Init();\n    private stateRun : DemoFSMState_Run = new DemoFSMState_Run();\n    private stateDestroy : DemoFSMState_Destroy = new DemoFSMState_Destroy();\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // 状态机初始化函数\n    // 包括状态机的实例化以及注册各个状态\n    FSMInit(){\n        this.FSM = new FiniteStateMachine(this);\n        super.FSMInit();\n        this.RegisterState(this.stateInit);\n        this.RegisterState(this.stateRun);\n        this.RegisterState(this.stateDestroy);\n    }\n\n    onLoad () {\n        // 初始化状态机\n        this.FSMInit();\n    }\n\n    start () {\n        // 初始使用Init状态\n        this.ChangeStateById(DemoFSMState.Init);\n    }\n\n    update (dt) {\n        // 状态更新\n        this.FSMUpdate(dt);\n    }\n}\n\n// 初始化状态\n// 初始化数据并执行一个更新的旋转动画，当旋转到一定角度就切换到Run状态\nclass DemoFSMState_Init extends FSMState<DemoFSM> {\n    public StateID(): number {\n        return DemoFSMState.Init;\n    }\n\n    private angle = 360;\n    Enter(){\n        super.Enter();\n        this.angle = 360;\n        TKLog.LogInfo(\"进入Init状态，初始化内容\");\n        this.entity.node.angle = this.angle;\n    }\n\n    Excute(dt){\n        super.Excute(dt);\n        this.angle--;\n        this.entity.node.angle = this.angle;\n\n        if(this.angle <= 45){\n            this.entity.ChangeStateById(DemoFSMState.Run, this.angle);\n        }\n    }\n\n    Exit(){\n        super.Exit();\n        TKLog.LogInfo(\"退出初始化状态了\");\n    }\n}\n\n// 运行中状态\n// 使用了async执行指令，执行完成后切换到Destroy状态\nclass DemoFSMState_Run extends FSMState<DemoFSM> {\n    public StateID(): number {\n        return DemoFSMState.Run;\n    }\n\n    Enter(...args:any){\n        TKLog.LogInfo(\"进入Run状态了,传过来的CD为:\" + args[0]);\n        // 缩放\n        this.entity.node.scale = 2;\n\n        this.Run();\n        \n    }\n\n    async Run(){\n        TKLog.LogInfo(\"先等待2秒钟\")\n        await ToolsUseful.WaitForSeconds(2);\n        TKLog.LogInfo(\"等待完成，切换状态\")\n        this.entity.ChangeStateById(DemoFSMState.Destroy);\n    }\n\n    Exit(){\n        TKLog.LogInfo(\"退出Run状态，啥也不干\");\n    }\n}\n\n// 销毁状态\n// 过一段时间后销毁节点\nclass DemoFSMState_Destroy extends FSMState<DemoFSM>{\n    public StateID(): number {\n        return DemoFSMState.Destroy;\n    }\n\n    Enter(){\n        TKLog.LogInfo(\"进入Destroy状态，1秒钟后销毁\")\n        this.Run();\n    }\n\n    async Run(){\n        await ToolsUseful.WaitForSeconds(1);\n        ObjectPoolController.Destroy(this.entity.node);\n    }\n    \n}"]}