{"version":3,"sources":["assets/script/framework/utils/ToolsUseful.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import TKLog from \"../log/TKLog\";\nimport ObjectPoolController from \"../pool/ObjectPoolController\";\n\ninterface ICheckNodeCondition {\n    (checkNode : cc.Node) : boolean;\n}\n\ninterface IProcessNode {\n    (node : cc.Node):void;\n}\n\ninterface IValueUpdated {\n    (value : number) : void;\n}\n\nexport default class ToolsUseful {\n\n    /**\n     * 从节点强制获取一个组件，如果该组件没有就增加一个返回\n     * @param node 要获取组件的节点\n     * @param componentName 组件名称\n     */\n    static GetComponentForce<T>(node : cc.Node, componentName : string) : T {\n        let com : T = node.getComponent(componentName)\n        if(com == null){\n            com = node.addComponent(componentName)\n        }\n        return com\n    }\n    /**\n     * 转换秒数为天，向上取整\n     * @param sec 秒数\n     */\n    static ConvertSecToDay(sec:number) : number{\n        let x = sec / 86400; // 60 * 60 * 24\n        let day = Math.ceil(x);\n        return day;\n    }\n\n    /**\n     * 转换秒数为天，向下取整\n     * @param sec 秒数\n     */\n    static RoundDownToDay(sec:number) : number {\n        let x = sec / 86400;\n        let day = Math.floor(x);\n        return day;\n    }\n\n    /**\n     * 将秒数转换为hh:mm:ss的形式\n     * 比如128秒换成：00:02:08\n     * @param totalSec 要转换的秒数\n     */\n    static GenerateTotalSec_hms(totalSec : number) : string{\n        if(totalSec <= 0){\n            return \"00:00:00\";\n        }\n        let min = Math.floor(totalSec / 60);\n        let hour = Math.floor(min / 60);\n        min = Math.floor((totalSec - hour * 3600) / 60);\n        let sec = totalSec % 60;\n        return ToolsUseful.SupplementZero(hour+\"\", 2) + \":\" + ToolsUseful.SupplementZero(min+\"\", 2) + \":\" + ToolsUseful.SupplementZero(sec + \"\", 2);\n    }\n\n    /**\n     * 转换成分秒 00:00 \n     * @param totalSec 要转换的秒数\n     */\n    static GenerateTotalSec_ms(totalSec : number) : string {\n        if(totalSec <= 0){\n            return \"00:00\";\n        }\n        let min = Math.floor(totalSec / 60);\n        let sec = totalSec % 60;\n\n        return ToolsUseful.SupplementZero(min+\"\",2) + \":\" + ToolsUseful.SupplementZero(sec+\"\",2);\n    }\n\n    /**\n     * 转换成时分 00:00\n     * @param totalSec 要转换的秒数\n     */\n    static GenerateTotalSec_hm(totalSec : number) : string {\n        if(totalSec <= 0){\n            return \"00:00\";\n        }\n\n        let min = Math.floor(totalSec / 60);\n        let hour = Math.floor(min / 60);\n        min = Math.floor((totalSec - hour * 3600) / 60);\n        return ToolsUseful.SupplementZero(hour+\"\",2) + \":\" + ToolsUseful.SupplementZero(min+\"\",2);\n    }\n\n    static GenerateMinutes(seconds: number) : {hour: number, min: number}{\n        if(seconds <= 0) {\n            return {hour: 0, min: 0};\n        }\n        let min = Math.ceil(seconds / 60);\n        let hour = Math.floor(min / 60);\n        let time = {\n            hour: hour,\n            min: min\n        }\n        return time;\n    }\n\n    /**\n     * 转换一个整数位字符串，每隔三位会有一个逗号，比如\n     * 12345678转换为“12,345,678”\n     * @param num 数字\n     */\n    static TranslateIntToCommaString(num : number):string{\n        let numStr = num + \"\";\n        if(numStr.length <= 3){\n            return numStr;\n        }\n\n        let strRes = \"\";\n        // 排在最前面的数字有几个\n        let forwardLength = numStr.length % 3;\n        // 先把排在前面的加到字符串中\n        for(let i = 0; i < forwardLength; ++i){\n            strRes += numStr.charAt(i);\n        }\n        // 来个逗号\n        if (forwardLength > 0){\n            strRes += \",\";\n        }\n        // 之后的，每隔3个数就加个逗号，当然最后一个数是不加的\n        let commaIndex = 0;\n        for(let i = forwardLength; i < numStr.length; ++i){\n            strRes += numStr.charAt(i);\n            commaIndex++;\n            if(commaIndex == 3 && i != numStr.length - 1){\n                strRes += \",\";\n                commaIndex = 0;\n            }\n        }\n        return strRes;\n    }\n\n    /**\n     * 将nCheckData转换为[0,nTotalData)之间的值\n     * 如果nCheckData>=nTotalData,则又从0开始重新计算\n     * @param checkData 要检测是数字\n     * @param totalData 数字范围最大值\n     */\n    static ClampCircleData(checkData : number, totalData : number){\n        if(checkData >= 0\n            && checkData < totalData){\n                return checkData;\n            }\n        else{\n            let per = Math.floor(checkData < 0 ? (checkData / totalData) - 1 : checkData / totalData);\n            checkData -= per * totalData;\n            return checkData;\n        }\n    }\n\n    /**\n     * 二维坐标转为一维索引\n     * @param xpos 横坐标\n     * @param ypos 纵坐标\n     * @param width 横长度\n     */\n    static CoordTranslateToIndex(xpos : number, ypos : number, width : number) : number{\n        return ypos * width + xpos;\n    }\n\n    /**\n     * 一维索引转换为二维坐标\n     * @param index 一维索引\n     * @param width 二维宽度\n     */\n    static IndexTranslateToCoord(index : number, width : number) : [number,number] {\n        let [xpos,ypos] = [0,0];\n        ypos = Math.floor(index / width);\n        xpos = index % width;\n        return [xpos, ypos];\n    }\n\n    \n    /**\n     * 删除符合条件的子对象\n     * 如果没有条件，就是删除所有子对象\n     * @param root 根节点\n     * @param destroyCondition 删除条件，如果为空表示没有条件全部删除\n     */\n    static DestroyChildren(root : cc.Node, destroyCondition ?: ICheckNodeCondition) {\n        if(root == null){\n            return;\n        }\n        let lstChild:Array<cc.Node> = [];\n        root.children.forEach((node)=>{\n            lstChild.push(node);\n        })\n\n        for(let i = 0; i < lstChild.length; ++i){\n            if(destroyCondition == null || destroyCondition(lstChild[i])){\n                lstChild[i].setParent(null);\n                lstChild[i].destroy();\n            }\n        }\n    }\n\n    /**\n     * 删除符合条件的子对象\n     * 使用内存池控制进行删除\n     * @param root 根节点\n     * @param destroyCondition 删除条件，如果为空表示没有条件\n     */\n    static DestroyChildrenUsePool(root : cc.Node, destroyCondition ?: ICheckNodeCondition) {\n        if(root == null){\n            return;\n        }\n        let lstChild:Array<cc.Node> = [];\n        root.children.forEach((node)=>{\n            lstChild.push(node);\n        })\n\n        for(let i = 0; i < lstChild.length; ++i){\n            if(destroyCondition == null || destroyCondition(lstChild[i])){\n               ObjectPoolController.Destroy(lstChild[i]);\n            }\n        }\n    }\n\n    /**\n     * 遍历子对象进行一些操作\n     * @param root 根节点\n     * @param processFunc 要对子对象进行的操作\n     * @param interation 是否迭代，即是否也对子对象的子对象进行操作\n     */\n    static ProcessChildren(root : cc.Node, processFunc : IProcessNode, interation : boolean) {\n        if(root == null){\n            return;\n        }\n        if(processFunc == null){\n            return;\n        }\n        let trsChild : cc.Node = null;\n        for(let i = 0; i < root.childrenCount; ++i){\n            trsChild = root.children[i];\n            processFunc(trsChild);\n\n            if(interation && trsChild.childrenCount > 0){\n                ToolsUseful.ProcessChildren(trsChild, processFunc, interation);\n            }\n        }\n    }\n\n    /**\n     * 将一个值固定在01之间\n     * @param value 要检测的值\n     */\n    static Clamp01(value : number) : number{\n        return ToolsUseful.Clamp(value, 0, 1);\n    }\n\n    /**\n     * 将一个值固定在min和max之间\n     * @param value 要固定的值\n     * @param min 最小值\n     * @param max 最大值\n     */\n    static Clamp(value : number, min : number, max : number) : number{\n        if(value < min){\n            return min;\n        }\n        if(value > max){\n            return max;\n        }\n        return value;\n    }\n\n    /**\n     * 检测某个数值是否在需求范围内\n     * @param value 待检测的值\n     * @param min 最小值\n     * @param max 最大值\n     */\n    static isValid(value: number, min: number, max: number) : boolean {\n        if(value <= max && value > min) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * 将指定数字输出为指定长度，如果不够则前面补0；如果已经超出则不管\n     * @param num 要检测的数字\n     * @param length 要输出的长度\n     */\n    static SupplementZero(num:string, length:number) : string {\n        if((num + \"\").length >= length) {\n            return num.toString();\n        }\n        return ToolsUseful.SupplementZero(\"0\" + num, length)\n    }\n\n    //位相关//////////////////////////////////////////////////////////////\n    /**\n     * 检查2的幂的包含情况\n     * 检查ncheckValue是否包含在nContain中\n     * 比如nContain为 2 + 4 = 6，nCheckValue = 1\n     * 则返回false， 如果nCheckValue = 2， 则返回true\n     * @param contain 容器值\n     * @param checkValue 这个值必须是2的幂或几个2的幂的值的和\n     */\n    static BitContent(contain : number, checkValue : number) : boolean{\n        if((contain & checkValue) != 0){\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 位中索引值\n     * @param contain 容器值\n     * @param index 取值范围为0~31\n     */\n    static BitValue(contain : number, index : number) : boolean {\n        if(index >= 32){\n            return false;\n        }\n        let obpos = index % 32;\n        let i = 1;\n        i <<= obpos;\n        i &= contain;\n        return (i != 0);\n    }\n\n    /**\n     * 从位中去掉某些值\n     * 比如 nContain = 1 + 2 + 4 + 8 = 15\n     * nRemove = 2 + 4 = 6\n     * 则返回 nContai & ~nRemove = 15 & ~6 = 9\n     * @param contain 容器值\n     * @param remove 要移出的值\n     */\n    static BitRemove(contain : number, remove : number) : number{\n        return contain & ~remove;\n    }\n\n    /**\n     * 在位中添加一些值\n     * 其实就是或操作了\n     * 比如 2 | 6 = 6\n     * 2 | 4 = 6\n     * @param contain 容器值\n     * @param add 要添加的值\n     */\n    static BitAdd(contain : number, add : number) : number{\n        return contain | add;\n    }\n    ////////////////////////////////////////////////////////////////\n\n    //Promise//////////////////////////////////////////////////////////////\n    /**\n     * 等待一定的秒数\n     * @param sec 秒数\n     */\n    static WaitForSeconds(sec : number) : Promise<void> {\n        return new Promise<void>((wait)=>{\n            setTimeout(() => {\n                wait();\n            }, sec*1000);\n        }).catch(e=>{\n            throw new Error(\"WaitForseconds Err:\" + e);\n        });\n    }\n\n    /**\n     * 将值从start在durSec时间内变化到end\n     * @param durSec 持续时间（秒）\n     * @param startValue 开始值\n     * @param endValue 目标值\n     * @param perUpdateFunc 每次更新回调\n     * @param completeFunc 执行完成后回调\n     * @param startDelaySec 开始时先延迟时间（秒）\n     */\n    static async OnFadeInOrOutValue(durSec : number, startValue : number, endValue : number, perUpdateFunc : IValueUpdated, completeFunc ?: Function, startDelaySec = 0) : Promise<void>{\n        if(startDelaySec > 0){\n            await ToolsUseful.WaitForSeconds(startDelaySec);\n        }\n\n        let dist = endValue - startValue;\n        let percent = 0;\n        let interval = 1/100;\n        for(let f = 0; f < durSec; f += interval){\n            let alpha = ToolsUseful.Clamp01(2.0 * (1.0 - f / durSec));\n            percent = 1.0 - alpha;\n            if(perUpdateFunc != null){\n                perUpdateFunc(startValue + percent * dist);\n            }\n            await ToolsUseful.WaitForSeconds(interval);\n        }\n\n        if(completeFunc != null){\n            completeFunc();\n        }\n    }\n    /////////////////////////////////////////////////////////////////////\n\n    \n    //常量///////////////////////////////////////////////////////////////////\n    /**\n     * 黄金比例分割点\n     */\n    static GoldPointRadio(){\n        return 0.618;\n    }\n    /////////////////////////////////////////////////////////////////////\n\n    /**\n     * 角度转弧度\n     * @param angle 角度\n     */\n    static Deg2Rad (angle: number) {\n        return angle * (Math.PI / 180);\n    }\n    \n    /**\n     * 弧度转角度\n     * @param radius 弧度\n     */\n    static Rad2Deg (radius: number) {\n        return radius * (180 / Math.PI);\n    }\n\n    /**\n     * 0、1的互相转换\n     * @param num 0或者1\n     */\n    static Exchage0and1(num: number) {\n        if(num == 0) {\n            return 1;\n        }\n        if(num == 1) {\n            return 0;\n        }\n    }\n\n    /**\n     * 将节点active设置为true\n     * @param node1 第一个节点\n     * @param restOfNode 剩余节点\n     */\n    static nodeVisible(node1: cc.Node, ...restOfNode: cc.Node[]) {\n        node1.active = true;\n        restOfNode.forEach((item) => {\n            item.active = true;\n        })\n    }\n\n    /**\n     * 将节点active设置为false\n     * @param node1 第一个节点\n     * @param restOfNode 剩余节点\n     */\n    static nodeInvisible(node1: cc.Node, ...restOfNode: cc.Node[]) {\n        node1.active = false;\n        restOfNode.forEach((item) => {\n            item.active = false;\n        })\n    }\n\n    /**\n     * 将按钮设置为可点击状态\n     * @param btn1 第一个按钮组件\n     * @param restOfBtn 剩余按钮组件\n     */\n    static btnEnableClick(btn1: cc.Button, ...restOfBtn: cc.Button[]) {\n        btn1.interactable = true;\n        restOfBtn.forEach((item) => {\n            item.interactable = true;\n        })\n    }\n\n    /**\n     * 将按钮置为不可点击状态\n     * @param btn1 第一个按钮组件\n     * @param restOfBtn 剩余按钮组件\n     */\n    static btnDisableClick(btn1: cc.Button, ...restOfBtn: cc.Button[]) {\n        btn1.interactable = false;\n        restOfBtn.forEach((item) => {\n            item.interactable = false;\n        })\n    }\n\n    /**\n     * 生成随机值，随机出的值不能是except中的值\n     * @param minNum 最小值\n     * @param maxNum 最大值\n     * @param except 需要排除的值列表\n     */\n    static getRandomNumExcept(wordsIdList: number[], ...except : number[]) : number{\n        let maxLoop = 1000;\n        let minNum = 0;\n        let maxNum = wordsIdList.length - 1;\n        let num = this.getRandomNum(minNum, maxNum);\n        if(except == null || except.length == 0){\n            return wordsIdList[num];\n        }\n        while(true){\n            let needReGen : boolean = false;\n            // 判断生成的值是否在需要排除的列表中\n            for(let i = 0; i < except.length; ++i){\n                // 如果存在，则需要重新获取一个随机值\n                if(wordsIdList[num] == except[i]){\n                    needReGen = true;\n                    break;\n                }\n            }\n            if(needReGen){\n                maxLoop--;\n                if(maxLoop <= 0){\n                    break;\n                }\n                num = this.getRandomNum(minNum, maxNum);\n            }else{\n                \n                break;\n            }\n        }\n        return wordsIdList[num];\n    }\n\n    /**\n     * 生成从minNum到maxNum的随机数\n     * 如果指定decimalNum位数，则生成指定小数位数的随机数\n     * 若不指定任何参数，则生成0-1之间的随机数\n     * @param minNum 最小值\n     * @param maxNum 最大值\n     * @param decimalNum 指定随机数的小数点后的位数\n     */\n    static getRandomNum(minNum?: number, maxNum?: number, decimalNum?: number) : number {\n        let max :number = 0, min : number = 0;\n        minNum <= maxNum ? (min = minNum, max = maxNum) : (min = maxNum, max = minNum);\n\n        // 如果相同\n        if(min == max){\n            return min\n        }\n\n        switch (arguments.length) {\n            case 1:\n                return Math.floor(Math.random() * (max + 1));\n                break;\n            case 2:\n                return Math.floor(Math.random() * (max - min + 1) + min);\n                break;\n            case 3:\n                return Number((Math.random() * (max - min) + min).toFixed(decimalNum));\n                break;\n            default:\n                return Math.random();\n                break;\n        }\n    }\n\n    /**\n     * 生成控制曲率点的随机坐标\n     * @param startPos 起始位置坐标\n     * @param endPos 结束位置坐标\n     */\n    static getRandomBezierPoint(startPos: cc.Vec2, endPos: cc.Vec2, screenMaxY : number, screenHeight : number): cc.Vec2 {\n        let aX = (endPos.x + startPos.x) / 2;\n        let x = ToolsUseful.getRandomNum(aX, startPos.x);\n\n        let dY = screenMaxY - startPos.y;\n        let ran = Math.random();\n        let y: number;\n        if(ran <= 0.7) {\n            y = ToolsUseful.getRandomNum(startPos.y, screenHeight);\n        } else {\n            y = ToolsUseful.getRandomNum(screenHeight, screenHeight + dY);\n        }\n\n        return cc.v2(x, y);\n    }\n\n    /**\n     * 创建贝塞尔曲线\n     * @param t 贝塞尔曲线的时间\n     * @param node 目标节点\n     * @param startPos 初始位置坐标\n     * @param endPos 目标位置坐标\n     * @param isUv 是否匀速\n     */\n    // static createBezier(t: number, node: cc.Node, startPos: cc.Vec2, endPos: cc.Vec2, isUv: boolean) {\n    //     //随机高度值\n    //     let height = (startPos.x - endPos.x) / 3;\n    //     //根据起点和终点随机一个较为合适的角度值\n    //     let angle = 25;\n    //     // 把角度转换为弧度\n    //     let radian = ToolsUseful.Deg2Rad(angle);\n    //     // 第一个控制点为贝塞尔曲线左半弧的中点\n    //     let q1x = startPos.x + (endPos.x - startPos.x) / 4 * 3;\n    //     let q1y = height + startPos.y;\n\n    //     // 第二个控制点为整个抛物线的中点\n    //     let q2x = startPos.x + (endPos.x - startPos.x) / 4;\n    //     let q2y = height + startPos.y + Math.cos(radian) * q2x;\n\n    //     //将世界坐标下的点转换到节点坐标系\n    //     let q1 = node.parent.convertToNodeSpaceAR(cc.v2(q1x, q1y));\n    //     let q2 = node.parent.convertToNodeSpaceAR(cc.v2(q2x, q2y));\n    //     let endPosN = node.parent.convertToNodeSpaceAR(startPos);\n    //     // 曲线配置\n    //     // TKLog.LogWarn(\"贝塞尔曲线配置\", t, q1, q2);\n    //     if(isUv) {\n    //         return cc.bezierTo(t, [q1, q2, endPosN]);\n    //     } else {\n    //         return cc.bezierTo(t, [q1, q2, endPosN]).easing(cc.easeIn(t));\n    //     }\n    // }\n\n    /**\n     * \n     * @param startPos 起始坐标点\n     * @param endPos   终点坐标\n     * @param height   期望抛物线高度\n     * @param t        期望抛物线运行时间\n     */\n    static createParacuve(startPos: cc.Vec2, endPos: cc.Vec2, height: number, t: number) {\n        //起点\n        let x1 = startPos.x;\n        let y1 = startPos.y;\n        //终点\n        let x3 = endPos.x;\n        let y3 = endPos.y;\n\n        //发射路径宽度\n        let width = Math.abs(x3 - x1);\n        //算出中间会经过的一点\n        let x2 = x1 + width / 2;\n        let y2 = y1 - height;\n        \n        let dy = ((y1 - y3) * (Math.pow(x1, 2) - Math.pow(x2, 2)) - (y1 - y2) * (Math.pow(x1, 2) - Math.pow(x3, 2)));\n        let dx = ((x1 - x3) * (Math.pow(x1, 2) - Math.pow(x2, 2)) - (x1 - x2) * (Math.pow(x1, 2) - Math.pow(x3,2)));\n        let b = dy / dx;\n        let a = ((y1 - y2) -b * (x1 - x2)) / (Math.pow(x1, 2) - Math.pow(x2, 2));\n        let c = y1 - a * x1 *x1 - b*x1;\n\n        //x轴速度\n        let vx = width / t;\n\n        return {a, b, c, vx};\n    }\n\n    /**\n     * \n     * @param node 需要做抛物线的精灵\n     * @param startPos 起始位置\n     * @param endPos 终止位置\n     * @param startA 起始角度\n     * @param endA 终止角度\n     * @param t 起始点到终止点需要的时间\n     */\n    static createMovingCurve(node: cc.Node, startPos: cc.Vec2, endPos: cc.Vec2, startA: number, endA: number, t: number) {\n        let sx = startPos.x;\n        let sy = startPos.y;\n        let ex = endPos.x + 50;\n        let ey = endPos.y + 150;\n        let h = node.height * 0.5;\n\n        //设置精灵的起始角度\n        node.angle = startA;\n        let q1 = cc.v2(sx, sy);\n        let q2 = cc.v2(sx + (ex - sx) * 0.5, sy + (ey - sy) * 0.5 + 200);\n        let endP = cc.v2(endPos.x - 30, endPos.y + h);\n\n        return cc.bezierTo(t, [q1, q2, endP]);\n    }\n\n    // /**\n    //  * 根据单元随机生成单词\n    //  * @param unitId 单元id\n    //  */\n    // static generateWordId(idArr: number[]): {right: number, wrong1: number, wrong2: number} {\n    //     let index = ToolsUseful.getRandomNum(0, idArr.length - 1);\n    //     let right = idArr[index];\n\n    //     if(idArr.length == 1){\n    //         return {right:right, wrong1:right, wrong2:right};\n    //     }\n        \n    //     let indexWrong1 = ToolsUseful.getRandomNumExcept(0, idArr.length - 1, index);\n    //     let wrong1 = idArr[indexWrong1];\n    //     let indexWrong2 = ToolsUseful.getRandomNumExcept(0, idArr.length - 1, index, indexWrong1);\n    //     let wrong2 = idArr[indexWrong2]\n\n    //     return {right: right, wrong1: wrong1, wrong2: wrong2};\n    // }\n\n    /**\n     * 获取某节点上的组件，如果没有该组件则增加一个并返回\n     * @param node 要获取组件的节点\n     * @param type 要获取的组件类型\n     */\n    static DefaultGetComponent<T extends cc.Component>(node : cc.Node, type: {new(): T}) : T {\n        let com = node.getComponent(type);\n        if(com == null){\n            TKLog.LogInfo(\"没有，需要增加Component\")\n            com = node.addComponent(type)\n        }\n        return com as T;\n\n    }\n\n    /**\n     * 将元素列表输出为字符串，比如将数字list输出为\n     * 1,3,4,5,6\n     * @param array 元素列表\n     */\n    static ListToString<T>(array : T[]) : string {\n        let content : string = \"\";\n        for(let i = 0; i < array.length; ++i){\n            content += array[i].toString();\n            if(i != (array.length - 1)){\n                content += \",\";\n            }\n        }\n        return content;\n    }\n\n    /**\n     * 判断item是否存在于array中\n     * @param array 要检测的数组\n     * @param item 要检测的元素\n     * @returns 如果存在返回索引，否则返回-1\n     */\n    static ArrayContainItem<T>(array : T[], item : T ) : number{\n        for (let index = 0; index < array.length; index++) {\n            const element = array[index];\n            if(element == item){\n                return index\n            }\n        }\n        return -1\n    }\n    /**\n     * 判断item是否粗在与array中，使用自定义的比较函数\n     * 该函数原型为 func(itemInArray : T, item : T) : boolean\n     * @param array 要检测的数组\n     * @param item 要检测的元素\n     * @param compareFunc 比较函数，比较array中的元素与item是否相等，如果相等返回true\n     * @returns 如果存在则返回索引，否则返回-1\n     */\n    static ArrayContainItemWithFunc<T>(array : T[], item : T, compareFunc : Function) : number {\n        for (let index = 0; index < array.length; index++) {\n            const element = array[index];\n            if(compareFunc(element, item)){\n                return index\n            }\n        }\n        return -1\n    }\n\n    /**\n     * 从数组中移除指定数据\n     * @param array 操作数组\n     * @param item 要删除的item\n     * @returns 如果存在元素且删除了，则返回true;否则返回false\n     */\n    static RemoveArrayItem<T>(array : T[], item : T) : boolean{\n        if(!array || array.length == 0){\n            return false\n        }\n        let index = array.indexOf(item);\n        if(index >= 0){\n            array.splice(index, 1);\n            return true\n        }\n        return false\n    }\n    /**\n     * 从数组中移除符合条件的数据\n     * @param array 操作的数组\n     * @param needRemoveCondition 条件判断函数，返回boolean类型。如果判断返回true则会从数组中移出\n     */\n    static RemoveArrayItemWithCondition<T>(array : T[], needRemoveCondition: Function) : T[]{\n        let copy : Array<T> = new Array<T>()\n        array.forEach(element => {\n            if(needRemoveCondition != null && needRemoveCondition(element)){\n\n            }else{\n                copy.push(element)\n            }\n        });\n        return copy\n    }\n\n    /**\n     * 洗牌\n     * @param array 要洗牌的队列\n     */\n    static Shuffle<T>(array : T[]) : T[]{\n        for (let i = array.length - 1; i > 0; i--) {\n            const randomIndex = Math.floor(Math.random() * (i + 1));\n            let tmp = array[i]\n            array[i] = array[randomIndex]\n            array[randomIndex] = tmp\n        }\n        return array;\n    }\n\n    /**\n     * number的lerp\n     * @param value 当前值\n     * @param target 目标值\n     * @param t 获取比例\n     */\n    static LerpNumber(value : number, target : number, t : number){\n        let off = target - value;\n        let offDist = off * t;\n        return value + offDist;\n    }\n\n    /**\n     * 求两个位置的距离\n     * @param pos1 位置1\n     * @param pos2 位置2\n     */\n    static Distance(pos1 : cc.Vec2, pos2 : cc.Vec2) : number {\n        let distance = pos1.sub(pos2).mag();\n        return distance;\n    }\n\n    /**\n     * 获取节点当前的世界坐标\n     * @param node 节点\n     */\n    static WorldPosition(node : cc.Node) : cc.Vec2 {\n        let pos = node.convertToWorldSpaceAR(cc.Vec2.ZERO);\n        return new cc.Vec2(pos.x, pos.y);\n    }\n    /**\n     * 获取世界坐标在节点坐标系中的坐标\n     * @param node 相对的节点\n     * @param worldPos 世界坐标\n     */\n    static LocalPosition(node : cc.Node, worldPos : cc.Vec2) : cc.Vec3{\n        let pos = node.convertToNodeSpaceAR(worldPos);\n        return new cc.Vec3(pos.x, pos.y);\n    }\n\n    /**\n     * 将posNode的坐标转换为targetNode节点坐标系的坐标\n     * @param targetNode 节点坐标系\n     * @param posNode 要转换的节点\n     */\n    static LocalPositionToNode(targetNode : cc.Node, posNode : cc.Node) : cc.Vec3{\n        let worldPos = this.WorldPosition(posNode);\n        return this.LocalPosition(targetNode, worldPos);\n    }\n\n    /**\n     * 输出节点的路径，即将父节点一一列出，使用/分隔\n     * 比如 UIRoot/UIMessageBox/UIOkbtn\n     * @param node 需要输出路径的节点\n     */\n    static GetNodePath(node : cc.Node) : string {\n        let path : string = \"\"\n\n        path = node.name\n        let parent : cc.Node = node.parent\n        while(parent != null){\n            path = parent.name + \"/\" + path\n            parent = parent.parent\n        }\n\n        return path\n    }\n\n    /**\n     * 字符串转数字\n     * @param strValue 字符串数字\n     * @param defaultValue 如果转换错误的默认返回\n     */\n    static TranslateStringToNumber(strValue : string, defaultValue : number) : number {\n        if(strValue.length == 0){\n            return defaultValue\n        }\n        let num = Number.parseInt(strValue)\n        if(num == Number.NaN){\n            return defaultValue\n        }\n        return num\n    }\n\n    /**\n     * 将颜色的16进制编码转换成颜色，\n     * 比如ff0000,转换成Color(255, 0, 0)\n     * @param strCode 16进制编码字符串\n     */\n    static TranslateCodeToColor(strCode : string) : cc.Color{\n        let color : cc.Color = cc.Color.WHITE\n        if(strCode.length == 0){\n            return color\n        }\n        let strSplitCode = \"\"\n        let colorValue : number[] = []\n        for(let i = 0; i < strCode.length; ++i){\n            strSplitCode += strCode[i]\n            if((i+1) % 2 == 0){\n                colorValue.push(Number.parseInt(strSplitCode, 16))\n                strSplitCode = \"\"\n            }\n        }\n\n        if(colorValue.length > 0){\n            color.setR(colorValue[0])\n        }\n        if(colorValue.length > 1){\n            color.setG(colorValue[1])\n        }\n        if(colorValue.length > 2){\n            color.setB(colorValue[2])\n        }\n        // if(colorValue.length > 3){\n        //     color.setA(colorValue[3])\n        // }\n        return color\n    }\n\n    static getExpendNum(leftTime: number): number {\n        //计算倒计时对应的晶石消耗\n        let ranges = [60, 1200, 3600, 43200, 86400, 259200, 604800];\n        let gems = [5, 50, 100, 900, 1500, 4000, 9000];\n        for (let i = 1; i <= ranges.length - 1; i++) {\n            if (leftTime <= ranges[i]) {\n                return (Math.ceil((leftTime - ranges[i - 1]) / ((ranges[i] - ranges[i - 1]) / (gems[i] - gems[i - 1])) + gems[i - 1]));\n            }\n        }\n    }\n}\n"]}