{"version":3,"sources":["assets/script/framework/log/TKLogNative.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nimport TKLogNone from \"./TKLogNone\";\nimport TimeUtil from \"../time/TimeUtil\";\nimport { LogLevel } from \"./ITKLog\";\n\nexport default class TKLogNative extends TKLogNone {\n\n    FOLDER_NAME : string = \"logs\"\n    logsFolderPath : string = \"\"\n    logsCacheMaxSize : number = 5 * 1024 * 1024\n    logFileName : string = \"log.txt\"\n\n    constructor(){\n        super();\n        // this.logFile = true\n\n        this.logFileName = TimeUtil.NowDataYMDFormatString(\"_\") + \".txt\"\n\n        this.makeSureDirExist();\n        this.checkClearDirCache();\n    }\n\n    LogInfo(msg: any, ...subst: any[]) {\n        super.LogInfo(msg, ...subst)\n        if (this.logFile){\n            this.writeToLogFile(LogLevel.Info, msg, ...subst)\n        }\n    }\n    LogDebug(msg: any, ...subst: any[]) {\n        super.LogDebug(msg, ...subst)\n        if (this.logFile){\n            this.writeToLogFile(LogLevel.Debug,msg, ...subst)\n        }\n    }\n    LogWarn(msg: any, ...subst: any[]) {\n        super.LogWarn(msg, ...subst)\n        if (this.logFile){\n            this.writeToLogFile(LogLevel.Warn,msg, ...subst)\n        }\n    }\n    LogErr(msg: any, ...subst: any[]) {\n        super.LogErr(msg, ...subst)\n        if (this.logFile){\n            this.writeToLogFile(LogLevel.Error,msg, ...subst)\n        }\n    }\n    \n    // 创建logs文件夹\n    makeSureDirExist(){\n        var writeable_path = jsb.fileUtils.getWritablePath();\n        this.logsFolderPath = writeable_path + this.FOLDER_NAME;\n\n        if(!jsb.fileUtils.isDirectoryExist(this.logsFolderPath)) {\n            jsb.fileUtils.createDirectory(this.logsFolderPath);\n        }\n    }\n\n    // 检测是否删除日志文件\n    checkClearDirCache() {\n        let totalSize : number = 0\n        let files : string[] = jsb.fileUtils.listFiles(this.logsFolderPath)\n        // 遍历所有文件，计算占用空间大小\n        files.forEach(file => {\n            let strData : string = jsb.fileUtils.getStringFromFile(file)\n            // this.LogInfo(\"file\", file, jsb.fileUtils.getFileSize(file), strData.length)\n            if (!file.endsWith(\"./\")){\n                totalSize += jsb.fileUtils.getFileSize(file)\n            }\n        });\n\n        // 超过大小，就删除以前的日志文件\n        if (totalSize >= this.logsCacheMaxSize){\n            files.forEach(file => {\n                if (file.indexOf(this.logFileName) > 0){\n\n                }else{\n                    jsb.fileUtils.removeFile(file)\n                    this.LogInfo(\"删除日志文件\", file)\n                }\n            });\n        }\n    }\n\n    writeToLogFile(logLevel : LogLevel, msg : any, ...subst : any[]){\n        let log = TimeUtil.NowDateFormatString()\n        \n        try {\n            log += \" [\" + logLevel +\"] \" + JSON.stringify(msg);\n            subst.forEach(item => {\n                log += \" \" + JSON.stringify(item)\n            });\n        }catch (e){\n            log += \" stringify exception \"\n        }\n       \n        let filePath : string = this.logsFolderPath + \"/\" + this.logFileName\n        var str_data : string = jsb.fileUtils.getStringFromFile(filePath); \n        // 如果太大，就截断\n        if (str_data.length >= this.logsCacheMaxSize){\n            str_data = str_data.substr(str_data.length / 2)\n        }\n        jsb.fileUtils.writeStringToFile(str_data + \"\\n\" + log, filePath);\n    }\n}"]}