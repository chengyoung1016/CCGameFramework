{"version":3,"sources":["assets/script/tools/net/HttpManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import INetManager, { NetEventType } from \"./INetManager\";\nimport Emitter from \"../../framework/event/Emitter\";\nimport Singleton from \"../../framework/utils/Singleton\";\nimport TKLog from \"../../framework/log/TKLog\";\nimport NetMessageError from \"../../netMessage/NetMessageError\";\nimport { CodeFormat } from \"../../netMessage/IBuilder\";\nimport { NetBaseReq, NetBaseMessage } from \"../../netMessage/Message\";\n\n// import FSMState from \"../FSM/FSMState\";\n// import NetBaseReq from \"./NetBaseReq\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class HttpManager extends Singleton implements INetManager {\n    event = new Emitter();\n\n    url : string = \"\";\n    token : string = \"\";\n\n    log : boolean = true;\n\n    // 消息码-重试次数\n    resendCount : {[code:number]:number} = {};\n    // 超时时间，毫秒\n    checkTimeOut : number = 1000;\n\n    constructor(){\n        super()\n        // this.log = GameDefineManager.getInstance().GetGameDefineFirstValueNumber(998001, 0) == 0 ? false : true;\n    }\n    PostMessage(message: NetBaseMessage, callback: Function): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    RegisterDefaultMsgListener(callback: Function, context: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    SetToken(token : string){\n        this.token = token;\n        if(this.log){\n            TKLog.LogInfo(\"重新设置token:\" + token)\n        }\n    }\n\n    CreateInit(params: any) {\n        let ip = params[\"ip\"];\n        if(ip == null || ip == undefined){\n            TKLog.LogErr(\"HttpManager.CreateInit错误，需要传入ip参数\");\n            return;\n        }\n        this.url = ip;\n    }    \n    OnOpen(message: any) {\n        // this.event.fire(NetEventType.OnOpen, message);\n        // throw new Error(\"Method not implemented.\");\n    }\n    OnClose(message: any) {\n        // this.event.fire(NetEventType.OnClose, message);\n        // throw new Error(\"Method not implemented.\");\n    }\n    OnMessage(message: any) {\n        let topic = message[\"topic\"]\n        let payload = message[\"payload\"]\n\n        if(this.log){\n            TKLog.LogInfo(\"OnMessage\", message);\n        }\n        try{\n            let errCode : number = payload[\"err\"]\n            let errMsg:string = payload[\"message\"];\n            let resultObj = payload[\"dat\"];\n            if (resultObj == undefined) {\n                TKLog.LogWarn(\"获取到的数据没有dat结构：\", payload);\n                resultObj = {\"err\":1}\n            }\n\n            let errObj = new NetMessageError(errCode == undefined ? 0 : errCode, errMsg == undefined ? \"\" : errMsg);\n\n            //用户在其他设备登录\n            if(errObj.err == 401) {\n                this.event.fire(NetEventType.Unauthorized);\n                // return;\n            }\n            // TKLog.ToDo(\"解析:\" + topic + \"成功\", payload)\n            this.event.fire(NetEventType.OnMessage+\"_\"+topic, resultObj, errObj);\n        }catch(e){\n            this.OnError(new Error(`解析消息${topic}异常${e}，payload=${payload}`))\n        }\n    }\n    OnError(message: any) {\n        this.event.fire(NetEventType.OnError, message);\n    }\n    SendRequest(req: NetBaseReq) {\n        let content = req.Serialize(CodeFormat.JSON);\n\n        if(this.log){\n            TKLog.LogInfo(\"HttpManager.Send(\"+req.getMsgCode()+\")\", req);\n        }\n\n        this._postA(this.url+\"/\" + req.getMsgCode(), content, req)\n    }\n    reSend(req: NetBaseReq){\n        if (req == null || req == undefined){\n            return\n        }\n\n        if (!this.resendCount[req.getMsgCode()]){\n            this.resendCount[req.getMsgCode()] = 0\n        }\n        this.resendCount[req.getMsgCode()]++\n        if (this.resendCount[req.getMsgCode()] >= 3){\n            HttpManager.getInstance().OnError(new Error(\"网络请求超时\"))\n            TKLog.LogWarn(\"请求消息超时\", req)\n        }else{\n            TKLog.LogWarn(\"重新请求消息\", this.resendCount[req.getMsgCode()], req)\n            this.SendRequest(req)\n        }\n    }\n    // 注册一般消息监听\n    RegisterMsgListener(msgCode: string, callback: Function, context: any) {\n        this.event.register(NetEventType.OnMessage + \"_\" + msgCode, callback, context);\n    }\n    UnRegisterMsgListener(msgCode: string, callback: Function, context: any) {\n        this.event.remove(NetEventType.OnMessage + \"_\" + msgCode, callback, context);\n    }\n    // 注册服务器错误监听\n    RegisterErrorListener(callback : Function, context : any){\n        this.event.register(NetEventType.OnError, callback, context);\n    }\n    UnRegisterErrorListener(callback : Function, context : any){\n        this.event.remove(NetEventType.OnError, callback, context);\n    }\n\n    //注册401错误监听\n    RegisterUnauthorizedListener(callback: Function, context: any) {\n        this.event.register(NetEventType.Unauthorized, callback, context);\n    }\n    UnRegisterUnauthorizedListener(callback: Function, context: any) {\n        this.event.remove(NetEventType.Unauthorized, callback, context);\n    }\n\n    protected _postA(url: string, body: string,req: NetBaseReq) {\n        try {\n            let xhr = cc.loader.getXMLHttpRequest();\n            xhr.responseType = \"json\";\n            xhr.open(\"POST\", url, true);\n            // 超时时间（毫秒）\n            xhr.timeout = this.checkTimeOut;\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            TKLog.LogInfo(\"header:token\", url, this.token);\n            if(this.token.length > 0){\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.token);\n            }\n            xhr.onerror = (pe : ProgressEvent) => { \n                HttpManager.getInstance().OnError(new Error(\"网络请求失败\"))\n                TKLog.LogInfo(\"onerror:\", xhr.statusText, url, pe)\n            }\n            xhr.ontimeout = (pe) => {\n                // HttpManager.getInstance().OnError(new Error(\"网络请求超时\"))\n                this.reSend(req)\n                TKLog.LogInfo(\"ontimeout:\", url, xhr.timeout, xhr.statusText, xhr.status)\n                }\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState != 4) { return }\n                if (xhr.status >= 200 && xhr.status < 400) {\n                    // res(xhr.response)\n                    // TKLog.LogInfo(\"OK\", xhr.response)\n                    if (this.resendCount[req.getMsgCode()]){\n                        TKLog.LogInfo(\"重置重发次数\",req.getMsgCode())\n                        this.resendCount[req.getMsgCode()]= 0\n                    }\n                    this.OnMessage({\"topic\":req.getMsgCode(), \"payload\":xhr.response})\n                } else {\n                    TKLog.LogInfo(\"onreadystatechange:\", xhr.statusText, url, xhr)\n                    HttpManager.getInstance().OnError(new Error(\"服务器连接错误\"+xhr.status))\n                    // reject(new Error(\"服务器连接错误\"))\n                    // throw n ew Error(\"xhr-status-not-200-400\")\n                }\n            }\n            xhr.send(body)\n        }catch(error){\n            TKLog.LogInfo(\"catche error :\", error)\n            throw new Error(\"HttpMangaer._post Error:\" + error + url);\n        }\n        \n    }\n    // 发送数据喽\n    // protected async _post(url: string, body: string): Promise<object> {\n    //     return await new Promise<object>((res,reject) => {\n    //         try {\n    //             let xhr = cc.loader.getXMLHttpRequest();\n    //             xhr.responseType = \"json\";\n    //             xhr.open(\"POST\", url, true);\n    //             // 超时时间（毫秒）\n    //             xhr.timeout = this.checkTimeOut;\n    //             xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    //             TKLog.LogInfo(\"header:token\", url, this.token);\n    //             if(this.token.length > 0){\n    //                 xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.token);\n    //             }\n    //             xhr.onerror = (pe : ProgressEvent) => { \n    //                 HttpManager.getInstance().OnError(new Error(\"网络请求失败\"))\n    //                 TKLog.LogInfo(\"onerror:\", xhr.statusText, url, pe)\n    //             }\n    //             xhr.ontimeout = (pe) => {\n    //                 HttpManager.getInstance().OnError(new Error(\"网络请求超时\"))\n    //                 TKLog.LogInfo(\"ontimeout:\", url, xhr.timeout, xhr.statusText, xhr.status)\n    //              }\n    //             xhr.onreadystatechange = () => {\n    //                 if (xhr.readyState != 4) { return }\n    //                 if (xhr.status >= 200 && xhr.status < 400) {\n    //                     res(xhr.response)\n    //                 } else {\n    //                     TKLog.LogInfo(\"onreadystatechange:\", xhr.statusText, url, xhr)\n    //                     HttpManager.getInstance().OnError(new Error(\"服务器连接错误\"))\n    //                 }\n    //             }\n    //             xhr.send(body)\n    //         } catch (error) {\n    //             TKLog.LogInfo(\"catch err:\", error)\n    //             reject(error);\n    //         }\n    //     }).catch(e=>{\n    //         // HttpManager.getInstance().OnError(new Error(\"服务器连接错误\"))\n    //         throw new Error(\"HttpMangaer._post Error:\" + e + url);\n    //     });\n    // }\n}"]}