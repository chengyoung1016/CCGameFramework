{"version":3,"sources":["assets/script/framework/log/TKLogNone.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,mCAA4D;AAG5D;IAAA;QAEc,aAAQ,GAAc,iBAAQ,CAAC,IAAI,CAAC;QACpC,YAAO,GAAa,KAAK,CAAC;QAE1B,cAAS,GAAsB,EAAE,CAAA;IAgD/C,CAAC;IA9CG,+BAAW,GAAX,UAAY,KAAe;QACvB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IACD,8BAAU,GAAV,UAAW,SAAkB;QACzB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC7B,CAAC;IACD,2BAAO,GAAP,UAAQ,GAAQ;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QAC7B,OAAO,CAAC,GAAG,OAAX,OAAO,kBAAK,GAAG,GAAK,KAAK,GAAC;QAC1B,IAAI,CAAC,WAAW,OAAhB,IAAI,kBAAa,iBAAQ,CAAC,IAAI,EAAE,GAAG,GAAK,KAAK,GAAC;IAClD,CAAC;IACD,4BAAQ,GAAR,UAAS,GAAQ;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QAC9B,OAAO,CAAC,GAAG,OAAX,OAAO,kBAAK,GAAG,GAAK,KAAK,GAAC;QAC1B,IAAI,CAAC,WAAW,OAAhB,IAAI,kBAAa,iBAAQ,CAAC,KAAK,EAAE,GAAG,GAAK,KAAK,GAAC;IACnD,CAAC;IACD,2BAAO,GAAP,UAAQ,GAAQ;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QAC7B,OAAO,CAAC,IAAI,OAAZ,OAAO,kBAAM,GAAG,GAAK,KAAK,GAAC;QAC3B,IAAI,CAAC,WAAW,OAAhB,IAAI,kBAAa,iBAAQ,CAAC,IAAI,EAAE,GAAG,GAAK,KAAK,GAAC;IAClD,CAAC;IACD,0BAAM,GAAN,UAAO,GAAQ;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QAC5B,OAAO,CAAC,KAAK,OAAb,OAAO,kBAAO,GAAG,GAAK,KAAK,GAAC;QAC5B,IAAI,CAAC,WAAW,OAAhB,IAAI,kBAAa,iBAAQ,CAAC,KAAK,EAAE,GAAG,GAAK,KAAK,GAAC;IACnD,CAAC;IACD,wBAAI,GAAJ,UAAK,GAAQ;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QAC1B,IAAI,CAAC,OAAO,CAAC,cAAc,GAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IACD,0BAAM,GAAN,UAAO,GAAW,EAAE,GAAQ;QAAE,eAAe;aAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;YAAf,8BAAe;;QACzC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAC,GAAG,GAAG,GAAG,EAAE,KAAK,CAAC,CAAA;IACtC,CAAC;IAED,uCAAmB,GAAnB,UAAoB,QAA2C;QAC3D,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC;YAC1C,IAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAC;gBAC7B,OAAM;aACT;SACJ;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;IACjC,CAAC;IACD,yCAAqB,GAArB,UAAsB,QAA2C;QAC7D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,QAAQ,EAAjB,CAAiB,CAAC,CAAA;IACrE,CAAC;IAEO,+BAAW,GAAnB,UAAoB,KAAgB,EAAE,GAAS;;QAAE,eAAgB;aAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;YAAhB,8BAAgB;;QAC7D,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAC;YAC1C,CAAA,KAAA,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA,CAAC,OAAO,2BAAC,KAAK,EAAE,GAAG,GAAK,KAAK,GAAC;SAClD;IACL,CAAC;IACL,gBAAC;AAAD,CArDA,AAqDC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import ITKLog, { LogLevel, ITKLogListener } from \"./ITKLog\";\nimport Emitter from \"../event/Emitter\";\n\nexport default class TKLogNone implements ITKLog{\n    \n    protected logLevel : LogLevel = LogLevel.Info;\n    protected logFile : boolean = false;\n\n    protected listeners : ITKLogListener[] = []\n\n    SetLogLevel(level: LogLevel) {\n        this.logLevel = level;\n    }\n    SetLogFile(logToFile: boolean) {\n        this.logFile = logToFile;\n    }\n    LogInfo(msg: any, ...subst: any[]) {\n        console.log(msg, ...subst)\n        this.logCallback(LogLevel.Info, msg, ...subst)\n    }\n    LogDebug(msg: any, ...subst: any[]) {\n        console.log(msg, ...subst)\n        this.logCallback(LogLevel.Debug, msg, ...subst)\n    }\n    LogWarn(msg: any, ...subst: any[]) {\n        console.warn(msg, ...subst)\n        this.logCallback(LogLevel.Warn, msg, ...subst)\n    }\n    LogErr(msg: any, ...subst: any[]) {\n        console.error(msg, ...subst)\n        this.logCallback(LogLevel.Error, msg, ...subst)\n    }\n    ToDo(msg: any, ...subst: any[]) {\n        this.LogWarn(\"TooooDooooo:\"+msg, subst);\n    }\n    TagLog(tag: string, msg: any, ...subst: any[]) {\n        this.LogInfo(tag+\":\" + msg, subst)\n    }\n\n    RegisterLogListener(listener: import(\"./ITKLog\").ITKLogListener) {\n        for(let i = 0; i < this.listeners.length; ++i){\n            if(this.listeners[i] == listener){\n                return\n            }\n        }\n        this.listeners.push(listener)\n    }\n    UnRegisterLogListener(listener: import(\"./ITKLog\").ITKLogListener) {\n        this.listeners = this.listeners.filter(item => item !== listener)\n    }\n    \n    private logCallback(level : LogLevel, msg : any, ...subst : any[]) {\n        for(let i = 0; i < this.listeners.length; ++i){\n            this.listeners[i].OnLoged(level, msg, ...subst)\n        }\n    }\n}"]}