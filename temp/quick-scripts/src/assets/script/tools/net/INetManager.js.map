{"version":3,"sources":["assets/script/tools/net/INetManager.ts"],"names":[],"mappings":";;;;;;;AAEA,IAAY,YAaX;AAbD,WAAY,YAAY;IACpB,WAAW;IACX,8CAA8B,CAAA;IAC9B,UAAU;IACV,gDAAgC,CAAA;IAChC,UAAU;IACV,gBAAgB;IAChB,gDAAgC,CAAA;IAChC,yDAAyD;IACzD,4CAA4C;IAC5C,oDAAoC,CAAA;IACpC,YAAY;IACZ,0DAA0C,CAAA;AAC9C,CAAC,EAbW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAavB","file":"","sourceRoot":"/","sourcesContent":["import { NetBaseReq, NetBaseMessage } from \"../../netMessage/Message\";\n\nexport enum NetEventType {\n    // 建立连接成功触发\n    OnOpen = \"NetEventType_OnOpen\",\n    // 网络关闭时触发\n    OnClose = \"NetEventType_OnClose\",\n    // 系统级别的错误\n    // 参数：err(Error)\n    OnError = \"NetEventType_OnError\",\n    // 收到网络消息时触发，事件名称实际为 NetEventType_OnMessage_【msgcode】 的形式\n    // 参数:消息的JSONObj对象(any),err(NetMessageError)\n    OnMessage = \"NetEventType_OnMessage\",\n    //用户在其他设备登录了\n    Unauthorized = \"NetEventType_Unauthorized\"\n}\n\nexport default interface INetManager {\n    CreateInit(params : any);\n    OnOpen(message : any);\n    OnClose(message : any);\n    OnMessage(message : any);\n    OnError(message : any);\n    SendRequest(req : NetBaseReq);\n    PostMessage(message : NetBaseMessage, callback: Function|null): void;\n\n    RegisterMsgListener(msgCode : string, callback : Function, context : any);\n    UnRegisterMsgListener(msgCode : string, callback : Function, context : any);\n\n    RegisterDefaultMsgListener(callback : Function, context : any);\n}\n"]}