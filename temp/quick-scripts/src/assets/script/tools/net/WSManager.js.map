{"version":3,"sources":["assets/script/tools/net/WSManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n\nimport INetManager, { NetEventType } from \"./INetManager\";\n\nimport {MqttClient, connect} from \"../lib/mqtt.min.js\";\n\nimport {NetBase, NetBaseMessage, NetBaseReq} from \"../../netMessage/Message\";\nimport {CodeFormat} from \"../../netMessage/IBuilder\";\nimport TKStream from \"./RpcPromise\";\nimport {Buffer} from \"../buffer/index\"\nimport { Resp } from \"../../netMessage/PBMessage\";\nimport Singleton from \"../../framework/utils/Singleton\";\nimport Emitter from \"../../framework/event/Emitter\";\nimport TKLog from \"../../framework/log/TKLog\";\nimport MessageBuilder from \"../../netMessage/MessageBuilder\";\n\nfunction nop() {};\nfunction flushVolatile (queue) {\n    if (queue) {\n      Object.keys(queue).forEach(function (messageId) {\n            // if (queue[messageId].volatile && typeof queue[messageId].cb === 'function') {\n            //     queue[messageId].cb(new Error('Connection closed'))\n            //     delete queue[messageId]\n            // }\n        })\n    }\n}\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class WSManager extends Singleton implements INetManager{\n\n    event = new Emitter();\n    client : any = null;\n    // Inflight callbacks\n    requests : {[k: number]: any} = {};\n    requestsTimeout: number;\n\n    _log : boolean = true;\n\n    // 注册一般消息监听\n    RegisterMsgListener(msgCode: string, callback: Function, context: any) {\n        this.event.register(NetEventType.OnMessage + \"_\" + msgCode, callback, context);\n    }\n    UnRegisterMsgListener(msgCode: string, callback: Function, context: any) {\n        this.event.remove(NetEventType.OnMessage + \"_\" + msgCode, callback, context);\n    }\n    RegisterDefaultMsgListener(callback: Function, context: any) {\n        this.event.register(NetEventType.OnMessage, callback, context);\n    }\n\n    CreateInit(params : any) {\n        let ip = params[\"ip\"];\n        if(ip == null || ip == undefined){\n            TKLog.LogErr(\"WSManager.CreateInit错误，需要传入ip参数\");\n            return;\n        }\n        this.requestsTimeout = params[\"requestsTimeout\"] || 8000;\n        MessageBuilder.getInstance().init(CodeFormat.Protobuf);\n        this.client = connect(\n            ip\n            //\"ws://192.168.1.25:3653/mqant\"\n            //\"ws://192.168.1.43:3653/mqant\"\n            ,{\n            protocolId: 'MQIsdp',\n            protocolVersion: 3,\n            clientId:'mqttjs_' + Math.random().toString(16).substr(2, 8),\n            reconnectPeriod:0, //不自动重连\n        });\n        // connect(Packet)\n        this.client.on('connect', function (packet) {\n            if(this._log){\n                TKLog.LogInfo(\"WSManager connect \" , packet);\n            }\n            WSManager.getInstance().OnOpen(packet);\n        });\n        // message(Topic, Message,Packet)\n        this.client.on(\"message\", function (topic, payload) {\n            if(this._log){\n                TKLog.LogInfo(\"WSManager message \" + topic);\n            }\n            WSManager.getInstance().OnMessage({topic:topic, payload:payload})\n        })\n        // close(Event)\n        this.client.on('close', function (e,b) {\n            if(this._log){\n                TKLog.LogInfo(\"WSManager close \" + e);\n            }\n            WSManager.getInstance().OnClose(e);\n        })\n        // error(Error)\n        this.client.on('error', function (e) {\n            WSManager.getInstance().OnError(e);\n            // console.log(arguments)\n        })\n        TKStream.getInstance().init(this.client, this.requestsTimeout, CodeFormat.Protobuf);\n    }\n    /**\n     *\n     * @param message packet = {\n    cmd: 'type',\n    topic: topic,\n    payload: message,\n    qos: opts.qos,\n    retain: opts.retain,\n    messageId: this._nextId(),\n    dup: opts.dup\n  }\n     */\n    OnOpen(message: object) {\n        if(this._log){\n            TKLog.LogInfo(\"WSManager.OnOpen \", message)\n        }\n        this.event.fire(NetEventType.OnOpen, message);\n    }\n    OnClose(message: object) {\n        flushVolatile(this.requests)\n        this.event.fire(NetEventType.OnClose, message);\n    }\n    /**\n     * message包含两部分{\n     *  topic : \"msg_code\"\n     *  payload : \"json\"\n     * }\n     * 其中payload就是消息本地，需要再次JSON转换，结构为:\n     * {\n     *     Error : \"\",\n     *     Result : \"\"\n     * }\n     * 其中Result直接是一个JSON对象\n     * @param message 消息\n     */\n    OnMessage(message: any) {\n        let rsp: NetBase;\n        let msgId: number = 0;\n        let error: Error = null;\n        let isMsg: boolean = false;\n        let msgCode  : string= message[\"topic\"];\n        let payload = Buffer.from(message[\"payload\"]);\n        try {\n            let topics: string[] = message[\"topic\"].split(\"/\");\n            msgId = parseInt(topics[topics.length - 1])\n            if(Number.isNaN(msgId)){\n                msgId = 0\n            }else{\n                let newMsgCode : string = \"\"\n                for (let index = 0; index < topics.length - 1; index++) {\n                    const element = topics[index];\n                    newMsgCode += element\n                    if(index < topics.length - 2){\n                        newMsgCode += \"/\"\n                    }\n                }\n                msgCode = newMsgCode\n            }\n\n            if(this._log){\n                TKLog.LogInfo(\"WSManager OnMessage id: \" + msgId + \" msgCode=\" + msgCode + \" topic:\" + topics);\n            }\n\n            if (msgCode.includes(\"HD_MSG_\") || msgCode.includes(\"MSG_\")) {//消息类\n                isMsg = true;\n                rsp = MessageBuilder.getInstance().BuildMessage(msgCode, msgId, payload);\n            } else {//rpc的响应包\n                rsp = MessageBuilder.getInstance().BuildResponse(msgCode, msgId, payload);\n            }\n        } catch (e) {\n            error = new Error(`解析消息${msgCode}异常${e}，payload=${payload}`);\n            if (msgId > 0) {//对msgId的响应（包括rpc的response和同步消息）\n                TKStream.getInstance().onPacketError(msgId, error);\n                return;\n            }\n            this.OnError(error);\n            return\n        }\n        if (msgId > 0) {//对msgId的响应（包括rpc的response和同步消息）\n            this.FireAMessageEvent(msgCode, rsp);\n            TKStream.getInstance().onPacket(msgId, rsp);\n            return;\n        }\n        if (isMsg) {//异步的消息包\n            this.FireAMessageEvent(msgCode, rsp);\n            this.FireMessageEvent(msgCode, rsp);\n        }\n    }\n    OnError(message: object) {\n        if (this._log) {\n            TKLog.LogErr(\"WSManager.OnError \" + message);\n        }\n        this.event.fire(NetEventType.OnError, message);\n    }\n    /**\n     * 发送请求消息\n     * @param NetBaseReq req rpc请求\n     * @return Promise<any>\n     */\n    SendRequest(req: NetBaseReq): Promise<Resp> {\n        if (this._log) {\n            TKLog.LogInfo(\"WSManager.SendRequest\", req);\n        }\n        return TKStream.getInstance().send(req);\n    }\n    /**\n     * 设置超时\n     * @param NetBase packet\n     * @param callback 回调函数，可选\n     */\n    setTimeout(packet: NetBase, callback: Function| null) {\n        if (callback == null || typeof callback !== 'function') {\n            return;\n        }\n        let self = this;\n        let requestId = packet.getId();\n        if(this._log){\n            TKLog.LogInfo(\"setTimeout with: id=\" + requestId);\n        }\n        if (typeof requestId == 'undefined' || requestId <= 0) {\n            return;\n        }\n        // if there is no response for x second, return result\n        let timeout = setTimeout(function() {\n            var request = self.requests[requestId];\n            if(this._log){\n                TKLog.LogInfo(\"timeout :=\" + self.requestsTimeout);\n            }\n            if (request) request.cb(new Error('timeout reached while waiting for clients response'), request.req, null);\n            delete self.requests[requestId];\n        }, this.requestsTimeout);\n        self.requests[requestId] = {\n            type: packet.getMsgCode(),\n            volatile:false,\n            req: packet,\n            cb: callback || nop,\n            timeout: timeout\n        };\n    }\n    /**\n     * 向服务器提交消息\n     * @param NetBaseMessage 消息\n     * @param callback 回调函数，可选\n     */\n    PostMessage(msg: NetBaseMessage): Promise<any>{\n        if(this._log){\n            TKLog.LogInfo(\"WSManager.PostMessage\", msg);\n        }\n        return TKStream.getInstance().send(msg);\n    }\n    /**\n     * 触发收到服务器消息事件\n     * @param msgCode 消息类型\n     * @param args 传入的消息参数\n     */\n    FireMessageEvent(msgCode: string, ...args: any) {\n        if(this._log){\n            TKLog.LogInfo(\"WSManager.FireMessageEvent\", msgCode);\n        }\n        this.event.fire(NetEventType.OnMessage, msgCode, ...args);\n    }\n\n    FireAMessageEvent(msgCode : string, msg : NetBase){\n        this.event.fire(NetEventType.OnMessage + \"_\" + msgCode, msg)\n    }\n}\n"]}