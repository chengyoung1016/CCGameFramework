{"version":3,"sources":["assets/script/tools/net/RpcPromise.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import {NetBase} from \"../../netMessage/Message\";\nimport {CodeFormat} from \"../../netMessage/IBuilder\";\nimport Singleton from \"../../framework/utils/Singleton\";\n\nconst promiseTimeout = function <T>(ms, promise){\n    let id = null;\n    // Create a promise that rejects in <ms> milliseconds\n    let timeout = new Promise<T>((resolve, reject) => {\n        id = setTimeout(() => {\n        clearTimeout(id);\n        reject('Timed out in '+ ms + 'ms.');\n        }, ms);\n    }); \n    // Returns a race between our timeout and the passed in promise\n    // 本来在finnaly()clearTimeout可以及时清除定时器，但考虑浏览器兼容性，留一个可能泄漏的缺陷。\n    return Promise.race([\n        promise,\n        timeout\n        ]).then(result => {\n            clearTimeout(id);\n            return result;\n        });\n}\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nclass TKStream extends Singleton {\n    queue = {};\n    client: any;\n    timeout: number;\n    format: CodeFormat;\n    init(client: any, timeout: number, format: CodeFormat) {\n        this.format = format;\n        this.client = client;\n        this.timeout = timeout;\n    }\n    public doSend(packet: NetBase) {\n        let content = packet.Serialize(CodeFormat.Protobuf);\n        // console.log(\"publish \", packet.getMsgCode(), content.length);\n        this.client.publish(packet.getMsgCode(), content);\n    }\n    public send(packet: NetBase): Promise<any> {\n        let id = packet.getId();\n        // TKLog.LogInfo(\"Send Packet withId:\" + id);\n        if (typeof id == 'undefined' || id <= 0) {\n            this.doSend(packet);\n            return new Promise((resolve) =>{\n                resolve(null);\n            });\n        }\n        let self = this;\n        let job = new Promise((resolve, reject) => {\n            self.doSend(packet);\n            self.queue[id] = {\n                type: packet.getMsgCode(),\n                volatile:false,\n                req: packet,\n                resolve: resolve,\n                reject: reject\n            };\n        });\n        return this.wrapTimeout(id, job, this.timeout);\n    }\n    public onPacket(msgId: number, packet: NetBase) {\n        \n        let request = this.queue[msgId] ? this.queue[msgId] : null;\n        if (request) {\n            request.resolve(packet);\n            delete this.queue[msgId];\n        }\n    }\n\n    public onPacketError(msgId: number, error: Error) {\n        let request = this.queue[msgId] ? this.queue[msgId] : null;\n        if (request) {\n\n            request.reject(error);\n            delete this.queue[msgId];\n        }\n    }\n    /**\n     * 生成带超时功能的Promise\n     * @param number msgId\n     * @param Promise packet\n     * @param NetBase packet\n     */    \n    public wrapTimeout (msgId: number, promise: Promise<any>, ms: number): Promise<any> {\n        let id;\n        let self = this;\n        // Create a promise that rejects in <ms> milliseconds\n        let timeout = new Promise((resolve, reject) => {\n            id = setTimeout(() => {\n                console.log('Timed out in '+ ms + 'ms.');\n                clearTimeout(id);\n                reject('Timed out in '+ ms + 'ms.');\n                console.log('delete job NO:'+ msgId);\n                delete self.queue[msgId];\n            }, ms);\n        }); \n        // Returns a race between our timeout and the passed in promise\n        // 本来在finnaly()clearTimeout可以及时清除定时器，但考虑浏览器兼容性，留一个可能泄漏的缺陷。\n        return Promise.race([\n            promise,\n            timeout\n            ]).then(result => {\n                clearTimeout(id);\n                return result;\n            });\n    }\n}\n\nexport default TKStream"]}