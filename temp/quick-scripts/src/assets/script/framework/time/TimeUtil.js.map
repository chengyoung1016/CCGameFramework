{"version":3,"sources":["assets/script/framework/time/TimeUtil.ts"],"names":[],"mappings":";;;;;;AAAA;IAAA;IA+DA,CAAC;IA5DiB,aAAI,GAAlB;QACI,OAAO,QAAQ,CAAC,eAAe,EAAE,CAAA;IACrC,CAAC;IACD;;OAEG;IACW,wBAAe,GAA7B;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,kBAAkB,EAAE,GAAG,IAAI,CAAC,CAAA;IAC3D,CAAC;IACD;;OAEG;IACW,2BAAkB,GAAhC;QACI,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAClD,CAAC;IACD;;OAEG;IACW,eAAM,GAApB;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAA;IACxC,CAAC;IAED;;OAEG;IACW,4BAAmB,GAAjC;QACI,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QACnB,OAAO,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,UAAU,EAAE,CAAA;IACrI,CAAC;IACD;;;;OAIG;IACW,+BAAsB,GAApC,UAAqC,KAAa;QAC9C,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;QACnB,OAAO,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC,QAAQ,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC,MAAM,EAAE,CAAA;IACtE,CAAC;IAEa,kBAAS,GAAvB,UAAwB,GAAW;QAC/B,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;QACpC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;QACpD,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAClE,IAAM,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC;QAE7D,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,IAAI,GAAG,EAAE,EAAE;YACX,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC;SACxB;QACD,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,EAAE,EAAE;YACb,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC;SAC5B;QACD,IAAI,SAAS,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,EAAE,EAAE;YACb,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC;SAC1B;QAED,OAAU,OAAO,SAAI,SAAS,SAAI,SAAW,CAAC;IAClD,CAAC;IA7Dc,mBAAU,GAAG,IAAI,IAAI,EAAE,CAAC;IA8D3C,eAAC;CA/DD,AA+DC,IAAA;kBA/DoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["export default class TimeUtil {\n    private static start_date = new Date();\n\n    public static time() {\n        return TimeUtil.GetSecWhenStart()\n    }\n    /**\n     * 获取游戏开始到现在经历了多少秒\n     */\n    public static GetSecWhenStart() {\n        return Math.floor(TimeUtil.GetMilSecWhenStart() / 1000)\n    }\n    /**\n     * 获取游戏开始到现在经历了多少毫秒\n     */\n    public static GetMilSecWhenStart() {\n        return Date.now() - this.start_date.valueOf();\n    }\n    /**\n     * 获取格林威治时间秒数\n     */\n    public static NowSec() {\n        return Math.floor(Date.now() / 1000)\n    }\n\n    /**\n     * 获取当前时间的字符串格式 Year-Month-Day Hour:Minute:Second\n     */\n    public static NowDateFormatString(): string {\n        let d = new Date();\n        return d.getFullYear() + \"-\" + d.getMonth() + \"-\" + d.getDay() + \" \" + d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds()\n    }\n    /**\n     * 获取年月日的字符串格式，并使用split间隔\n     * 比如split为 - 则返回 2020-2-2\n     * @param split 间隔符号\n     */\n    public static NowDataYMDFormatString(split: string): string {\n        let d = new Date();\n        return d.getFullYear() + split + d.getMonth() + split + d.getDay()\n    }\n\n    public static formatSec(sec: number): string {\n        const day = Math.floor(sec / 86400);\n        const hour = Math.floor((sec - day * 86400) / 3600);\n        const minute = Math.floor((sec - day * 86400 - hour * 3600) / 60);\n        const second = sec - day * 86400 - hour * 3600 - minute * 60;\n\n        let strHour = hour.toString();\n        if (hour < 10) {\n            strHour = \"0\" + hour;\n        }\n        let strMinute = minute.toString();\n        if (minute < 10) {\n            strMinute = \"0\" + minute;\n        }\n        let strSecond = second.toString();\n        if (second < 10) {\n            strHour = \"0\" + second;\n        }\n\n        return `${strHour}:${strMinute}:${strSecond}`;\n    }\n}"]}