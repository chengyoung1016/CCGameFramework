{"version":3,"sources":["assets/script/framework/utils/ResLoadManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Singleton from \"./Singleton\"\nimport TKLog from \"../log/TKLog\";\n\n\nexport default class ResLoadManager extends Singleton {\n    /**\n     * 动态加载资源\n     * @param path 指定路径\n     * @param type 指定类型\n     */\n    async LoadRes<T extends typeof cc.Asset>(path: string | string[], type: T): Promise<InstanceType<T>> {\n        return await new Promise<InstanceType<T>>((res) => {\n            TKLog.LogInfo(\"ResLoadManager开始载入资源:\", path)\n            cc.resources.load(path, type, (err: Error, resource: InstanceType<T>) => {\n                if (err != null) {\n                    TKLog.LogWarn(\"载入资源失败：\", path, \":\", err);\n                    res(null);\n                }else{\n                    res(resource);\n                }\n            })\n        }).catch(e=>{\n            TKLog.LogErr(\"ResLoadManager.LoadRes Err:\" + e);\n            throw new Error(\"ResLoadManager.LoadRes Err:\" + e);\n        })\n    }\n\n    /**\n     * 加载指定目录下所有资源\n     * @param path 指定目录路径\n     * @param type 加载资源类型  有则为指定该类型  无则为该目录下所有类型资源\n     */\n    async LoadResDir<T extends typeof cc.Asset>(path: string, type?: T): Promise<InstanceType<T>> {\n        return await new Promise<InstanceType<T>>((res) => {\n            if(type) {\n                cc.resources.loadDir(path, (err, resource) => {\n                    if(err != null) {\n                        TKLog.LogWarn(\"载入资源失败：\", path, \":\", err);\n                        res(null);\n                    } else {\n                        res(resource);\n                    }\n                })\n            } else {\n                cc.resources.loadDir(path, type, (err, resource) => {\n                    if(err != null) {\n                        TKLog.LogWarn(\"载入资源失败：\", path, \":\", err);\n                        res(null);\n                    } else {\n                        res(resource);\n                    }\n                })\n            }\n        }).catch(e => {\n            TKLog.LogErr(\"ResLoadManager.LoadResDir Err:\" + e);\n            throw new Error(\"ResLoadManager.LoadResDir Err:\" + e);\n        })\n    }\n\n    /**\n     * 查询资源加载完成后返回的paths列表\n     * @param path 指定加载资源的路径\n     * @param type 指定加载资源的类型\n     */\n    InquirePathInfo(path: string, type: typeof cc.Asset): string[] {\n        let infos = cc.resources.getDirWithPath(path, type);\n        let paths = infos.map((info) => {\n            return info.path;\n        });\n        return paths;\n    }\n\n    /**\n     * 加载远程资源\n     * @param url 远程资源地址\n     * @param type 远程资源类型\n     */\n    async LoadRemoteRes<T extends typeof cc.Asset>(url: string, type: T): Promise<InstanceType<T>> {\n        return await new Promise<InstanceType<T>>(res => {\n            cc.assetManager.loadRemote(url, (err: Error, asset: InstanceType<T>) => {\n                if(err) {\n                    TKLog.LogWarn(\"load remote res failed:\", err)\n                } else {\n                    res(asset);\n                }\n            })\n        }).catch(e => {\n            TKLog.LogErr(\"load remote res failed:\" + e);\n            throw new Error(\"load remote res failed:\" + e);\n        })\n    }\n\n    /**\n     * 加载远程图片资源\n     * @param url 远程图片地址\n     */\n    async LoadRemoteImage(url: string): Promise<cc.Texture2D> {\n        return await new Promise<cc.Texture2D>((res) => {\n            cc.assetManager.loadRemote(url, (err: Error, texture: cc.Texture2D) => {\n                if(err) {\n                    TKLog.LogWarn(\"load remote image failel:\", err);\n                } else {\n                    res(texture);\n                }\n            })\n        }).catch(e => {\n            TKLog.LogErr(\"load remote iamge failed:\" + e);\n            throw new Error(\"load remote iamge failed:\" + e);\n        })\n    }\n\n    /**\n     * 加载远程音频资源\n     * @param url 远程音频资源地址\n     */\n    async LoadRemoteAudioClip(url: string): Promise<cc.AudioClip> {\n        return await new Promise<cc.AudioClip>((res) => {\n            cc.assetManager.loadRemote(url, (err: Error, audioClip: cc.AudioClip) => {\n                if(err) {\n                    TKLog.LogWarn(\"load remote image failel:\", err);\n                } else {\n                    res(audioClip);\n                }\n            })\n        }).catch(e => {\n            TKLog.LogErr(\"load remote iamge failed:\" + e);\n            throw new Error(\"load remote iamge failed:\" + e);\n        })\n    }\n\n    /**\n     * 加载远程文本资源\n     * @param url 远程文本资源地址\n     */\n    async LoadRemoteText(url: string): Promise<cc.TextAsset> {\n        return await new Promise<cc.TextAsset>((res) => {\n            cc.assetManager.loadRemote(url, (err: Error, text: cc.TextAsset) => {\n                if(err) {\n                    TKLog.LogWarn(\"load remote image failel:\", err);\n                } else {\n                    res(text);\n                }\n            })\n        }).catch(e => {\n            TKLog.LogErr(\"load remote iamge failed:\" + e);\n            throw new Error(\"load remote iamge failed:\" + e);\n        })\n    }\n\n    /**\n     * 资源释放\n     * @param asset 待释放资源\n     */\n    ReleaseAsset(asset: cc.Asset) {\n        cc.assetManager.releaseAsset(asset);\n    }\n\n    ReleaseAll() {\n        cc.assetManager.releaseAll();\n    }\n\n    /**\n     * 动态加载资源的释放\n     * @param path 待释放资源路径\n     * @param type 待释放资源类型\n     */\n    ReleaseRes(path: string, type: typeof cc.Asset) {\n        cc.resources.release(path, type);\n    }\n\n    async LoadSpriteInAtlas(atlasPath : string, spriteName : string) : Promise<cc.SpriteFrame> {\n        return await new Promise<cc.SpriteFrame>(res=>{\n            cc.resources.load(atlasPath, cc.SpriteAtlas, (err, resource) =>{\n                if(err != null){\n                    // TKLog.LogWarn(`载入资源失败, path=${path}, err=${err}`);\n                    TKLog.LogWarn(\"载入图集资源失败：\", atlasPath, \":\", err);\n                    res(null);\n                }else{\n                    res((resource as cc.SpriteAtlas).getSpriteFrame(spriteName))\n                }\n            })\n        }).catch(e=>{\n            TKLog.LogErr(\"ResLoadManager.LoadSpriteInAtlas Err:\" + e);\n            throw new Error(\"ResLoadManager.LoadSpriteInAtlas Err:\" + e);\n        })\n    }\n    \n}\n"]}