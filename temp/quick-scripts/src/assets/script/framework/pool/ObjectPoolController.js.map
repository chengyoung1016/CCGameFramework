{"version":3,"sources":["assets/script/framework/pool/ObjectPoolController.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import PoolableComponent from \"./PoolableComponent\";\nimport ObjectPool from \"./ObjectPool\";\nimport TKLog from \"../log/TKLog\";\nimport ResLoadManager from \"../utils/ResLoadManager\";\n\nexport default class ObjectPoolController {\n    // 异步实例化指定路径的prefab\n    static InstantiateWithPathAsync(path : string) : Promise<cc.Node> {\n        return new Promise<cc.Node>((resolve,reject)=>{\n            ResLoadManager.getInstance().LoadRes(path, cc.Prefab)\n            .then(asset=>{\n                if (asset == null) {\n                    TKLog.LogWarn(\"实例化对象\"+path+\"失败，找不到资源\");\n                    resolve(null)\n                }else{\n                    resolve(this.Instantiate(asset))\n                }\n            })\n            .catch(e=>{\n                TKLog.LogErr(\"实例化对象\" + path + \" 失败 :\" + e)\n                reject(new Error(\"实例化对象\" + path + \"失败:\" + e))\n            })\n        });\n    }\n    // 读取resources路径下prefab进行实例化\n    static InstantiateWithPath(path : string, context : any, loadCompleteCallBack : Function) {\n        ResLoadManager.getInstance().LoadRes(path, cc.Prefab)\n        .then(asset=>{\n            if (asset == null) {\n                TKLog.LogWarn(\"实例化对象\"+path+\"失败，找不到资源\")\n                return\n            }\n            if (loadCompleteCallBack != null){\n                loadCompleteCallBack.call(context, this.Instantiate(asset))\n            }\n        })\n        .catch(e=>{\n            TKLog.LogErr(\"实例化对象\" + path + \" 失败 :\" + e)\n            if(loadCompleteCallBack != null){\n                loadCompleteCallBack.call(context,null)\n            }\n        })\n    }\n    //不管是否放入对象池的预制体，都用这个方法统一实例化\n    static Instantiate(prefab : cc.Prefab) : cc.Node{\n        // TKLog.LogInfo(\"ObjectPoolController.Instantiate(\" +prefab.name+\")\");\n\n        let prefabPool = prefab.data.getComponent(\"PoolableComponent\");\n        if(prefabPool == null){\n            // TKLog.LogWarn(prefab.name+\"中找不到PoolableComponent,直接进行实例化\");\n            return cc.instantiate(prefab);\n        }\n\n        let go = ObjectPool._GetPool(prefabPool).GetPooledInstance();\n        if(go != null){\n            return go;\n        }else{\n            // TKLog.LogWarn(prefab.name+\"没有通过pool获取到，将直接实例化\")\n            return this.InstantiateWithoutPool(prefab);\n        }\n    }\n\n    static InstantiateWithPos(prefab : cc.Prefab, position : cc.Vec2) : cc.Node{\n        //TKLog.LogInfo(\"ObjectPoolController.InstantiateWithPos(\" + prefab.name + \").position(\" + position + \")\");\n\n        let go = this.Instantiate(prefab);\n        go.setPosition(position);\n        return go;\n    }\n\n    static InstantiateWithoutPool(prefab : cc.Prefab) : cc.Node{\n        // TKLog.LogInfo(\"ObjectPoolController.InstantiateWithoutPool(\" + prefab.name +\")\");\n        \n        return this.InstantiateWithoutPoolWithPos(prefab, cc.Vec2.ZERO);\n    }\n\n    static InstantiateWithoutPoolWithPos(prefab : cc.Prefab, position : cc.Vec2) : cc.Node{\n        // TKLog.LogInfo(\"ObjectPoolController.InstantiateWithoutPoolWithPos(\"+prefab.name+\").position(\" + position + \")\");\n\n        let go = cc.instantiate(prefab);\n        go.setPosition(position);\n        // go.setRotation(quaternion, 0, 0, 0);\n        let pool = go.getComponent(PoolableComponent);\n        if(pool){\n            pool._createdWithPoolController = true;\n            go.removeComponent(PoolableComponent);\n        }\n        return go;\n    }\n\n    static Destroy(obj : cc.Node){\n        // TKLog.LogInfo(\"ObjectPoolController.Destroy(\" + obj.name + \")\");\n\n        let poolObj = obj.getComponent(PoolableComponent);\n        if(poolObj == null){\n            // TKLog.LogInfo(\"对象(\" + obj.name + \")中找不到PoolableComponent，所以直接销毁\");\n            obj.destroy();\n            return;\n        }\n        if(poolObj._myPool != null){\n            poolObj._myPool.Destroy(poolObj);\n        }else{\n            if(!poolObj._createdWithPoolController){\n                TKLog.LogWarn(\"池中物\" + obj.name + \" 不是通过ObjectPoolController实例化的,将直接销毁\");\n            }\n            obj.destroy();\n        }\n    }\n}"]}