{"version":3,"sources":["assets/script/framework/ui/UIModule.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Singleton from \"../utils/Singleton\";\nimport UIFrame, { UIClass } from \"./UIFrame\";\nimport TKLog from \"../log/TKLog\";\nimport IUIBridge from \"./IUIBridge\";\nimport UIBridgeNormal from \"./UIBridgeNormal\";\nimport ResLoadManager from \"../utils/ResLoadManager\";\n\ninterface IFrameState {\n    (frame : UIFrame) : void;\n}\n\nexport default class UIModule extends Singleton {\n    UIWindows : {[uiname:string]:UIFrame} = {};\n\n    OnInitEvent : IFrameState;\n    OnOpenEvent : IFrameState;\n    OnCloseEvent : IFrameState;\n\n    protected _UIBridge : IUIBridge = null;\n\n    constructor(){\n        super();\n        // TKLog.LogInfo(\"UIModule初始化\");\n        this._UIBridge = new UIBridgeNormal();\n        this._UIBridge.InitBridge();\n    }\n\n    /**\n     * 打开窗口\n     * @param uiTemplateName 窗口名称，该名称也是prefab的名称\n     * @param args 要传入的参数\n     */\n    OpenWindow<T extends UIFrame>(uiClass : UIClass<T>, ...args : any) : Promise<UIFrame>{\n        // TKLog.LogInfo(\"UIModule.OpenWindow(\"+uiTemplateName+\")\");\n        let uiTemplateName = uiClass.getUrl();\n        let template = this.UIWindows[uiTemplateName];\n\n        if(template){\n            if(template.isValid == false) {\n                //TKLog.LogInfo(\"UIModule.OpenWindow 虽然已经存在，但无法使用，需要重新加载\" + uiTemplateName);\n                delete this.UIWindows[uiTemplateName];\n            } else {\n                //TKLog.LogInfo(\"UIModule.OpenWindow 已经存在，直接打开\" + uiTemplateName);\n                this.OnOpen(this.UIWindows[uiTemplateName], ...args);\n                return Promise.resolve(this.UIWindows[uiTemplateName]);\n            }\n        }\n\n        return this.LoadWindow(uiClass, true, ...args);\n    }\n\n    /**\n     * 关闭窗口\n     * @param uiClass 窗口类名称\n     */\n    CloseWindow<T extends UIFrame>(uiClass : UIClass<T>){\n        let name = uiClass.getUrl();\n        if(this.UIWindows[name] == null){\n            // TKLog.LogWarn(\"CloseWindow 找不到窗口\" + name);\n            return;\n        }\n\n        let frame = this.UIWindows[name];\n        frame.OnClose();\n        if(cc.isValid(frame.node)) {\n            frame.node.active = false;\n        }\n\n        if(this.OnCloseEvent != null){\n            this.OnCloseEvent(frame);\n        }\n    }\n\n    /**\n     * 获取窗口对象\n     * 如果该窗口还没有加载过，则会返回null\n     * @param name 窗口名称\n     */\n    GetFrame(name : string) : UIFrame {\n        if(this.UIWindows[name] == null){\n            return null;\n        }\n        return this.UIWindows[name];\n    }\n\n    /**\n     * 判断该窗口是否已经加载过\n     * @param name 窗口名称\n     */\n    IsLoad(name : string) : boolean {\n        if(this.UIWindows[name] == null){\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * 检测该窗口当前是否正在显示\n     * @param name 窗口名称\n     */\n    IsOpen(name : string) : boolean {\n        if(this.UIWindows[name] == null){\n            return false;\n        }\n        return this.UIWindows[name].node.active;\n    }\n\n    /**\n     * 销毁窗口\n     * 即destroy节点\n     * @param uiClass 窗口类名称\n     * @param release 是否释放该窗口的资源\n     */\n    DestroyWindow<T extends UIFrame>(uiClass : UIClass<T>, release : boolean = true){\n        // TKLog.LogInfo(\"UIModule.DestroyWindow(\" + uiTemplateName+\")\");\n        let uiTemplateName = uiClass.getUrl();\n        if(this.UIWindows[uiTemplateName] == null){\n            TKLog.LogWarn(\"UIModule.DestroyWindow 找不到要销毁的窗口\" + uiTemplateName);\n            let uiroot = cc.find(\"Canvas\").getChildByName(\"UIRoot\");\n            if(uiroot && uiroot.children.length > 0) {\n                uiroot.children.forEach((child) => {\n                    let delui = child.getChildByName(uiTemplateName);\n                    if(delui && cc.isValid(delui)) {\n                        TKLog.LogInfo(\"uiwindows里找不到当前节点，从场景节点里遍历该节点并销毁\");\n                        delui.destroy();\n                    }\n                })\n            }\n            return;\n        }\n        let frame = this.UIWindows[uiTemplateName];\n        if(cc.isValid(frame.node)) {\n            frame.node.destroy();\n        }\n        \n        if(release){\n            TKLog.LogInfo(\"TODO 释放窗口\" + uiTemplateName + \"资源\");\n        }\n\n        delete this.UIWindows[uiTemplateName];\n        // this.UIWindows[uiTemplateName] = null;\n    }\n\n    /**\n     * 销毁所有已加载的窗口\n     */\n    DestroyAllWindow(){\n        // TKLog.LogInfo(\"UIModule.DestroyAllWindow()\")\n        // let loadList = [];\n        // console.log(this.UIWindows);\n        for(let item in this.UIWindows){\n            // console.log(item);\n            if(this.IsLoad(item)){\n                // loadList.push(this.UIWindows[item]);\n                let frame = this.UIWindows[item];\n                frame.node.destroy();\n                delete this.UIWindows[item];\n            }\n        }\n\n        // loadList.forEach((name)=>{\n        //     // this.DestroyWindow(name, true);\n        //     name.destroy();\n        // })\n    }\n\n    /**\n     * 关闭所有窗口\n     */\n    CloseAllWindow(){\n        // TKLog.LogInfo(\"UIModule.CloseAllWindow()\")\n        // let loadList = [];\n        for(let item in this.UIWindows){\n            if(this.IsOpen(item)){\n                let frame = this.UIWindows[item];\n                frame.node.active = false;\n                // delete this.UIWindows[item];\n                // loadList.push(this.UIWindows[item]);\n            }\n        }\n        // loadList.forEach((name)=>{\n        //     this.CloseWindow(name);\n        // })\n    }\n\n    private async LoadWindow<T extends UIFrame>(uiClass : UIClass<T>, openWhenFinish : boolean, ...args : any) : Promise<UIFrame>{\n        // TKLog.LogInfo(\"UIModule.LoadWindow(\" + uiTemplateName + \")\");\n        let uiTemplateName = uiClass.getUrl();\n        if(this.UIWindows[uiTemplateName] != null){\n            TKLog.LogWarn(\"UIModule.LoadWindow 多次加载窗口:\" + uiTemplateName);\n        }\n\n        return await new Promise<UIFrame>((resolve, reject)=>{\n            this._UIBridge.LoadUIAsset(uiTemplateName)\n            .then(prefab=>{\n                if(prefab == null){ \n                    resolve(null);\n                }else{\n                    let inst = cc.instantiate(prefab);\n                    let frame = this._UIBridge.CreateUIController(inst, uiClass.getName());\n                    frame.UIName = uiTemplateName;\n                    this._UIBridge.UIObjectFilter(frame, inst);\n    \n                    this.UIWindows[uiTemplateName] = frame;\n                    this.InitWindow(frame, openWhenFinish, ...args);\n                    resolve(frame);\n                }\n            }).catch(e=>{\n                TKLog.LogErr(\"加载窗口\"+uiTemplateName +\"失败:\" + e);\n                resolve(null);\n            })\n        }).catch(e=>{\n            TKLog.LogErr(\"UIModule.LoadWindow(\" + uiTemplateName + \") Err:\" + e);\n            throw new Error(\"UIModule.LoadWindow(\" + uiTemplateName + \") Err:\" +e);\n        })\n    }\n    private InitWindow(frame : UIFrame, openWhenFinish : boolean, ...args : any) {\n        // TKLog.LogInfo(\"UIModule.InitWindow(\" + frame + \")\");\n        frame.OnInit();\n        if(this.OnInitEvent != null){\n            this.OnInitEvent(frame);\n        }\n        if(openWhenFinish){\n            this.OnOpen(frame, ...args);\n        }else{\n            frame.node.active = false;\n        }\n    }\n\n    private OnOpen(frame : UIFrame, ...args : any) {\n        TKLog.LogInfo(\"UIModule.OnOpen(\" + frame.name + \")\");\n        if(frame == null){\n            return;\n        }\n        // if(frame.node.active){\n        //     frame.OnClose();\n        //     if(this.OnCloseEvent != null){\n        //         this.OnCloseEvent(frame);\n        //     }\n        // }\n        \n        frame.BeforeOpen(()=>{\n            frame.node.active = true;\n            frame.OnOpen(...args);\n\n            if(this.OnOpenEvent != null){\n                this.OnOpenEvent(frame);\n            }\n        }, ...args);\n    }\n}\n"]}