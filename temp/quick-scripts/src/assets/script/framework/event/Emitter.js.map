{"version":3,"sources":["assets/script/framework/event/Emitter.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,uCAAkC;AAGlC;IAAA;QACI,WAAW;QACD,cAAS,GAAG,EAAE,CAAC;IAmD7B,CAAC;IAjDG;;;;;OAKG;IACI,0BAAQ,GAAf,UAAgB,IAAY,EAAE,QAAkB,EAAE,OAAY;QAC1D,IAAI,SAAS,GAAe,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,EAAE;YACZ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SAC7B;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,kBAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;OAKG;IACI,wBAAM,GAAb,UAAc,IAAY,EAAE,QAAkB,EAAE,OAAY;QACxD,IAAI,SAAS,GAAe,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS;YAAE,OAAO;QACvB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC1B,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvB,MAAM;aACT;SACJ;QACD,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAC/B;IACL,CAAC;IAED;;;OAGG;IACI,sBAAI,GAAX,UAAY,IAAY;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACpC,IAAI,SAAS,GAAe,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS;YAAE,OAAO;QACvB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,MAAM,OAAf,QAAQ,kBAAQ,IAAI,GAAK,IAAI,GAAE;SAClC;IACL,CAAC;IACL,cAAC;AAAD,CArDA,AAqDC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import Observer from \"./Observer\";\n\n\nexport default class Emitter {\n    /** 监听数组 */\n    protected listeners = {};\n\n    /** \n     * 注册事件\n     * @param name 事件名称\n     * @param callback 回调函数\n     * @param context 上下文\n     */\n    public register(name: string, callback: Function, context: any) {\n        let observers: Observer[] = this.listeners[name];\n        if (!observers) {\n            this.listeners[name] = [];\n        }\n        this.listeners[name].push(new Observer(callback, context));\n    }\n\n    /**\n     * 移除事件\n     * @param name 事件名称\n     * @param callback 回调函数\n     * @param context 上下文\n     */\n    public remove(name: string, callback: Function, context: any) {\n        let observers: Observer[] = this.listeners[name];\n        if (!observers) return;\n        let length = observers.length;\n        for (let i = 0; i < length; i++) {\n            let observer = observers[i];\n            if (observer.compar(context)) {\n                observers.splice(i, 1);\n                break;\n            }\n        }\n        if (observers.length == 0) {\n            delete this.listeners[name];\n        }\n    }\n\n    /**\n     * 发送事件\n     * @param name 事件名称\n     */\n    public fire(name: string, ...args: any[]) {\n        let observers: Observer[] = this.listeners[name];\n        if (!observers) return;\n        let length = observers.length;\n        for (let i = 0; i < length; i++) {\n            let observer = observers[i];\n            observer.notify(name, ...args);\n        }\n    }\n}\n"]}