{"version":3,"sources":["assets/script/netMessage/PBMessage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import * as jwt from \"../tools/jwtSimple/JwtSimple\";\nimport {Buffer} from \"../tools/buffer/index\";\nimport {MessageType, CodeFormat} from \"./IBuilder\";\nimport {message as tkmessage, google, jubian}  from \"../tools/pbProto/bundle.js\";\nimport {IDGenerator, NetBaseMessage, NetBaseReq, NetBaseRespNtf} from \"./Message\";\nimport TKLog from \"../framework/log/TKLog\";\nimport Singleton from \"../framework/utils/Singleton\";\n\nclass JWTBuilder extends Singleton {\n    salt: string = \"123\";//盐值\n    clientId: string = \"f151c83c6d9aff7beaad33f3c6de0388\";//客户端用户标识\n    tokenSecret: string = \"\"\n        // _method: string = \"/auth/verify-token\";//调用方法\n    /**\n     * 初始化函数\n     * @param salt 登录后得到的盐值\n     * @param clientId 客户的唯一标识\n     * @param tokenSecret 客户的token值\n     */\n    public init(salt, clientId, tokenSecret: string) {\n        this.salt = salt;\n        this.clientId = clientId;\n        this.tokenSecret = tokenSecret;\n    }\n    public getJwtToken(method: string): string {\n        let now: number = Math.floor(Date.now()/1000);\n        let payload = {\n            iat: now,\n            exp: now + 30,\n            salt: this.salt,\n            mtd: method,\n            jti: IDGenerator.get().toString()\n        };\n        let options = {\n            header:{id:this.clientId}\n        };\n        // HS256 secrets are typically 128-bit random strings, for example hex-encoded:\n        // var secret = Buffer.from('fe1a1915a379f3be5394b64d14794932', 'hex')\n        return jwt.encode(payload, this.tokenSecret, 'HS256', options)\n    }\n}\n\nabstract class WrapMessageResp {\n    protected _msg : Message | Resp = null\n    constructor(msg : Message | Resp) {\n        this._msg = msg;\n    }\n\n    getResult() : any {\n        if(this._msg instanceof Message){\n            if(this._msg && this._msg.message && this._msg.message.dat) {\n                return this.decodeData(this._msg.message.dat.value);\n            }\n        }else if(this._msg instanceof Resp){\n            if(this._msg && this._msg.response && this._msg.response.dat) {\n                return this.decodeData(this._msg.response.dat.value);\n            }\n        }\n        return null;\n    }\n\n    protected abstract decodeData(crudeDat : any) : any;\n}\n\nabstract class WrapReq<T extends {}> extends NetBaseReq {\n\n    protected _ReqBody : T = null\n    abstract getProtoClassName() : string;\n    public get body() : T {\n        return this._ReqBody\n    }\n    request : tkmessage.Request = null;\n    \n\n    public setJwtToken(token : string) {\n        if(this.request == null){\n            this.request = new tkmessage.Request({})\n        }\n        this.request.jwt_token = token\n    }\n    Serialize(format: CodeFormat): any {\n        if(this.body == null){\n            TKLog.LogWarn(this.getMsgCode() + \"消息没有body\")\n            // return null\n        }\n        if (this.request == null) {\n            this.request = new tkmessage.Request({})\n        }\n        if(this.body != null){\n            this.request.dat = pack(this.body, this.getProtoClassName())\n        }else{\n            this.request.dat = null\n        }\n        super.preSerialize();\n        if (format == CodeFormat.Protobuf) {\n            let bytes = tkmessage.Request.encode(this.request).finish()\n            let buf = Buffer.from(bytes);\n            return buf;\n        }\n        return JSON.stringify(this.request.toJSON());\n    }\n\n}\n\n// 这个Req用于比较灵活的情况，大部分时候客户端协议继承上面的WrapReq实现\n// 这个暂时不推荐使用\nclass Req extends NetBaseReq{\n    request : tkmessage.Request = null;\n    constructor(code : MessageType, anyDat: google.protobuf.Any|null){\n        super(true, code)\n        this.request = new tkmessage.Request({version:\"1.0.0\"});\n        this.request.dat = anyDat;\n        console.log(this.request);\n    }\n    public setJwtToken(token : string) {\n        if (this.request != null) {\n            this.request.jwt_token = token\n        }\n    }\n    Serialize(format: CodeFormat): any {\n        if (this.request == null) {\n            console.log(\"cann't serialize empty request\");\n            return null;\n        }\n        super.preSerialize();\n        console.log(this.request);\n        if (format == CodeFormat.Protobuf) {\n            let bytes = tkmessage.Request.encode(this.request).finish()\n            let buf = Buffer.from(bytes);\n            return buf;\n        }\n        return JSON.stringify(this.request.toJSON());\n    }\n}\n\nclass Resp extends NetBaseRespNtf{\n    public response : tkmessage.Response = null;\n\n    public getError() : string {\n        if (this.response != null)\n            return this.response.message;\n        return \"\";\n    }\n    public getErrorCode() : number {\n        if (this.response != null)\n            return this.response.err;\n        return 0;\n    }\n    public getTraceId() : string {\n        if (this.response != null)\n            return this.response.trace_id;\n        return \"\";\n    }\n    public getResult() : any {\n        if (this.result == null)\n        {\n            if (this.response && this.response.dat)\n            {\n                this.result = unpack(this.response.dat);\n            }\n        }\n        return this.result;\n    }\n    Deserialize(format: CodeFormat, payload: Uint8Array): NetBaseRespNtf {\n      try {\n        // let data = StringToUint8Array(payload);\n        if (format == CodeFormat.Protobuf)\n            this.response = tkmessage.Response.decode(payload);\n        else {\n            let json = JSON.parse(payload.toString());\n            this.response = tkmessage.Response.fromObject(json)\n        }\n        // this.setError(this.response.message);\n        // this.setTraceId(this.response.trace_id);\n      } catch (e) {\n        TKLog.LogWarn(\"parse Message \" + payload + \" 异常\" + e);\n      }\n      return this\n    }\n}\n\nclass Message extends NetBaseMessage {\n    public dat: any = null;\n    public message: tkmessage.Message = null;\n    constructor(options: {[k: string]: any}){\n        super(options);\n        this.message = new tkmessage.Message({});\n        if (options.msgId && options.msgId > 0) {\n            this.message.id = options.msgId;\n        }\n        if (options.type) {\n            this.message.type = options.type;\n        } else {\n            this.message.type = tkmessage.Message.Type.EVENT_BASIC;\n        }\n        if (options.version) {\n            this.message.version = options.version;\n        }\n        if (options.jwt_token) {\n            this.message.jwt_token = options.jwt_token;\n        }\n        if (options.timestamp) {\n            this.message.timestamp = options.timestamp;\n        }\n        if (options.dat) {\n            this.message.dat = options.dat;\n        }\n    }\n    public getMsgId():number {\n        if (this.message && this.message.id) {\n            return this.message.id;\n        }\n        return 0;\n    }\n    public getType():tkmessage.Message.Type {\n        if (this.message && this.message.type) {\n            return this.message.type;\n        }\n        return tkmessage.Message.Type.EVENT_BASIC;\n    }\n    public getVersion():string {\n        if (this.message && this.message.version) {\n            return this.message.version;\n        }\n        return \"unknown\";\n    }\n    public getJwtToken():string{\n        if (this.message && this.message.jwt_token) {\n            return this.message.jwt_token;\n        }\n        return \"\";\n    }\n    public getAnyDat():any {\n        if (this.dat == null)\n        {\n            if (this.message && this.message.dat)\n            {\n                this.dat = unpack(this.message.dat);\n            }\n        }\n        return this.dat;\n    }\n    public getTimestamp():google.protobuf.ITimestamp{\n        if (this.message && this.message.timestamp) {\n            return this.message.timestamp;\n        }\n        return null;\n    }\n\n    Serialize(format: CodeFormat): any {\n        super.preSerialize()\n        console.log(this.message);\n        if (format == CodeFormat.Protobuf)\n        {\n            let bytes = tkmessage.Message.encode(this.message).finish()\n            let buf = Buffer.from(bytes);\n            return buf;\n        }\n        return JSON.stringify(this.message.toJSON());\n    }\n    Deserialize(format: CodeFormat, payload: Uint8Array): NetBaseMessage {\n        try {\n          // let data = StringToUint8Array(payload);\n          if (format == CodeFormat.Protobuf)\n              this.message = tkmessage.Message.decode(payload);\n          else {\n              let json = JSON.parse(payload.toString());\n              this.message = tkmessage.Message.fromObject(json)\n          }\n        } catch (e) {\n          TKLog.LogWarn(\"parse Message \" + payload + \" 异常\" + e);\n        }\n        return this\n    }\n    DeserializeFromObj(msg: object): NetBaseMessage {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n\n\n\nconst pack = (anyDat: any, protoClassName: string) => {\n    return new google.protobuf.Any({\n      type_url: protoClassName || anyDat.constructor.name,\n      value: anyDat.constructor.encode(anyDat).finish(),\n    });\n  };\n\nconst unpack = (any: google.protobuf.IAny) => {\n    if (!any) return \"\";\n    console.log(\"unpack any:\"+ any.type_url);\n    switch (any.type_url) {\n        case 'tkmessage/stringValue':\n            return String.fromCharCode.apply(String, any.value);\n        case 'tkmessage/jubian.model.StringRequest':\n            return String.fromCharCode.apply(String, any.value);\n        case 'tkmessage/message.EventBasic':\n            return tkmessage.EventBasic.decode(any.value);\n        case 'tkmessage/jubian.golottery.model.profile.Profile':\n            return jubian.golottery.model.profile.Profile.decode(any.value);\n        case 'tkmessage/jubian.golottery.srv.oauth2.Token':\n            return jubian.golottery.srv.oauth2.Token.decode(any.value);\n        case 'tkmessage/jubian.golottery.srv.room.TableInfo':\n            return jubian.golottery.srv.room.TableInfo.decode(any.value);\n            // case 'tkmessage/message.SimpleStruct':\n        //     return tkmessage.SimpleStruct.decode(any.value);\n        default:\n            return google.protobuf.Any.decode(any.value);\n    }\n};\n\nexport {Message, WrapReq, WrapMessageResp, Req, Resp, JWTBuilder, pack, unpack}"]}