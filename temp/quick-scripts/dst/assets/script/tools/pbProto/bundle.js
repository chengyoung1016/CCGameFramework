
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/script/tools/pbProto/bundle.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '16b2boQ0VpG34QOIyhMVcK5', 'bundle');
// script/tools/pbProto/bundle.js

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = protobuf; // Common aliases

var $Reader = $protobuf.Reader,
    $Writer = $protobuf.Writer,
    $util = $protobuf.util; // Exported root namespace

var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.jubian = function () {
  /**
   * Namespace jubian.
   * @exports jubian
   * @namespace
   */
  var jubian = {};

  jubian.model = function () {
    /**
     * Namespace model.
     * @memberof jubian
     * @namespace
     */
    var model = {};

    model.StringRequest = function () {
      /**
       * Properties of a StringRequest.
       * @memberof jubian.model
       * @interface IStringRequest
       * @property {string|null} [str_value] StringRequest str_value
       */

      /**
       * Constructs a new StringRequest.
       * @memberof jubian.model
       * @classdesc Represents a StringRequest.
       * @implements IStringRequest
       * @constructor
       * @param {jubian.model.IStringRequest=} [p] Properties to set
       */
      function StringRequest(p) {
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * StringRequest str_value.
       * @member {string} str_value
       * @memberof jubian.model.StringRequest
       * @instance
       */


      StringRequest.prototype.str_value = "";
      /**
       * Encodes the specified StringRequest message. Does not implicitly {@link jubian.model.StringRequest.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.StringRequest
       * @static
       * @param {jubian.model.IStringRequest} m StringRequest message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      StringRequest.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.str_value != null && Object.hasOwnProperty.call(m, "str_value")) w.uint32(10).string(m.str_value);
        return w;
      };
      /**
       * Decodes a StringRequest message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.StringRequest
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.StringRequest} StringRequest
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      StringRequest.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.StringRequest();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              m.str_value = r.string();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a StringRequest message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.StringRequest
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.StringRequest} StringRequest
       */


      StringRequest.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.StringRequest) return d;
        var m = new $root.jubian.model.StringRequest();

        if (d.str_value != null) {
          m.str_value = String(d.str_value);
        }

        return m;
      };
      /**
       * Creates a plain object from a StringRequest message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.StringRequest
       * @static
       * @param {jubian.model.StringRequest} m StringRequest
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      StringRequest.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.defaults) {
          d.str_value = "";
        }

        if (m.str_value != null && m.hasOwnProperty("str_value")) {
          d.str_value = m.str_value;
        }

        return d;
      };
      /**
       * Converts this StringRequest to JSON.
       * @function toJSON
       * @memberof jubian.model.StringRequest
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      StringRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return StringRequest;
    }();

    model.MetaDataRequest = function () {
      /**
       * Properties of a MetaDataRequest.
       * @memberof jubian.model
       * @interface IMetaDataRequest
       * @property {Object.<string,string>|null} [metadata] MetaDataRequest metadata
       */

      /**
       * Constructs a new MetaDataRequest.
       * @memberof jubian.model
       * @classdesc Represents a MetaDataRequest.
       * @implements IMetaDataRequest
       * @constructor
       * @param {jubian.model.IMetaDataRequest=} [p] Properties to set
       */
      function MetaDataRequest(p) {
        this.metadata = {};
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * MetaDataRequest metadata.
       * @member {Object.<string,string>} metadata
       * @memberof jubian.model.MetaDataRequest
       * @instance
       */


      MetaDataRequest.prototype.metadata = $util.emptyObject;
      /**
       * Encodes the specified MetaDataRequest message. Does not implicitly {@link jubian.model.MetaDataRequest.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.MetaDataRequest
       * @static
       * @param {jubian.model.IMetaDataRequest} m MetaDataRequest message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      MetaDataRequest.encode = function encode(m, w) {
        if (!w) w = $Writer.create();

        if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
          for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
            w.uint32(10).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
          }
        }

        return w;
      };
      /**
       * Decodes a MetaDataRequest message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.MetaDataRequest
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.MetaDataRequest} MetaDataRequest
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      MetaDataRequest.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.MetaDataRequest(),
            k;

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              r.skip().pos++;
              if (m.metadata === $util.emptyObject) m.metadata = {};
              k = r.string();
              r.pos++;
              m.metadata[k] = r.string();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a MetaDataRequest message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.MetaDataRequest
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.MetaDataRequest} MetaDataRequest
       */


      MetaDataRequest.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.MetaDataRequest) return d;
        var m = new $root.jubian.model.MetaDataRequest();

        if (d.metadata) {
          if (typeof d.metadata !== "object") throw TypeError(".jubian.model.MetaDataRequest.metadata: object expected");
          m.metadata = {};

          for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
            m.metadata[ks[i]] = String(d.metadata[ks[i]]);
          }
        }

        return m;
      };
      /**
       * Creates a plain object from a MetaDataRequest message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.MetaDataRequest
       * @static
       * @param {jubian.model.MetaDataRequest} m MetaDataRequest
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      MetaDataRequest.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.objects || o.defaults) {
          d.metadata = {};
        }

        var ks2;

        if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
          d.metadata = {};

          for (var j = 0; j < ks2.length; ++j) {
            d.metadata[ks2[j]] = m.metadata[ks2[j]];
          }
        }

        return d;
      };
      /**
       * Converts this MetaDataRequest to JSON.
       * @function toJSON
       * @memberof jubian.model.MetaDataRequest
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      MetaDataRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return MetaDataRequest;
    }();

    model.MetaDataResponse = function () {
      /**
       * Properties of a MetaDataResponse.
       * @memberof jubian.model
       * @interface IMetaDataResponse
       * @property {Object.<string,string>|null} [metadata] MetaDataResponse metadata
       */

      /**
       * Constructs a new MetaDataResponse.
       * @memberof jubian.model
       * @classdesc Represents a MetaDataResponse.
       * @implements IMetaDataResponse
       * @constructor
       * @param {jubian.model.IMetaDataResponse=} [p] Properties to set
       */
      function MetaDataResponse(p) {
        this.metadata = {};
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * MetaDataResponse metadata.
       * @member {Object.<string,string>} metadata
       * @memberof jubian.model.MetaDataResponse
       * @instance
       */


      MetaDataResponse.prototype.metadata = $util.emptyObject;
      /**
       * Encodes the specified MetaDataResponse message. Does not implicitly {@link jubian.model.MetaDataResponse.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.MetaDataResponse
       * @static
       * @param {jubian.model.IMetaDataResponse} m MetaDataResponse message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      MetaDataResponse.encode = function encode(m, w) {
        if (!w) w = $Writer.create();

        if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
          for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
            w.uint32(10).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
          }
        }

        return w;
      };
      /**
       * Decodes a MetaDataResponse message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.MetaDataResponse
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.MetaDataResponse} MetaDataResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      MetaDataResponse.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.MetaDataResponse(),
            k;

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              r.skip().pos++;
              if (m.metadata === $util.emptyObject) m.metadata = {};
              k = r.string();
              r.pos++;
              m.metadata[k] = r.string();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a MetaDataResponse message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.MetaDataResponse
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.MetaDataResponse} MetaDataResponse
       */


      MetaDataResponse.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.MetaDataResponse) return d;
        var m = new $root.jubian.model.MetaDataResponse();

        if (d.metadata) {
          if (typeof d.metadata !== "object") throw TypeError(".jubian.model.MetaDataResponse.metadata: object expected");
          m.metadata = {};

          for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
            m.metadata[ks[i]] = String(d.metadata[ks[i]]);
          }
        }

        return m;
      };
      /**
       * Creates a plain object from a MetaDataResponse message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.MetaDataResponse
       * @static
       * @param {jubian.model.MetaDataResponse} m MetaDataResponse
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      MetaDataResponse.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.objects || o.defaults) {
          d.metadata = {};
        }

        var ks2;

        if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
          d.metadata = {};

          for (var j = 0; j < ks2.length; ++j) {
            d.metadata[ks2[j]] = m.metadata[ks2[j]];
          }
        }

        return d;
      };
      /**
       * Converts this MetaDataResponse to JSON.
       * @function toJSON
       * @memberof jubian.model.MetaDataResponse
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      MetaDataResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return MetaDataResponse;
    }();

    model.PageRequest = function () {
      /**
       * Properties of a PageRequest.
       * @memberof jubian.model
       * @interface IPageRequest
       * @property {Object.<string,string>|null} [params] PageRequest params
       * @property {jubian.model.IQueryOptions|null} [options] PageRequest options
       */

      /**
       * Constructs a new PageRequest.
       * @memberof jubian.model
       * @classdesc Represents a PageRequest.
       * @implements IPageRequest
       * @constructor
       * @param {jubian.model.IPageRequest=} [p] Properties to set
       */
      function PageRequest(p) {
        this.params = {};
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * PageRequest params.
       * @member {Object.<string,string>} params
       * @memberof jubian.model.PageRequest
       * @instance
       */


      PageRequest.prototype.params = $util.emptyObject;
      /**
       * PageRequest options.
       * @member {jubian.model.IQueryOptions|null|undefined} options
       * @memberof jubian.model.PageRequest
       * @instance
       */

      PageRequest.prototype.options = null;
      /**
       * Encodes the specified PageRequest message. Does not implicitly {@link jubian.model.PageRequest.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.PageRequest
       * @static
       * @param {jubian.model.IPageRequest} m PageRequest message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      PageRequest.encode = function encode(m, w) {
        if (!w) w = $Writer.create();

        if (m.params != null && Object.hasOwnProperty.call(m, "params")) {
          for (var ks = Object.keys(m.params), i = 0; i < ks.length; ++i) {
            w.uint32(10).fork().uint32(10).string(ks[i]).uint32(18).string(m.params[ks[i]]).ldelim();
          }
        }

        if (m.options != null && Object.hasOwnProperty.call(m, "options")) $root.jubian.model.QueryOptions.encode(m.options, w.uint32(18).fork()).ldelim();
        return w;
      };
      /**
       * Decodes a PageRequest message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.PageRequest
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.PageRequest} PageRequest
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      PageRequest.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.PageRequest(),
            k;

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              r.skip().pos++;
              if (m.params === $util.emptyObject) m.params = {};
              k = r.string();
              r.pos++;
              m.params[k] = r.string();
              break;

            case 2:
              m.options = $root.jubian.model.QueryOptions.decode(r, r.uint32());
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a PageRequest message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.PageRequest
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.PageRequest} PageRequest
       */


      PageRequest.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.PageRequest) return d;
        var m = new $root.jubian.model.PageRequest();

        if (d.params) {
          if (typeof d.params !== "object") throw TypeError(".jubian.model.PageRequest.params: object expected");
          m.params = {};

          for (var ks = Object.keys(d.params), i = 0; i < ks.length; ++i) {
            m.params[ks[i]] = String(d.params[ks[i]]);
          }
        }

        if (d.options != null) {
          if (typeof d.options !== "object") throw TypeError(".jubian.model.PageRequest.options: object expected");
          m.options = $root.jubian.model.QueryOptions.fromObject(d.options);
        }

        return m;
      };
      /**
       * Creates a plain object from a PageRequest message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.PageRequest
       * @static
       * @param {jubian.model.PageRequest} m PageRequest
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      PageRequest.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.objects || o.defaults) {
          d.params = {};
        }

        if (o.defaults) {
          d.options = null;
        }

        var ks2;

        if (m.params && (ks2 = Object.keys(m.params)).length) {
          d.params = {};

          for (var j = 0; j < ks2.length; ++j) {
            d.params[ks2[j]] = m.params[ks2[j]];
          }
        }

        if (m.options != null && m.hasOwnProperty("options")) {
          d.options = $root.jubian.model.QueryOptions.toObject(m.options, o);
        }

        return d;
      };
      /**
       * Converts this PageRequest to JSON.
       * @function toJSON
       * @memberof jubian.model.PageRequest
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      PageRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return PageRequest;
    }();

    model.ResultResponse = function () {
      /**
       * Properties of a ResultResponse.
       * @memberof jubian.model
       * @interface IResultResponse
       * @property {number|null} [result] ResultResponse result
       */

      /**
       * Constructs a new ResultResponse.
       * @memberof jubian.model
       * @classdesc Represents a ResultResponse.
       * @implements IResultResponse
       * @constructor
       * @param {jubian.model.IResultResponse=} [p] Properties to set
       */
      function ResultResponse(p) {
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * ResultResponse result.
       * @member {number} result
       * @memberof jubian.model.ResultResponse
       * @instance
       */


      ResultResponse.prototype.result = 0;
      /**
       * Encodes the specified ResultResponse message. Does not implicitly {@link jubian.model.ResultResponse.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.ResultResponse
       * @static
       * @param {jubian.model.IResultResponse} m ResultResponse message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      ResultResponse.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.result != null && Object.hasOwnProperty.call(m, "result")) w.uint32(8).int32(m.result);
        return w;
      };
      /**
       * Decodes a ResultResponse message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.ResultResponse
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.ResultResponse} ResultResponse
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      ResultResponse.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.ResultResponse();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              m.result = r.int32();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a ResultResponse message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.ResultResponse
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.ResultResponse} ResultResponse
       */


      ResultResponse.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.ResultResponse) return d;
        var m = new $root.jubian.model.ResultResponse();

        if (d.result != null) {
          m.result = d.result | 0;
        }

        return m;
      };
      /**
       * Creates a plain object from a ResultResponse message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.ResultResponse
       * @static
       * @param {jubian.model.ResultResponse} m ResultResponse
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      ResultResponse.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.defaults) {
          d.result = 0;
        }

        if (m.result != null && m.hasOwnProperty("result")) {
          d.result = m.result;
        }

        return d;
      };
      /**
       * Converts this ResultResponse to JSON.
       * @function toJSON
       * @memberof jubian.model.ResultResponse
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      ResultResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return ResultResponse;
    }();

    model.RequestByToken = function () {
      /**
       * Properties of a RequestByToken.
       * @memberof jubian.model
       * @interface IRequestByToken
       * @property {string|null} [access_token] RequestByToken access_token
       */

      /**
       * Constructs a new RequestByToken.
       * @memberof jubian.model
       * @classdesc Represents a RequestByToken.
       * @implements IRequestByToken
       * @constructor
       * @param {jubian.model.IRequestByToken=} [p] Properties to set
       */
      function RequestByToken(p) {
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * RequestByToken access_token.
       * @member {string} access_token
       * @memberof jubian.model.RequestByToken
       * @instance
       */


      RequestByToken.prototype.access_token = "";
      /**
       * Encodes the specified RequestByToken message. Does not implicitly {@link jubian.model.RequestByToken.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.RequestByToken
       * @static
       * @param {jubian.model.IRequestByToken} m RequestByToken message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      RequestByToken.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.access_token != null && Object.hasOwnProperty.call(m, "access_token")) w.uint32(10).string(m.access_token);
        return w;
      };
      /**
       * Decodes a RequestByToken message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.RequestByToken
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.RequestByToken} RequestByToken
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      RequestByToken.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.RequestByToken();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              m.access_token = r.string();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a RequestByToken message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.RequestByToken
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.RequestByToken} RequestByToken
       */


      RequestByToken.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.RequestByToken) return d;
        var m = new $root.jubian.model.RequestByToken();

        if (d.access_token != null) {
          m.access_token = String(d.access_token);
        }

        return m;
      };
      /**
       * Creates a plain object from a RequestByToken message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.RequestByToken
       * @static
       * @param {jubian.model.RequestByToken} m RequestByToken
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      RequestByToken.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.defaults) {
          d.access_token = "";
        }

        if (m.access_token != null && m.hasOwnProperty("access_token")) {
          d.access_token = m.access_token;
        }

        return d;
      };
      /**
       * Converts this RequestByToken to JSON.
       * @function toJSON
       * @memberof jubian.model.RequestByToken
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      RequestByToken.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return RequestByToken;
    }();

    model.RequestByIds = function () {
      /**
       * Properties of a RequestByIds.
       * @memberof jubian.model
       * @interface IRequestByIds
       * @property {Array.<string>|null} [ids] RequestByIds ids
       */

      /**
       * Constructs a new RequestByIds.
       * @memberof jubian.model
       * @classdesc Represents a RequestByIds.
       * @implements IRequestByIds
       * @constructor
       * @param {jubian.model.IRequestByIds=} [p] Properties to set
       */
      function RequestByIds(p) {
        this.ids = [];
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * RequestByIds ids.
       * @member {Array.<string>} ids
       * @memberof jubian.model.RequestByIds
       * @instance
       */


      RequestByIds.prototype.ids = $util.emptyArray;
      /**
       * Encodes the specified RequestByIds message. Does not implicitly {@link jubian.model.RequestByIds.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.RequestByIds
       * @static
       * @param {jubian.model.IRequestByIds} m RequestByIds message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      RequestByIds.encode = function encode(m, w) {
        if (!w) w = $Writer.create();

        if (m.ids != null && m.ids.length) {
          for (var i = 0; i < m.ids.length; ++i) {
            w.uint32(10).string(m.ids[i]);
          }
        }

        return w;
      };
      /**
       * Decodes a RequestByIds message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.RequestByIds
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.RequestByIds} RequestByIds
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      RequestByIds.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.RequestByIds();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              if (!(m.ids && m.ids.length)) m.ids = [];
              m.ids.push(r.string());
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a RequestByIds message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.RequestByIds
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.RequestByIds} RequestByIds
       */


      RequestByIds.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.RequestByIds) return d;
        var m = new $root.jubian.model.RequestByIds();

        if (d.ids) {
          if (!Array.isArray(d.ids)) throw TypeError(".jubian.model.RequestByIds.ids: array expected");
          m.ids = [];

          for (var i = 0; i < d.ids.length; ++i) {
            m.ids[i] = String(d.ids[i]);
          }
        }

        return m;
      };
      /**
       * Creates a plain object from a RequestByIds message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.RequestByIds
       * @static
       * @param {jubian.model.RequestByIds} m RequestByIds
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      RequestByIds.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.arrays || o.defaults) {
          d.ids = [];
        }

        if (m.ids && m.ids.length) {
          d.ids = [];

          for (var j = 0; j < m.ids.length; ++j) {
            d.ids[j] = m.ids[j];
          }
        }

        return d;
      };
      /**
       * Converts this RequestByIds to JSON.
       * @function toJSON
       * @memberof jubian.model.RequestByIds
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      RequestByIds.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return RequestByIds;
    }();

    model.QueryOptions = function () {
      /**
       * Properties of a QueryOptions.
       * @memberof jubian.model
       * @interface IQueryOptions
       * @property {number|null} [page] QueryOptions page
       * @property {number|null} [count] QueryOptions count
       * @property {number|Long|null} [max_id] QueryOptions max_id
       * @property {number|Long|null} [since_id] QueryOptions since_id
       */

      /**
       * Constructs a new QueryOptions.
       * @memberof jubian.model
       * @classdesc Represents a QueryOptions.
       * @implements IQueryOptions
       * @constructor
       * @param {jubian.model.IQueryOptions=} [p] Properties to set
       */
      function QueryOptions(p) {
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * QueryOptions page.
       * @member {number} page
       * @memberof jubian.model.QueryOptions
       * @instance
       */


      QueryOptions.prototype.page = 0;
      /**
       * QueryOptions count.
       * @member {number} count
       * @memberof jubian.model.QueryOptions
       * @instance
       */

      QueryOptions.prototype.count = 0;
      /**
       * QueryOptions max_id.
       * @member {number|Long} max_id
       * @memberof jubian.model.QueryOptions
       * @instance
       */

      QueryOptions.prototype.max_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      /**
       * QueryOptions since_id.
       * @member {number|Long} since_id
       * @memberof jubian.model.QueryOptions
       * @instance
       */

      QueryOptions.prototype.since_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      /**
       * Encodes the specified QueryOptions message. Does not implicitly {@link jubian.model.QueryOptions.verify|verify} messages.
       * @function encode
       * @memberof jubian.model.QueryOptions
       * @static
       * @param {jubian.model.IQueryOptions} m QueryOptions message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      QueryOptions.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.page != null && Object.hasOwnProperty.call(m, "page")) w.uint32(8).int32(m.page);
        if (m.count != null && Object.hasOwnProperty.call(m, "count")) w.uint32(16).int32(m.count);
        if (m.max_id != null && Object.hasOwnProperty.call(m, "max_id")) w.uint32(24).int64(m.max_id);
        if (m.since_id != null && Object.hasOwnProperty.call(m, "since_id")) w.uint32(32).int64(m.since_id);
        return w;
      };
      /**
       * Decodes a QueryOptions message from the specified reader or buffer.
       * @function decode
       * @memberof jubian.model.QueryOptions
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {jubian.model.QueryOptions} QueryOptions
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      QueryOptions.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.jubian.model.QueryOptions();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              m.page = r.int32();
              break;

            case 2:
              m.count = r.int32();
              break;

            case 3:
              m.max_id = r.int64();
              break;

            case 4:
              m.since_id = r.int64();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a QueryOptions message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof jubian.model.QueryOptions
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {jubian.model.QueryOptions} QueryOptions
       */


      QueryOptions.fromObject = function fromObject(d) {
        if (d instanceof $root.jubian.model.QueryOptions) return d;
        var m = new $root.jubian.model.QueryOptions();

        if (d.page != null) {
          m.page = d.page | 0;
        }

        if (d.count != null) {
          m.count = d.count | 0;
        }

        if (d.max_id != null) {
          if ($util.Long) (m.max_id = $util.Long.fromValue(d.max_id)).unsigned = false;else if (typeof d.max_id === "string") m.max_id = parseInt(d.max_id, 10);else if (typeof d.max_id === "number") m.max_id = d.max_id;else if (typeof d.max_id === "object") m.max_id = new $util.LongBits(d.max_id.low >>> 0, d.max_id.high >>> 0).toNumber();
        }

        if (d.since_id != null) {
          if ($util.Long) (m.since_id = $util.Long.fromValue(d.since_id)).unsigned = false;else if (typeof d.since_id === "string") m.since_id = parseInt(d.since_id, 10);else if (typeof d.since_id === "number") m.since_id = d.since_id;else if (typeof d.since_id === "object") m.since_id = new $util.LongBits(d.since_id.low >>> 0, d.since_id.high >>> 0).toNumber();
        }

        return m;
      };
      /**
       * Creates a plain object from a QueryOptions message. Also converts values to other types if specified.
       * @function toObject
       * @memberof jubian.model.QueryOptions
       * @static
       * @param {jubian.model.QueryOptions} m QueryOptions
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      QueryOptions.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.defaults) {
          d.page = 0;
          d.count = 0;

          if ($util.Long) {
            var n = new $util.Long(0, 0, false);
            d.max_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
          } else d.max_id = o.longs === String ? "0" : 0;

          if ($util.Long) {
            var n = new $util.Long(0, 0, false);
            d.since_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
          } else d.since_id = o.longs === String ? "0" : 0;
        }

        if (m.page != null && m.hasOwnProperty("page")) {
          d.page = m.page;
        }

        if (m.count != null && m.hasOwnProperty("count")) {
          d.count = m.count;
        }

        if (m.max_id != null && m.hasOwnProperty("max_id")) {
          if (typeof m.max_id === "number") d.max_id = o.longs === String ? String(m.max_id) : m.max_id;else d.max_id = o.longs === String ? $util.Long.prototype.toString.call(m.max_id) : o.longs === Number ? new $util.LongBits(m.max_id.low >>> 0, m.max_id.high >>> 0).toNumber() : m.max_id;
        }

        if (m.since_id != null && m.hasOwnProperty("since_id")) {
          if (typeof m.since_id === "number") d.since_id = o.longs === String ? String(m.since_id) : m.since_id;else d.since_id = o.longs === String ? $util.Long.prototype.toString.call(m.since_id) : o.longs === Number ? new $util.LongBits(m.since_id.low >>> 0, m.since_id.high >>> 0).toNumber() : m.since_id;
        }

        return d;
      };
      /**
       * Converts this QueryOptions to JSON.
       * @function toJSON
       * @memberof jubian.model.QueryOptions
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      QueryOptions.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return QueryOptions;
    }();

    return model;
  }();

  jubian.golottery = function () {
    /**
     * Namespace golottery.
     * @memberof jubian
     * @namespace
     */
    var golottery = {};

    golottery.srv = function () {
      /**
       * Namespace srv.
       * @memberof jubian.golottery
       * @namespace
       */
      var srv = {};

      srv.room = function () {
        /**
         * Namespace room.
         * @memberof jubian.golottery.srv
         * @namespace
         */
        var room = {};
        /**
         * RoomType enum.
         * @name jubian.golottery.srv.room.RoomType
         * @enum {number}
         * @property {number} NONE=0 NONE value
         */

        room.RoomType = function () {
          var valuesById = {},
              values = Object.create(valuesById);
          values[valuesById[0] = "NONE"] = 0;
          return values;
        }();

        room.Room = function () {
          /**
           * Properties of a Room.
           * @memberof jubian.golottery.srv.room
           * @interface IRoom
           * @property {number|Long|null} [id] Room id
           * @property {string|null} [server_id] Room server_id
           * @property {Array.<jubian.golottery.srv.room.ITableInfo>|null} [nodes] Room nodes
           */

          /**
           * Constructs a new Room.
           * @memberof jubian.golottery.srv.room
           * @classdesc Represents a Room.
           * @implements IRoom
           * @constructor
           * @param {jubian.golottery.srv.room.IRoom=} [p] Properties to set
           */
          function Room(p) {
            this.nodes = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * Room id.
           * @member {number|Long} id
           * @memberof jubian.golottery.srv.room.Room
           * @instance
           */


          Room.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Room server_id.
           * @member {string} server_id
           * @memberof jubian.golottery.srv.room.Room
           * @instance
           */

          Room.prototype.server_id = "";
          /**
           * Room nodes.
           * @member {Array.<jubian.golottery.srv.room.ITableInfo>} nodes
           * @memberof jubian.golottery.srv.room.Room
           * @instance
           */

          Room.prototype.nodes = $util.emptyArray;
          /**
           * Encodes the specified Room message. Does not implicitly {@link jubian.golottery.srv.room.Room.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.srv.room.Room
           * @static
           * @param {jubian.golottery.srv.room.IRoom} m Room message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          Room.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
            if (m.server_id != null && Object.hasOwnProperty.call(m, "server_id")) w.uint32(18).string(m.server_id);

            if (m.nodes != null && m.nodes.length) {
              for (var i = 0; i < m.nodes.length; ++i) {
                $root.jubian.golottery.srv.room.TableInfo.encode(m.nodes[i], w.uint32(26).fork()).ldelim();
              }
            }

            return w;
          };
          /**
           * Decodes a Room message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.srv.room.Room
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.srv.room.Room} Room
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          Room.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.srv.room.Room();

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  m.id = r.int64();
                  break;

                case 2:
                  m.server_id = r.string();
                  break;

                case 3:
                  if (!(m.nodes && m.nodes.length)) m.nodes = [];
                  m.nodes.push($root.jubian.golottery.srv.room.TableInfo.decode(r, r.uint32()));
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates a Room message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.srv.room.Room
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.srv.room.Room} Room
           */


          Room.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.srv.room.Room) return d;
            var m = new $root.jubian.golottery.srv.room.Room();

            if (d.id != null) {
              if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
            }

            if (d.server_id != null) {
              m.server_id = String(d.server_id);
            }

            if (d.nodes) {
              if (!Array.isArray(d.nodes)) throw TypeError(".jubian.golottery.srv.room.Room.nodes: array expected");
              m.nodes = [];

              for (var i = 0; i < d.nodes.length; ++i) {
                if (typeof d.nodes[i] !== "object") throw TypeError(".jubian.golottery.srv.room.Room.nodes: object expected");
                m.nodes[i] = $root.jubian.golottery.srv.room.TableInfo.fromObject(d.nodes[i]);
              }
            }

            return m;
          };
          /**
           * Creates a plain object from a Room message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.srv.room.Room
           * @static
           * @param {jubian.golottery.srv.room.Room} m Room
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          Room.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.arrays || o.defaults) {
              d.nodes = [];
            }

            if (o.defaults) {
              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.id = o.longs === String ? "0" : 0;

              d.server_id = "";
            }

            if (m.id != null && m.hasOwnProperty("id")) {
              if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
            }

            if (m.server_id != null && m.hasOwnProperty("server_id")) {
              d.server_id = m.server_id;
            }

            if (m.nodes && m.nodes.length) {
              d.nodes = [];

              for (var j = 0; j < m.nodes.length; ++j) {
                d.nodes[j] = $root.jubian.golottery.srv.room.TableInfo.toObject(m.nodes[j], o);
              }
            }

            return d;
          };
          /**
           * Converts this Room to JSON.
           * @function toJSON
           * @memberof jubian.golottery.srv.room.Room
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          Room.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Room;
        }();

        room.TableInfo = function () {
          /**
           * Properties of a TableInfo.
           * @memberof jubian.golottery.srv.room
           * @interface ITableInfo
           * @property {number|Long|null} [id] TableInfo id
           * @property {string|null} [server_id] TableInfo server_id
           * @property {number|Long|null} [transaction_id] TableInfo transaction_id
           */

          /**
           * Constructs a new TableInfo.
           * @memberof jubian.golottery.srv.room
           * @classdesc Represents a TableInfo.
           * @implements ITableInfo
           * @constructor
           * @param {jubian.golottery.srv.room.ITableInfo=} [p] Properties to set
           */
          function TableInfo(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * TableInfo id.
           * @member {number|Long} id
           * @memberof jubian.golottery.srv.room.TableInfo
           * @instance
           */


          TableInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * TableInfo server_id.
           * @member {string} server_id
           * @memberof jubian.golottery.srv.room.TableInfo
           * @instance
           */

          TableInfo.prototype.server_id = "";
          /**
           * TableInfo transaction_id.
           * @member {number|Long} transaction_id
           * @memberof jubian.golottery.srv.room.TableInfo
           * @instance
           */

          TableInfo.prototype.transaction_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Encodes the specified TableInfo message. Does not implicitly {@link jubian.golottery.srv.room.TableInfo.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.srv.room.TableInfo
           * @static
           * @param {jubian.golottery.srv.room.ITableInfo} m TableInfo message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          TableInfo.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
            if (m.server_id != null && Object.hasOwnProperty.call(m, "server_id")) w.uint32(18).string(m.server_id);
            if (m.transaction_id != null && Object.hasOwnProperty.call(m, "transaction_id")) w.uint32(24).int64(m.transaction_id);
            return w;
          };
          /**
           * Decodes a TableInfo message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.srv.room.TableInfo
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.srv.room.TableInfo} TableInfo
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          TableInfo.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.srv.room.TableInfo();

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  m.id = r.int64();
                  break;

                case 2:
                  m.server_id = r.string();
                  break;

                case 3:
                  m.transaction_id = r.int64();
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates a TableInfo message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.srv.room.TableInfo
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.srv.room.TableInfo} TableInfo
           */


          TableInfo.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.srv.room.TableInfo) return d;
            var m = new $root.jubian.golottery.srv.room.TableInfo();

            if (d.id != null) {
              if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
            }

            if (d.server_id != null) {
              m.server_id = String(d.server_id);
            }

            if (d.transaction_id != null) {
              if ($util.Long) (m.transaction_id = $util.Long.fromValue(d.transaction_id)).unsigned = false;else if (typeof d.transaction_id === "string") m.transaction_id = parseInt(d.transaction_id, 10);else if (typeof d.transaction_id === "number") m.transaction_id = d.transaction_id;else if (typeof d.transaction_id === "object") m.transaction_id = new $util.LongBits(d.transaction_id.low >>> 0, d.transaction_id.high >>> 0).toNumber();
            }

            return m;
          };
          /**
           * Creates a plain object from a TableInfo message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.srv.room.TableInfo
           * @static
           * @param {jubian.golottery.srv.room.TableInfo} m TableInfo
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          TableInfo.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.defaults) {
              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.id = o.longs === String ? "0" : 0;

              d.server_id = "";

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.transaction_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.transaction_id = o.longs === String ? "0" : 0;
            }

            if (m.id != null && m.hasOwnProperty("id")) {
              if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
            }

            if (m.server_id != null && m.hasOwnProperty("server_id")) {
              d.server_id = m.server_id;
            }

            if (m.transaction_id != null && m.hasOwnProperty("transaction_id")) {
              if (typeof m.transaction_id === "number") d.transaction_id = o.longs === String ? String(m.transaction_id) : m.transaction_id;else d.transaction_id = o.longs === String ? $util.Long.prototype.toString.call(m.transaction_id) : o.longs === Number ? new $util.LongBits(m.transaction_id.low >>> 0, m.transaction_id.high >>> 0).toNumber() : m.transaction_id;
            }

            return d;
          };
          /**
           * Converts this TableInfo to JSON.
           * @function toJSON
           * @memberof jubian.golottery.srv.room.TableInfo
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          TableInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return TableInfo;
        }();

        room.JoinRoom = function () {
          /**
           * Properties of a JoinRoom.
           * @memberof jubian.golottery.srv.room
           * @interface IJoinRoom
           * @property {string|null} [room_no] JoinRoom room_no
           * @property {jubian.golottery.srv.room.RoomType|null} [room_type] JoinRoom room_type
           */

          /**
           * Constructs a new JoinRoom.
           * @memberof jubian.golottery.srv.room
           * @classdesc Represents a JoinRoom.
           * @implements IJoinRoom
           * @constructor
           * @param {jubian.golottery.srv.room.IJoinRoom=} [p] Properties to set
           */
          function JoinRoom(p) {
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * JoinRoom room_no.
           * @member {string} room_no
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @instance
           */


          JoinRoom.prototype.room_no = "";
          /**
           * JoinRoom room_type.
           * @member {jubian.golottery.srv.room.RoomType} room_type
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @instance
           */

          JoinRoom.prototype.room_type = 0;
          /**
           * Encodes the specified JoinRoom message. Does not implicitly {@link jubian.golottery.srv.room.JoinRoom.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @static
           * @param {jubian.golottery.srv.room.IJoinRoom} m JoinRoom message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          JoinRoom.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.room_no != null && Object.hasOwnProperty.call(m, "room_no")) w.uint32(10).string(m.room_no);
            if (m.room_type != null && Object.hasOwnProperty.call(m, "room_type")) w.uint32(16).int32(m.room_type);
            return w;
          };
          /**
           * Decodes a JoinRoom message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.srv.room.JoinRoom} JoinRoom
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          JoinRoom.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.srv.room.JoinRoom();

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  m.room_no = r.string();
                  break;

                case 2:
                  m.room_type = r.int32();
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates a JoinRoom message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.srv.room.JoinRoom} JoinRoom
           */


          JoinRoom.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.srv.room.JoinRoom) return d;
            var m = new $root.jubian.golottery.srv.room.JoinRoom();

            if (d.room_no != null) {
              m.room_no = String(d.room_no);
            }

            switch (d.room_type) {
              case "NONE":
              case 0:
                m.room_type = 0;
                break;
            }

            return m;
          };
          /**
           * Creates a plain object from a JoinRoom message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @static
           * @param {jubian.golottery.srv.room.JoinRoom} m JoinRoom
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          JoinRoom.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.defaults) {
              d.room_no = "";
              d.room_type = o.enums === String ? "NONE" : 0;
            }

            if (m.room_no != null && m.hasOwnProperty("room_no")) {
              d.room_no = m.room_no;
            }

            if (m.room_type != null && m.hasOwnProperty("room_type")) {
              d.room_type = o.enums === String ? $root.jubian.golottery.srv.room.RoomType[m.room_type] : m.room_type;
            }

            return d;
          };
          /**
           * Converts this JoinRoom to JSON.
           * @function toJSON
           * @memberof jubian.golottery.srv.room.JoinRoom
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          JoinRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return JoinRoom;
        }();

        return room;
      }();

      srv.oauth2 = function () {
        /**
         * Namespace oauth2.
         * @memberof jubian.golottery.srv
         * @namespace
         */
        var oauth2 = {};

        oauth2.Token = function () {
          /**
           * Properties of a Token.
           * @memberof jubian.golottery.srv.oauth2
           * @interface IToken
           * @property {string|null} [access_token] Token access_token
           * @property {string|null} [token_type] Token token_type
           * @property {string|null} [refresh_token] Token refresh_token
           * @property {number|Long|null} [expires_at] Token expires_at
           * @property {Array.<string>|null} [scopes] Token scopes
           * @property {Object.<string,string>|null} [metadata] Token metadata
           */

          /**
           * Constructs a new Token.
           * @memberof jubian.golottery.srv.oauth2
           * @classdesc Represents a Token.
           * @implements IToken
           * @constructor
           * @param {jubian.golottery.srv.oauth2.IToken=} [p] Properties to set
           */
          function Token(p) {
            this.scopes = [];
            this.metadata = {};
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * Token access_token.
           * @member {string} access_token
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           */


          Token.prototype.access_token = "";
          /**
           * Token token_type.
           * @member {string} token_type
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           */

          Token.prototype.token_type = "";
          /**
           * Token refresh_token.
           * @member {string} refresh_token
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           */

          Token.prototype.refresh_token = "";
          /**
           * Token expires_at.
           * @member {number|Long} expires_at
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           */

          Token.prototype.expires_at = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Token scopes.
           * @member {Array.<string>} scopes
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           */

          Token.prototype.scopes = $util.emptyArray;
          /**
           * Token metadata.
           * @member {Object.<string,string>} metadata
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           */

          Token.prototype.metadata = $util.emptyObject;
          /**
           * Encodes the specified Token message. Does not implicitly {@link jubian.golottery.srv.oauth2.Token.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.srv.oauth2.Token
           * @static
           * @param {jubian.golottery.srv.oauth2.IToken} m Token message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          Token.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.access_token != null && Object.hasOwnProperty.call(m, "access_token")) w.uint32(10).string(m.access_token);
            if (m.token_type != null && Object.hasOwnProperty.call(m, "token_type")) w.uint32(18).string(m.token_type);
            if (m.refresh_token != null && Object.hasOwnProperty.call(m, "refresh_token")) w.uint32(26).string(m.refresh_token);
            if (m.expires_at != null && Object.hasOwnProperty.call(m, "expires_at")) w.uint32(32).int64(m.expires_at);

            if (m.scopes != null && m.scopes.length) {
              for (var i = 0; i < m.scopes.length; ++i) {
                w.uint32(42).string(m.scopes[i]);
              }
            }

            if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
              for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
                w.uint32(50).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
              }
            }

            return w;
          };
          /**
           * Decodes a Token message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.srv.oauth2.Token
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.srv.oauth2.Token} Token
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          Token.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.srv.oauth2.Token(),
                k;

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  m.access_token = r.string();
                  break;

                case 2:
                  m.token_type = r.string();
                  break;

                case 3:
                  m.refresh_token = r.string();
                  break;

                case 4:
                  m.expires_at = r.int64();
                  break;

                case 5:
                  if (!(m.scopes && m.scopes.length)) m.scopes = [];
                  m.scopes.push(r.string());
                  break;

                case 6:
                  r.skip().pos++;
                  if (m.metadata === $util.emptyObject) m.metadata = {};
                  k = r.string();
                  r.pos++;
                  m.metadata[k] = r.string();
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates a Token message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.srv.oauth2.Token
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.srv.oauth2.Token} Token
           */


          Token.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.srv.oauth2.Token) return d;
            var m = new $root.jubian.golottery.srv.oauth2.Token();

            if (d.access_token != null) {
              m.access_token = String(d.access_token);
            }

            if (d.token_type != null) {
              m.token_type = String(d.token_type);
            }

            if (d.refresh_token != null) {
              m.refresh_token = String(d.refresh_token);
            }

            if (d.expires_at != null) {
              if ($util.Long) (m.expires_at = $util.Long.fromValue(d.expires_at)).unsigned = false;else if (typeof d.expires_at === "string") m.expires_at = parseInt(d.expires_at, 10);else if (typeof d.expires_at === "number") m.expires_at = d.expires_at;else if (typeof d.expires_at === "object") m.expires_at = new $util.LongBits(d.expires_at.low >>> 0, d.expires_at.high >>> 0).toNumber();
            }

            if (d.scopes) {
              if (!Array.isArray(d.scopes)) throw TypeError(".jubian.golottery.srv.oauth2.Token.scopes: array expected");
              m.scopes = [];

              for (var i = 0; i < d.scopes.length; ++i) {
                m.scopes[i] = String(d.scopes[i]);
              }
            }

            if (d.metadata) {
              if (typeof d.metadata !== "object") throw TypeError(".jubian.golottery.srv.oauth2.Token.metadata: object expected");
              m.metadata = {};

              for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
                m.metadata[ks[i]] = String(d.metadata[ks[i]]);
              }
            }

            return m;
          };
          /**
           * Creates a plain object from a Token message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.srv.oauth2.Token
           * @static
           * @param {jubian.golottery.srv.oauth2.Token} m Token
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          Token.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.arrays || o.defaults) {
              d.scopes = [];
            }

            if (o.objects || o.defaults) {
              d.metadata = {};
            }

            if (o.defaults) {
              d.access_token = "";
              d.token_type = "";
              d.refresh_token = "";

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.expires_at = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.expires_at = o.longs === String ? "0" : 0;
            }

            if (m.access_token != null && m.hasOwnProperty("access_token")) {
              d.access_token = m.access_token;
            }

            if (m.token_type != null && m.hasOwnProperty("token_type")) {
              d.token_type = m.token_type;
            }

            if (m.refresh_token != null && m.hasOwnProperty("refresh_token")) {
              d.refresh_token = m.refresh_token;
            }

            if (m.expires_at != null && m.hasOwnProperty("expires_at")) {
              if (typeof m.expires_at === "number") d.expires_at = o.longs === String ? String(m.expires_at) : m.expires_at;else d.expires_at = o.longs === String ? $util.Long.prototype.toString.call(m.expires_at) : o.longs === Number ? new $util.LongBits(m.expires_at.low >>> 0, m.expires_at.high >>> 0).toNumber() : m.expires_at;
            }

            if (m.scopes && m.scopes.length) {
              d.scopes = [];

              for (var j = 0; j < m.scopes.length; ++j) {
                d.scopes[j] = m.scopes[j];
              }
            }

            var ks2;

            if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
              d.metadata = {};

              for (var j = 0; j < ks2.length; ++j) {
                d.metadata[ks2[j]] = m.metadata[ks2[j]];
              }
            }

            return d;
          };
          /**
           * Converts this Token to JSON.
           * @function toJSON
           * @memberof jubian.golottery.srv.oauth2.Token
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          Token.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Token;
        }();

        return oauth2;
      }();

      return srv;
    }();

    golottery.model = function () {
      /**
       * Namespace model.
       * @memberof jubian.golottery
       * @namespace
       */
      var model = {};

      model.profile = function () {
        /**
         * Namespace profile.
         * @memberof jubian.golottery.model
         * @namespace
         */
        var profile = {};

        profile.Profile = function () {
          /**
           * Properties of a Profile.
           * @memberof jubian.golottery.model.profile
           * @interface IProfile
           * @property {number|Long|null} [id] Profile id
           * @property {string|null} [username] Profile username
           * @property {string|null} [nickname] Profile nickname
           * @property {number|null} [province] Profile province
           * @property {number|null} [city] Profile city
           * @property {string|null} [location] Profile location
           * @property {number|null} [location_id] Profile location_id
           * @property {string|null} [description] Profile description
           * @property {string|null} [profile_image_url] Profile profile_image_url
           * @property {string|null} [gender] Profile gender
           * @property {number|Long|null} [create_time] Profile create_time
           * @property {number|Long|null} [updated] Profile updated
           * @property {boolean|null} [geo_enabled] Profile geo_enabled
           * @property {jubian.golottery.model.profile.RoleType|null} [role] Profile role
           * @property {string|null} [homepage] Profile homepage
           * @property {Object.<string,string>|null} [metadata] Profile metadata
           * @property {jubian.golottery.model.profile.IOrganization|null} [group] Profile group
           */

          /**
           * Constructs a new Profile.
           * @memberof jubian.golottery.model.profile
           * @classdesc Represents a Profile.
           * @implements IProfile
           * @constructor
           * @param {jubian.golottery.model.profile.IProfile=} [p] Properties to set
           */
          function Profile(p) {
            this.metadata = {};
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * Profile id.
           * @member {number|Long} id
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */


          Profile.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Profile username.
           * @member {string} username
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.username = "";
          /**
           * Profile nickname.
           * @member {string} nickname
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.nickname = "";
          /**
           * Profile province.
           * @member {number} province
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.province = 0;
          /**
           * Profile city.
           * @member {number} city
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.city = 0;
          /**
           * Profile location.
           * @member {string} location
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.location = "";
          /**
           * Profile location_id.
           * @member {number} location_id
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.location_id = 0;
          /**
           * Profile description.
           * @member {string} description
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.description = "";
          /**
           * Profile profile_image_url.
           * @member {string} profile_image_url
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.profile_image_url = "";
          /**
           * Profile gender.
           * @member {string} gender
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.gender = "";
          /**
           * Profile create_time.
           * @member {number|Long} create_time
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.create_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Profile updated.
           * @member {number|Long} updated
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.updated = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Profile geo_enabled.
           * @member {boolean} geo_enabled
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.geo_enabled = false;
          /**
           * Profile role.
           * @member {jubian.golottery.model.profile.RoleType} role
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.role = 0;
          /**
           * Profile homepage.
           * @member {string} homepage
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.homepage = "";
          /**
           * Profile metadata.
           * @member {Object.<string,string>} metadata
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.metadata = $util.emptyObject;
          /**
           * Profile group.
           * @member {jubian.golottery.model.profile.IOrganization|null|undefined} group
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           */

          Profile.prototype.group = null;
          /**
           * Encodes the specified Profile message. Does not implicitly {@link jubian.golottery.model.profile.Profile.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.model.profile.Profile
           * @static
           * @param {jubian.golottery.model.profile.IProfile} m Profile message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          Profile.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
            if (m.username != null && Object.hasOwnProperty.call(m, "username")) w.uint32(18).string(m.username);
            if (m.nickname != null && Object.hasOwnProperty.call(m, "nickname")) w.uint32(26).string(m.nickname);
            if (m.province != null && Object.hasOwnProperty.call(m, "province")) w.uint32(32).int32(m.province);
            if (m.city != null && Object.hasOwnProperty.call(m, "city")) w.uint32(40).int32(m.city);
            if (m.location != null && Object.hasOwnProperty.call(m, "location")) w.uint32(50).string(m.location);
            if (m.location_id != null && Object.hasOwnProperty.call(m, "location_id")) w.uint32(56).int32(m.location_id);
            if (m.description != null && Object.hasOwnProperty.call(m, "description")) w.uint32(66).string(m.description);
            if (m.profile_image_url != null && Object.hasOwnProperty.call(m, "profile_image_url")) w.uint32(74).string(m.profile_image_url);
            if (m.gender != null && Object.hasOwnProperty.call(m, "gender")) w.uint32(82).string(m.gender);
            if (m.create_time != null && Object.hasOwnProperty.call(m, "create_time")) w.uint32(88).int64(m.create_time);
            if (m.updated != null && Object.hasOwnProperty.call(m, "updated")) w.uint32(96).int64(m.updated);
            if (m.geo_enabled != null && Object.hasOwnProperty.call(m, "geo_enabled")) w.uint32(104).bool(m.geo_enabled);
            if (m.role != null && Object.hasOwnProperty.call(m, "role")) w.uint32(112).int32(m.role);
            if (m.homepage != null && Object.hasOwnProperty.call(m, "homepage")) w.uint32(122).string(m.homepage);

            if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
              for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
                w.uint32(130).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
              }
            }

            if (m.group != null && Object.hasOwnProperty.call(m, "group")) $root.jubian.golottery.model.profile.Organization.encode(m.group, w.uint32(138).fork()).ldelim();
            return w;
          };
          /**
           * Decodes a Profile message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.model.profile.Profile
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.model.profile.Profile} Profile
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          Profile.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.model.profile.Profile(),
                k;

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  m.id = r.int64();
                  break;

                case 2:
                  m.username = r.string();
                  break;

                case 3:
                  m.nickname = r.string();
                  break;

                case 4:
                  m.province = r.int32();
                  break;

                case 5:
                  m.city = r.int32();
                  break;

                case 6:
                  m.location = r.string();
                  break;

                case 7:
                  m.location_id = r.int32();
                  break;

                case 8:
                  m.description = r.string();
                  break;

                case 9:
                  m.profile_image_url = r.string();
                  break;

                case 10:
                  m.gender = r.string();
                  break;

                case 11:
                  m.create_time = r.int64();
                  break;

                case 12:
                  m.updated = r.int64();
                  break;

                case 13:
                  m.geo_enabled = r.bool();
                  break;

                case 14:
                  m.role = r.int32();
                  break;

                case 15:
                  m.homepage = r.string();
                  break;

                case 16:
                  r.skip().pos++;
                  if (m.metadata === $util.emptyObject) m.metadata = {};
                  k = r.string();
                  r.pos++;
                  m.metadata[k] = r.string();
                  break;

                case 17:
                  m.group = $root.jubian.golottery.model.profile.Organization.decode(r, r.uint32());
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates a Profile message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.model.profile.Profile
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.model.profile.Profile} Profile
           */


          Profile.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.model.profile.Profile) return d;
            var m = new $root.jubian.golottery.model.profile.Profile();

            if (d.id != null) {
              if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
            }

            if (d.username != null) {
              m.username = String(d.username);
            }

            if (d.nickname != null) {
              m.nickname = String(d.nickname);
            }

            if (d.province != null) {
              m.province = d.province | 0;
            }

            if (d.city != null) {
              m.city = d.city | 0;
            }

            if (d.location != null) {
              m.location = String(d.location);
            }

            if (d.location_id != null) {
              m.location_id = d.location_id | 0;
            }

            if (d.description != null) {
              m.description = String(d.description);
            }

            if (d.profile_image_url != null) {
              m.profile_image_url = String(d.profile_image_url);
            }

            if (d.gender != null) {
              m.gender = String(d.gender);
            }

            if (d.create_time != null) {
              if ($util.Long) (m.create_time = $util.Long.fromValue(d.create_time)).unsigned = false;else if (typeof d.create_time === "string") m.create_time = parseInt(d.create_time, 10);else if (typeof d.create_time === "number") m.create_time = d.create_time;else if (typeof d.create_time === "object") m.create_time = new $util.LongBits(d.create_time.low >>> 0, d.create_time.high >>> 0).toNumber();
            }

            if (d.updated != null) {
              if ($util.Long) (m.updated = $util.Long.fromValue(d.updated)).unsigned = false;else if (typeof d.updated === "string") m.updated = parseInt(d.updated, 10);else if (typeof d.updated === "number") m.updated = d.updated;else if (typeof d.updated === "object") m.updated = new $util.LongBits(d.updated.low >>> 0, d.updated.high >>> 0).toNumber();
            }

            if (d.geo_enabled != null) {
              m.geo_enabled = Boolean(d.geo_enabled);
            }

            switch (d.role) {
              case "USER":
              case 0:
                m.role = 0;
                break;

              case "BOSS":
              case 1:
                m.role = 1;
                break;

              case "EMPLOYEE":
              case 2:
                m.role = 2;
                break;

              case "KOL":
              case 3:
                m.role = 3;
                break;

              case "CAPTAIN":
              case 4:
                m.role = 4;
                break;
            }

            if (d.homepage != null) {
              m.homepage = String(d.homepage);
            }

            if (d.metadata) {
              if (typeof d.metadata !== "object") throw TypeError(".jubian.golottery.model.profile.Profile.metadata: object expected");
              m.metadata = {};

              for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
                m.metadata[ks[i]] = String(d.metadata[ks[i]]);
              }
            }

            if (d.group != null) {
              if (typeof d.group !== "object") throw TypeError(".jubian.golottery.model.profile.Profile.group: object expected");
              m.group = $root.jubian.golottery.model.profile.Organization.fromObject(d.group);
            }

            return m;
          };
          /**
           * Creates a plain object from a Profile message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.model.profile.Profile
           * @static
           * @param {jubian.golottery.model.profile.Profile} m Profile
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          Profile.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.objects || o.defaults) {
              d.metadata = {};
            }

            if (o.defaults) {
              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.id = o.longs === String ? "0" : 0;

              d.username = "";
              d.nickname = "";
              d.province = 0;
              d.city = 0;
              d.location = "";
              d.location_id = 0;
              d.description = "";
              d.profile_image_url = "";
              d.gender = "";

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.create_time = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.create_time = o.longs === String ? "0" : 0;

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.updated = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.updated = o.longs === String ? "0" : 0;

              d.geo_enabled = false;
              d.role = o.enums === String ? "USER" : 0;
              d.homepage = "";
              d.group = null;
            }

            if (m.id != null && m.hasOwnProperty("id")) {
              if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
            }

            if (m.username != null && m.hasOwnProperty("username")) {
              d.username = m.username;
            }

            if (m.nickname != null && m.hasOwnProperty("nickname")) {
              d.nickname = m.nickname;
            }

            if (m.province != null && m.hasOwnProperty("province")) {
              d.province = m.province;
            }

            if (m.city != null && m.hasOwnProperty("city")) {
              d.city = m.city;
            }

            if (m.location != null && m.hasOwnProperty("location")) {
              d.location = m.location;
            }

            if (m.location_id != null && m.hasOwnProperty("location_id")) {
              d.location_id = m.location_id;
            }

            if (m.description != null && m.hasOwnProperty("description")) {
              d.description = m.description;
            }

            if (m.profile_image_url != null && m.hasOwnProperty("profile_image_url")) {
              d.profile_image_url = m.profile_image_url;
            }

            if (m.gender != null && m.hasOwnProperty("gender")) {
              d.gender = m.gender;
            }

            if (m.create_time != null && m.hasOwnProperty("create_time")) {
              if (typeof m.create_time === "number") d.create_time = o.longs === String ? String(m.create_time) : m.create_time;else d.create_time = o.longs === String ? $util.Long.prototype.toString.call(m.create_time) : o.longs === Number ? new $util.LongBits(m.create_time.low >>> 0, m.create_time.high >>> 0).toNumber() : m.create_time;
            }

            if (m.updated != null && m.hasOwnProperty("updated")) {
              if (typeof m.updated === "number") d.updated = o.longs === String ? String(m.updated) : m.updated;else d.updated = o.longs === String ? $util.Long.prototype.toString.call(m.updated) : o.longs === Number ? new $util.LongBits(m.updated.low >>> 0, m.updated.high >>> 0).toNumber() : m.updated;
            }

            if (m.geo_enabled != null && m.hasOwnProperty("geo_enabled")) {
              d.geo_enabled = m.geo_enabled;
            }

            if (m.role != null && m.hasOwnProperty("role")) {
              d.role = o.enums === String ? $root.jubian.golottery.model.profile.RoleType[m.role] : m.role;
            }

            if (m.homepage != null && m.hasOwnProperty("homepage")) {
              d.homepage = m.homepage;
            }

            var ks2;

            if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
              d.metadata = {};

              for (var j = 0; j < ks2.length; ++j) {
                d.metadata[ks2[j]] = m.metadata[ks2[j]];
              }
            }

            if (m.group != null && m.hasOwnProperty("group")) {
              d.group = $root.jubian.golottery.model.profile.Organization.toObject(m.group, o);
            }

            return d;
          };
          /**
           * Converts this Profile to JSON.
           * @function toJSON
           * @memberof jubian.golottery.model.profile.Profile
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          Profile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Profile;
        }();

        profile.Organization = function () {
          /**
           * Properties of an Organization.
           * @memberof jubian.golottery.model.profile
           * @interface IOrganization
           * @property {number|Long|null} [id] Organization id
           * @property {number|null} [type] Organization type
           * @property {number|Long|null} [sales_shop_id] Organization sales_shop_id
           * @property {number|Long|null} [owner_id] Organization owner_id
           * @property {string|null} [owner_name] Organization owner_name
           * @property {string|null} [lisense_id] Organization lisense_id
           * @property {string|null} [phone] Organization phone
           * @property {string|null} [username] Organization username
           * @property {string|null} [brief_name] Organization brief_name
           * @property {string|null} [qrcode_url] Organization qrcode_url
           * @property {string|null} [share_url] Organization share_url
           * @property {string|null} [profile_image_url] Organization profile_image_url
           * @property {string|null} [homepage] Organization homepage
           * @property {string|null} [address] Organization address
           * @property {Object.<string,string>|null} [metadata] Organization metadata
           * @property {string|null} [description] Organization description
           * @property {number|null} [lat] Organization lat
           * @property {number|null} [lon] Organization lon
           * @property {string|null} [location] Organization location
           * @property {number|null} [location_id] Organization location_id
           * @property {number|Long|null} [create_time] Organization create_time
           * @property {number|Long|null} [updated] Organization updated
           * @property {jubian.golottery.model.profile.RoleType|null} [role] Organization role
           * @property {Array.<jubian.golottery.model.profile.RightType>|null} [rights] Organization rights
           */

          /**
           * Constructs a new Organization.
           * @memberof jubian.golottery.model.profile
           * @classdesc Represents an Organization.
           * @implements IOrganization
           * @constructor
           * @param {jubian.golottery.model.profile.IOrganization=} [p] Properties to set
           */
          function Organization(p) {
            this.metadata = {};
            this.rights = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * Organization id.
           * @member {number|Long} id
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */


          Organization.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Organization type.
           * @member {number} type
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.type = 0;
          /**
           * Organization sales_shop_id.
           * @member {number|Long} sales_shop_id
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.sales_shop_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Organization owner_id.
           * @member {number|Long} owner_id
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.owner_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Organization owner_name.
           * @member {string} owner_name
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.owner_name = "";
          /**
           * Organization lisense_id.
           * @member {string} lisense_id
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.lisense_id = "";
          /**
           * Organization phone.
           * @member {string} phone
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.phone = "";
          /**
           * Organization username.
           * @member {string} username
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.username = "";
          /**
           * Organization brief_name.
           * @member {string} brief_name
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.brief_name = "";
          /**
           * Organization qrcode_url.
           * @member {string} qrcode_url
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.qrcode_url = "";
          /**
           * Organization share_url.
           * @member {string} share_url
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.share_url = "";
          /**
           * Organization profile_image_url.
           * @member {string} profile_image_url
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.profile_image_url = "";
          /**
           * Organization homepage.
           * @member {string} homepage
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.homepage = "";
          /**
           * Organization address.
           * @member {string} address
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.address = "";
          /**
           * Organization metadata.
           * @member {Object.<string,string>} metadata
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.metadata = $util.emptyObject;
          /**
           * Organization description.
           * @member {string} description
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.description = "";
          /**
           * Organization lat.
           * @member {number} lat
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.lat = 0;
          /**
           * Organization lon.
           * @member {number} lon
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.lon = 0;
          /**
           * Organization location.
           * @member {string} location
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.location = "";
          /**
           * Organization location_id.
           * @member {number} location_id
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.location_id = 0;
          /**
           * Organization create_time.
           * @member {number|Long} create_time
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.create_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Organization updated.
           * @member {number|Long} updated
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.updated = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
          /**
           * Organization role.
           * @member {jubian.golottery.model.profile.RoleType} role
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.role = 0;
          /**
           * Organization rights.
           * @member {Array.<jubian.golottery.model.profile.RightType>} rights
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           */

          Organization.prototype.rights = $util.emptyArray;
          /**
           * Encodes the specified Organization message. Does not implicitly {@link jubian.golottery.model.profile.Organization.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.model.profile.Organization
           * @static
           * @param {jubian.golottery.model.profile.IOrganization} m Organization message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          Organization.encode = function encode(m, w) {
            if (!w) w = $Writer.create();
            if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
            if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(16).int32(m.type);
            if (m.sales_shop_id != null && Object.hasOwnProperty.call(m, "sales_shop_id")) w.uint32(24).int64(m.sales_shop_id);
            if (m.owner_id != null && Object.hasOwnProperty.call(m, "owner_id")) w.uint32(32).int64(m.owner_id);
            if (m.owner_name != null && Object.hasOwnProperty.call(m, "owner_name")) w.uint32(42).string(m.owner_name);
            if (m.lisense_id != null && Object.hasOwnProperty.call(m, "lisense_id")) w.uint32(50).string(m.lisense_id);
            if (m.phone != null && Object.hasOwnProperty.call(m, "phone")) w.uint32(58).string(m.phone);
            if (m.username != null && Object.hasOwnProperty.call(m, "username")) w.uint32(66).string(m.username);
            if (m.brief_name != null && Object.hasOwnProperty.call(m, "brief_name")) w.uint32(74).string(m.brief_name);
            if (m.qrcode_url != null && Object.hasOwnProperty.call(m, "qrcode_url")) w.uint32(82).string(m.qrcode_url);
            if (m.share_url != null && Object.hasOwnProperty.call(m, "share_url")) w.uint32(90).string(m.share_url);
            if (m.profile_image_url != null && Object.hasOwnProperty.call(m, "profile_image_url")) w.uint32(98).string(m.profile_image_url);
            if (m.homepage != null && Object.hasOwnProperty.call(m, "homepage")) w.uint32(106).string(m.homepage);
            if (m.address != null && Object.hasOwnProperty.call(m, "address")) w.uint32(114).string(m.address);

            if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
              for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
                w.uint32(122).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
              }
            }

            if (m.description != null && Object.hasOwnProperty.call(m, "description")) w.uint32(130).string(m.description);
            if (m.lat != null && Object.hasOwnProperty.call(m, "lat")) w.uint32(137)["double"](m.lat);
            if (m.lon != null && Object.hasOwnProperty.call(m, "lon")) w.uint32(145)["double"](m.lon);
            if (m.location != null && Object.hasOwnProperty.call(m, "location")) w.uint32(154).string(m.location);
            if (m.location_id != null && Object.hasOwnProperty.call(m, "location_id")) w.uint32(160).int32(m.location_id);
            if (m.create_time != null && Object.hasOwnProperty.call(m, "create_time")) w.uint32(168).int64(m.create_time);
            if (m.updated != null && Object.hasOwnProperty.call(m, "updated")) w.uint32(176).int64(m.updated);
            if (m.role != null && Object.hasOwnProperty.call(m, "role")) w.uint32(184).int32(m.role);

            if (m.rights != null && m.rights.length) {
              w.uint32(194).fork();

              for (var i = 0; i < m.rights.length; ++i) {
                w.int32(m.rights[i]);
              }

              w.ldelim();
            }

            return w;
          };
          /**
           * Decodes an Organization message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.model.profile.Organization
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.model.profile.Organization} Organization
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          Organization.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.model.profile.Organization(),
                k;

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  m.id = r.int64();
                  break;

                case 2:
                  m.type = r.int32();
                  break;

                case 3:
                  m.sales_shop_id = r.int64();
                  break;

                case 4:
                  m.owner_id = r.int64();
                  break;

                case 5:
                  m.owner_name = r.string();
                  break;

                case 6:
                  m.lisense_id = r.string();
                  break;

                case 7:
                  m.phone = r.string();
                  break;

                case 8:
                  m.username = r.string();
                  break;

                case 9:
                  m.brief_name = r.string();
                  break;

                case 10:
                  m.qrcode_url = r.string();
                  break;

                case 11:
                  m.share_url = r.string();
                  break;

                case 12:
                  m.profile_image_url = r.string();
                  break;

                case 13:
                  m.homepage = r.string();
                  break;

                case 14:
                  m.address = r.string();
                  break;

                case 15:
                  r.skip().pos++;
                  if (m.metadata === $util.emptyObject) m.metadata = {};
                  k = r.string();
                  r.pos++;
                  m.metadata[k] = r.string();
                  break;

                case 16:
                  m.description = r.string();
                  break;

                case 17:
                  m.lat = r["double"]();
                  break;

                case 18:
                  m.lon = r["double"]();
                  break;

                case 19:
                  m.location = r.string();
                  break;

                case 20:
                  m.location_id = r.int32();
                  break;

                case 21:
                  m.create_time = r.int64();
                  break;

                case 22:
                  m.updated = r.int64();
                  break;

                case 23:
                  m.role = r.int32();
                  break;

                case 24:
                  if (!(m.rights && m.rights.length)) m.rights = [];

                  if ((t & 7) === 2) {
                    var c2 = r.uint32() + r.pos;

                    while (r.pos < c2) {
                      m.rights.push(r.int32());
                    }
                  } else m.rights.push(r.int32());

                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates an Organization message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.model.profile.Organization
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.model.profile.Organization} Organization
           */


          Organization.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.model.profile.Organization) return d;
            var m = new $root.jubian.golottery.model.profile.Organization();

            if (d.id != null) {
              if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
            }

            if (d.type != null) {
              m.type = d.type | 0;
            }

            if (d.sales_shop_id != null) {
              if ($util.Long) (m.sales_shop_id = $util.Long.fromValue(d.sales_shop_id)).unsigned = false;else if (typeof d.sales_shop_id === "string") m.sales_shop_id = parseInt(d.sales_shop_id, 10);else if (typeof d.sales_shop_id === "number") m.sales_shop_id = d.sales_shop_id;else if (typeof d.sales_shop_id === "object") m.sales_shop_id = new $util.LongBits(d.sales_shop_id.low >>> 0, d.sales_shop_id.high >>> 0).toNumber();
            }

            if (d.owner_id != null) {
              if ($util.Long) (m.owner_id = $util.Long.fromValue(d.owner_id)).unsigned = false;else if (typeof d.owner_id === "string") m.owner_id = parseInt(d.owner_id, 10);else if (typeof d.owner_id === "number") m.owner_id = d.owner_id;else if (typeof d.owner_id === "object") m.owner_id = new $util.LongBits(d.owner_id.low >>> 0, d.owner_id.high >>> 0).toNumber();
            }

            if (d.owner_name != null) {
              m.owner_name = String(d.owner_name);
            }

            if (d.lisense_id != null) {
              m.lisense_id = String(d.lisense_id);
            }

            if (d.phone != null) {
              m.phone = String(d.phone);
            }

            if (d.username != null) {
              m.username = String(d.username);
            }

            if (d.brief_name != null) {
              m.brief_name = String(d.brief_name);
            }

            if (d.qrcode_url != null) {
              m.qrcode_url = String(d.qrcode_url);
            }

            if (d.share_url != null) {
              m.share_url = String(d.share_url);
            }

            if (d.profile_image_url != null) {
              m.profile_image_url = String(d.profile_image_url);
            }

            if (d.homepage != null) {
              m.homepage = String(d.homepage);
            }

            if (d.address != null) {
              m.address = String(d.address);
            }

            if (d.metadata) {
              if (typeof d.metadata !== "object") throw TypeError(".jubian.golottery.model.profile.Organization.metadata: object expected");
              m.metadata = {};

              for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
                m.metadata[ks[i]] = String(d.metadata[ks[i]]);
              }
            }

            if (d.description != null) {
              m.description = String(d.description);
            }

            if (d.lat != null) {
              m.lat = Number(d.lat);
            }

            if (d.lon != null) {
              m.lon = Number(d.lon);
            }

            if (d.location != null) {
              m.location = String(d.location);
            }

            if (d.location_id != null) {
              m.location_id = d.location_id | 0;
            }

            if (d.create_time != null) {
              if ($util.Long) (m.create_time = $util.Long.fromValue(d.create_time)).unsigned = false;else if (typeof d.create_time === "string") m.create_time = parseInt(d.create_time, 10);else if (typeof d.create_time === "number") m.create_time = d.create_time;else if (typeof d.create_time === "object") m.create_time = new $util.LongBits(d.create_time.low >>> 0, d.create_time.high >>> 0).toNumber();
            }

            if (d.updated != null) {
              if ($util.Long) (m.updated = $util.Long.fromValue(d.updated)).unsigned = false;else if (typeof d.updated === "string") m.updated = parseInt(d.updated, 10);else if (typeof d.updated === "number") m.updated = d.updated;else if (typeof d.updated === "object") m.updated = new $util.LongBits(d.updated.low >>> 0, d.updated.high >>> 0).toNumber();
            }

            switch (d.role) {
              case "USER":
              case 0:
                m.role = 0;
                break;

              case "BOSS":
              case 1:
                m.role = 1;
                break;

              case "EMPLOYEE":
              case 2:
                m.role = 2;
                break;

              case "KOL":
              case 3:
                m.role = 3;
                break;

              case "CAPTAIN":
              case 4:
                m.role = 4;
                break;
            }

            if (d.rights) {
              if (!Array.isArray(d.rights)) throw TypeError(".jubian.golottery.model.profile.Organization.rights: array expected");
              m.rights = [];

              for (var i = 0; i < d.rights.length; ++i) {
                switch (d.rights[i]) {
                  default:
                  case "AVAILABLE":
                  case 0:
                    m.rights[i] = 0;
                    break;

                  case "DISABLE":
                  case 1:
                    m.rights[i] = 1;
                    break;

                  case "FORBIDDEN_CHAT":
                  case 2:
                    m.rights[i] = 2;
                    break;

                  case "FORBIDDEN_PUBLISH":
                  case 3:
                    m.rights[i] = 3;
                    break;

                  case "BLACKLIST":
                  case 4:
                    m.rights[i] = 4;
                    break;

                  case "FORBIDDEN_OPER":
                  case 5:
                    m.rights[i] = 5;
                    break;
                }
              }
            }

            return m;
          };
          /**
           * Creates a plain object from an Organization message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.model.profile.Organization
           * @static
           * @param {jubian.golottery.model.profile.Organization} m Organization
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          Organization.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.arrays || o.defaults) {
              d.rights = [];
            }

            if (o.objects || o.defaults) {
              d.metadata = {};
            }

            if (o.defaults) {
              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.id = o.longs === String ? "0" : 0;

              d.type = 0;

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.sales_shop_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.sales_shop_id = o.longs === String ? "0" : 0;

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.owner_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.owner_id = o.longs === String ? "0" : 0;

              d.owner_name = "";
              d.lisense_id = "";
              d.phone = "";
              d.username = "";
              d.brief_name = "";
              d.qrcode_url = "";
              d.share_url = "";
              d.profile_image_url = "";
              d.homepage = "";
              d.address = "";
              d.description = "";
              d.lat = 0;
              d.lon = 0;
              d.location = "";
              d.location_id = 0;

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.create_time = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.create_time = o.longs === String ? "0" : 0;

              if ($util.Long) {
                var n = new $util.Long(0, 0, false);
                d.updated = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
              } else d.updated = o.longs === String ? "0" : 0;

              d.role = o.enums === String ? "USER" : 0;
            }

            if (m.id != null && m.hasOwnProperty("id")) {
              if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
            }

            if (m.type != null && m.hasOwnProperty("type")) {
              d.type = m.type;
            }

            if (m.sales_shop_id != null && m.hasOwnProperty("sales_shop_id")) {
              if (typeof m.sales_shop_id === "number") d.sales_shop_id = o.longs === String ? String(m.sales_shop_id) : m.sales_shop_id;else d.sales_shop_id = o.longs === String ? $util.Long.prototype.toString.call(m.sales_shop_id) : o.longs === Number ? new $util.LongBits(m.sales_shop_id.low >>> 0, m.sales_shop_id.high >>> 0).toNumber() : m.sales_shop_id;
            }

            if (m.owner_id != null && m.hasOwnProperty("owner_id")) {
              if (typeof m.owner_id === "number") d.owner_id = o.longs === String ? String(m.owner_id) : m.owner_id;else d.owner_id = o.longs === String ? $util.Long.prototype.toString.call(m.owner_id) : o.longs === Number ? new $util.LongBits(m.owner_id.low >>> 0, m.owner_id.high >>> 0).toNumber() : m.owner_id;
            }

            if (m.owner_name != null && m.hasOwnProperty("owner_name")) {
              d.owner_name = m.owner_name;
            }

            if (m.lisense_id != null && m.hasOwnProperty("lisense_id")) {
              d.lisense_id = m.lisense_id;
            }

            if (m.phone != null && m.hasOwnProperty("phone")) {
              d.phone = m.phone;
            }

            if (m.username != null && m.hasOwnProperty("username")) {
              d.username = m.username;
            }

            if (m.brief_name != null && m.hasOwnProperty("brief_name")) {
              d.brief_name = m.brief_name;
            }

            if (m.qrcode_url != null && m.hasOwnProperty("qrcode_url")) {
              d.qrcode_url = m.qrcode_url;
            }

            if (m.share_url != null && m.hasOwnProperty("share_url")) {
              d.share_url = m.share_url;
            }

            if (m.profile_image_url != null && m.hasOwnProperty("profile_image_url")) {
              d.profile_image_url = m.profile_image_url;
            }

            if (m.homepage != null && m.hasOwnProperty("homepage")) {
              d.homepage = m.homepage;
            }

            if (m.address != null && m.hasOwnProperty("address")) {
              d.address = m.address;
            }

            var ks2;

            if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
              d.metadata = {};

              for (var j = 0; j < ks2.length; ++j) {
                d.metadata[ks2[j]] = m.metadata[ks2[j]];
              }
            }

            if (m.description != null && m.hasOwnProperty("description")) {
              d.description = m.description;
            }

            if (m.lat != null && m.hasOwnProperty("lat")) {
              d.lat = o.json && !isFinite(m.lat) ? String(m.lat) : m.lat;
            }

            if (m.lon != null && m.hasOwnProperty("lon")) {
              d.lon = o.json && !isFinite(m.lon) ? String(m.lon) : m.lon;
            }

            if (m.location != null && m.hasOwnProperty("location")) {
              d.location = m.location;
            }

            if (m.location_id != null && m.hasOwnProperty("location_id")) {
              d.location_id = m.location_id;
            }

            if (m.create_time != null && m.hasOwnProperty("create_time")) {
              if (typeof m.create_time === "number") d.create_time = o.longs === String ? String(m.create_time) : m.create_time;else d.create_time = o.longs === String ? $util.Long.prototype.toString.call(m.create_time) : o.longs === Number ? new $util.LongBits(m.create_time.low >>> 0, m.create_time.high >>> 0).toNumber() : m.create_time;
            }

            if (m.updated != null && m.hasOwnProperty("updated")) {
              if (typeof m.updated === "number") d.updated = o.longs === String ? String(m.updated) : m.updated;else d.updated = o.longs === String ? $util.Long.prototype.toString.call(m.updated) : o.longs === Number ? new $util.LongBits(m.updated.low >>> 0, m.updated.high >>> 0).toNumber() : m.updated;
            }

            if (m.role != null && m.hasOwnProperty("role")) {
              d.role = o.enums === String ? $root.jubian.golottery.model.profile.RoleType[m.role] : m.role;
            }

            if (m.rights && m.rights.length) {
              d.rights = [];

              for (var j = 0; j < m.rights.length; ++j) {
                d.rights[j] = o.enums === String ? $root.jubian.golottery.model.profile.RightType[m.rights[j]] : m.rights[j];
              }
            }

            return d;
          };
          /**
           * Converts this Organization to JSON.
           * @function toJSON
           * @memberof jubian.golottery.model.profile.Organization
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          Organization.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return Organization;
        }();
        /**
         * RoleType enum.
         * @name jubian.golottery.model.profile.RoleType
         * @enum {number}
         * @property {number} USER=0 USER value
         * @property {number} BOSS=1 BOSS value
         * @property {number} EMPLOYEE=2 EMPLOYEE value
         * @property {number} KOL=3 KOL value
         * @property {number} CAPTAIN=4 CAPTAIN value
         */


        profile.RoleType = function () {
          var valuesById = {},
              values = Object.create(valuesById);
          values[valuesById[0] = "USER"] = 0;
          values[valuesById[1] = "BOSS"] = 1;
          values[valuesById[2] = "EMPLOYEE"] = 2;
          values[valuesById[3] = "KOL"] = 3;
          values[valuesById[4] = "CAPTAIN"] = 4;
          return values;
        }();
        /**
         * RightType enum.
         * @name jubian.golottery.model.profile.RightType
         * @enum {number}
         * @property {number} AVAILABLE=0 AVAILABLE value
         * @property {number} DISABLE=1 DISABLE value
         * @property {number} FORBIDDEN_CHAT=2 FORBIDDEN_CHAT value
         * @property {number} FORBIDDEN_PUBLISH=3 FORBIDDEN_PUBLISH value
         * @property {number} BLACKLIST=4 BLACKLIST value
         * @property {number} FORBIDDEN_OPER=5 FORBIDDEN_OPER value
         */


        profile.RightType = function () {
          var valuesById = {},
              values = Object.create(valuesById);
          values[valuesById[0] = "AVAILABLE"] = 0;
          values[valuesById[1] = "DISABLE"] = 1;
          values[valuesById[2] = "FORBIDDEN_CHAT"] = 2;
          values[valuesById[3] = "FORBIDDEN_PUBLISH"] = 3;
          values[valuesById[4] = "BLACKLIST"] = 4;
          values[valuesById[5] = "FORBIDDEN_OPER"] = 5;
          return values;
        }();

        profile.ProfileResponse = function () {
          /**
           * Properties of a ProfileResponse.
           * @memberof jubian.golottery.model.profile
           * @interface IProfileResponse
           * @property {Array.<jubian.golottery.model.profile.IProfile>|null} [profiles] ProfileResponse profiles
           */

          /**
           * Constructs a new ProfileResponse.
           * @memberof jubian.golottery.model.profile
           * @classdesc Represents a ProfileResponse.
           * @implements IProfileResponse
           * @constructor
           * @param {jubian.golottery.model.profile.IProfileResponse=} [p] Properties to set
           */
          function ProfileResponse(p) {
            this.profiles = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * ProfileResponse profiles.
           * @member {Array.<jubian.golottery.model.profile.IProfile>} profiles
           * @memberof jubian.golottery.model.profile.ProfileResponse
           * @instance
           */


          ProfileResponse.prototype.profiles = $util.emptyArray;
          /**
           * Encodes the specified ProfileResponse message. Does not implicitly {@link jubian.golottery.model.profile.ProfileResponse.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.model.profile.ProfileResponse
           * @static
           * @param {jubian.golottery.model.profile.IProfileResponse} m ProfileResponse message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          ProfileResponse.encode = function encode(m, w) {
            if (!w) w = $Writer.create();

            if (m.profiles != null && m.profiles.length) {
              for (var i = 0; i < m.profiles.length; ++i) {
                $root.jubian.golottery.model.profile.Profile.encode(m.profiles[i], w.uint32(10).fork()).ldelim();
              }
            }

            return w;
          };
          /**
           * Decodes a ProfileResponse message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.model.profile.ProfileResponse
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.model.profile.ProfileResponse} ProfileResponse
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          ProfileResponse.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.model.profile.ProfileResponse();

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  if (!(m.profiles && m.profiles.length)) m.profiles = [];
                  m.profiles.push($root.jubian.golottery.model.profile.Profile.decode(r, r.uint32()));
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates a ProfileResponse message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.model.profile.ProfileResponse
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.model.profile.ProfileResponse} ProfileResponse
           */


          ProfileResponse.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.model.profile.ProfileResponse) return d;
            var m = new $root.jubian.golottery.model.profile.ProfileResponse();

            if (d.profiles) {
              if (!Array.isArray(d.profiles)) throw TypeError(".jubian.golottery.model.profile.ProfileResponse.profiles: array expected");
              m.profiles = [];

              for (var i = 0; i < d.profiles.length; ++i) {
                if (typeof d.profiles[i] !== "object") throw TypeError(".jubian.golottery.model.profile.ProfileResponse.profiles: object expected");
                m.profiles[i] = $root.jubian.golottery.model.profile.Profile.fromObject(d.profiles[i]);
              }
            }

            return m;
          };
          /**
           * Creates a plain object from a ProfileResponse message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.model.profile.ProfileResponse
           * @static
           * @param {jubian.golottery.model.profile.ProfileResponse} m ProfileResponse
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          ProfileResponse.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.arrays || o.defaults) {
              d.profiles = [];
            }

            if (m.profiles && m.profiles.length) {
              d.profiles = [];

              for (var j = 0; j < m.profiles.length; ++j) {
                d.profiles[j] = $root.jubian.golottery.model.profile.Profile.toObject(m.profiles[j], o);
              }
            }

            return d;
          };
          /**
           * Converts this ProfileResponse to JSON.
           * @function toJSON
           * @memberof jubian.golottery.model.profile.ProfileResponse
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          ProfileResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return ProfileResponse;
        }();

        profile.OrganizationResponse = function () {
          /**
           * Properties of an OrganizationResponse.
           * @memberof jubian.golottery.model.profile
           * @interface IOrganizationResponse
           * @property {Array.<jubian.golottery.model.profile.IOrganization>|null} [groups] OrganizationResponse groups
           */

          /**
           * Constructs a new OrganizationResponse.
           * @memberof jubian.golottery.model.profile
           * @classdesc Represents an OrganizationResponse.
           * @implements IOrganizationResponse
           * @constructor
           * @param {jubian.golottery.model.profile.IOrganizationResponse=} [p] Properties to set
           */
          function OrganizationResponse(p) {
            this.groups = [];
            if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
              if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
            }
          }
          /**
           * OrganizationResponse groups.
           * @member {Array.<jubian.golottery.model.profile.IOrganization>} groups
           * @memberof jubian.golottery.model.profile.OrganizationResponse
           * @instance
           */


          OrganizationResponse.prototype.groups = $util.emptyArray;
          /**
           * Encodes the specified OrganizationResponse message. Does not implicitly {@link jubian.golottery.model.profile.OrganizationResponse.verify|verify} messages.
           * @function encode
           * @memberof jubian.golottery.model.profile.OrganizationResponse
           * @static
           * @param {jubian.golottery.model.profile.IOrganizationResponse} m OrganizationResponse message or plain object to encode
           * @param {$protobuf.Writer} [w] Writer to encode to
           * @returns {$protobuf.Writer} Writer
           */

          OrganizationResponse.encode = function encode(m, w) {
            if (!w) w = $Writer.create();

            if (m.groups != null && m.groups.length) {
              for (var i = 0; i < m.groups.length; ++i) {
                $root.jubian.golottery.model.profile.Organization.encode(m.groups[i], w.uint32(10).fork()).ldelim();
              }
            }

            return w;
          };
          /**
           * Decodes an OrganizationResponse message from the specified reader or buffer.
           * @function decode
           * @memberof jubian.golottery.model.profile.OrganizationResponse
           * @static
           * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
           * @param {number} [l] Message length if known beforehand
           * @returns {jubian.golottery.model.profile.OrganizationResponse} OrganizationResponse
           * @throws {Error} If the payload is not a reader or valid buffer
           * @throws {$protobuf.util.ProtocolError} If required fields are missing
           */


          OrganizationResponse.decode = function decode(r, l) {
            if (!(r instanceof $Reader)) r = $Reader.create(r);
            var c = l === undefined ? r.len : r.pos + l,
                m = new $root.jubian.golottery.model.profile.OrganizationResponse();

            while (r.pos < c) {
              var t = r.uint32();

              switch (t >>> 3) {
                case 1:
                  if (!(m.groups && m.groups.length)) m.groups = [];
                  m.groups.push($root.jubian.golottery.model.profile.Organization.decode(r, r.uint32()));
                  break;

                default:
                  r.skipType(t & 7);
                  break;
              }
            }

            return m;
          };
          /**
           * Creates an OrganizationResponse message from a plain object. Also converts values to their respective internal types.
           * @function fromObject
           * @memberof jubian.golottery.model.profile.OrganizationResponse
           * @static
           * @param {Object.<string,*>} d Plain object
           * @returns {jubian.golottery.model.profile.OrganizationResponse} OrganizationResponse
           */


          OrganizationResponse.fromObject = function fromObject(d) {
            if (d instanceof $root.jubian.golottery.model.profile.OrganizationResponse) return d;
            var m = new $root.jubian.golottery.model.profile.OrganizationResponse();

            if (d.groups) {
              if (!Array.isArray(d.groups)) throw TypeError(".jubian.golottery.model.profile.OrganizationResponse.groups: array expected");
              m.groups = [];

              for (var i = 0; i < d.groups.length; ++i) {
                if (typeof d.groups[i] !== "object") throw TypeError(".jubian.golottery.model.profile.OrganizationResponse.groups: object expected");
                m.groups[i] = $root.jubian.golottery.model.profile.Organization.fromObject(d.groups[i]);
              }
            }

            return m;
          };
          /**
           * Creates a plain object from an OrganizationResponse message. Also converts values to other types if specified.
           * @function toObject
           * @memberof jubian.golottery.model.profile.OrganizationResponse
           * @static
           * @param {jubian.golottery.model.profile.OrganizationResponse} m OrganizationResponse
           * @param {$protobuf.IConversionOptions} [o] Conversion options
           * @returns {Object.<string,*>} Plain object
           */


          OrganizationResponse.toObject = function toObject(m, o) {
            if (!o) o = {};
            var d = {};

            if (o.arrays || o.defaults) {
              d.groups = [];
            }

            if (m.groups && m.groups.length) {
              d.groups = [];

              for (var j = 0; j < m.groups.length; ++j) {
                d.groups[j] = $root.jubian.golottery.model.profile.Organization.toObject(m.groups[j], o);
              }
            }

            return d;
          };
          /**
           * Converts this OrganizationResponse to JSON.
           * @function toJSON
           * @memberof jubian.golottery.model.profile.OrganizationResponse
           * @instance
           * @returns {Object.<string,*>} JSON object
           */


          OrganizationResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };

          return OrganizationResponse;
        }();

        return profile;
      }();

      return model;
    }();

    return golottery;
  }();

  return jubian;
}();

$root.farm = function () {
  /**
   * Namespace farm.
   * @exports farm
   * @namespace
   */
  var farm = {};

  farm.ReqGameWords = function () {
    /**
     * Properties of a ReqGameWords.
     * @memberof farm
     * @interface IReqGameWords
     * @property {string|null} [user_id] ReqGameWords user_id
     * @property {number|Long|null} [mode] ReqGameWords mode
     * @property {string|null} [mode_param] ReqGameWords mode_param
     * @property {number|Long|null} [game_type] ReqGameWords game_type
     */

    /**
     * Constructs a new ReqGameWords.
     * @memberof farm
     * @classdesc Represents a ReqGameWords.
     * @implements IReqGameWords
     * @constructor
     * @param {farm.IReqGameWords=} [p] Properties to set
     */
    function ReqGameWords(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqGameWords user_id.
     * @member {string} user_id
     * @memberof farm.ReqGameWords
     * @instance
     */


    ReqGameWords.prototype.user_id = "";
    /**
     * ReqGameWords mode.
     * @member {number|Long} mode
     * @memberof farm.ReqGameWords
     * @instance
     */

    ReqGameWords.prototype.mode = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqGameWords mode_param.
     * @member {string} mode_param
     * @memberof farm.ReqGameWords
     * @instance
     */

    ReqGameWords.prototype.mode_param = "";
    /**
     * ReqGameWords game_type.
     * @member {number|Long} game_type
     * @memberof farm.ReqGameWords
     * @instance
     */

    ReqGameWords.prototype.game_type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqGameWords message. Does not implicitly {@link farm.ReqGameWords.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqGameWords
     * @static
     * @param {farm.IReqGameWords} m ReqGameWords message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqGameWords.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.user_id != null && Object.hasOwnProperty.call(m, "user_id")) w.uint32(10).string(m.user_id);
      if (m.mode != null && Object.hasOwnProperty.call(m, "mode")) w.uint32(16).int64(m.mode);
      if (m.mode_param != null && Object.hasOwnProperty.call(m, "mode_param")) w.uint32(26).string(m.mode_param);
      if (m.game_type != null && Object.hasOwnProperty.call(m, "game_type")) w.uint32(32).int64(m.game_type);
      return w;
    };
    /**
     * Decodes a ReqGameWords message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqGameWords
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqGameWords} ReqGameWords
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqGameWords.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqGameWords();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.user_id = r.string();
            break;

          case 2:
            m.mode = r.int64();
            break;

          case 3:
            m.mode_param = r.string();
            break;

          case 4:
            m.game_type = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqGameWords message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqGameWords
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqGameWords} ReqGameWords
     */


    ReqGameWords.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqGameWords) return d;
      var m = new $root.farm.ReqGameWords();

      if (d.user_id != null) {
        m.user_id = String(d.user_id);
      }

      if (d.mode != null) {
        if ($util.Long) (m.mode = $util.Long.fromValue(d.mode)).unsigned = false;else if (typeof d.mode === "string") m.mode = parseInt(d.mode, 10);else if (typeof d.mode === "number") m.mode = d.mode;else if (typeof d.mode === "object") m.mode = new $util.LongBits(d.mode.low >>> 0, d.mode.high >>> 0).toNumber();
      }

      if (d.mode_param != null) {
        m.mode_param = String(d.mode_param);
      }

      if (d.game_type != null) {
        if ($util.Long) (m.game_type = $util.Long.fromValue(d.game_type)).unsigned = false;else if (typeof d.game_type === "string") m.game_type = parseInt(d.game_type, 10);else if (typeof d.game_type === "number") m.game_type = d.game_type;else if (typeof d.game_type === "object") m.game_type = new $util.LongBits(d.game_type.low >>> 0, d.game_type.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqGameWords message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqGameWords
     * @static
     * @param {farm.ReqGameWords} m ReqGameWords
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqGameWords.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.user_id = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mode = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mode = o.longs === String ? "0" : 0;

        d.mode_param = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.game_type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.game_type = o.longs === String ? "0" : 0;
      }

      if (m.user_id != null && m.hasOwnProperty("user_id")) {
        d.user_id = m.user_id;
      }

      if (m.mode != null && m.hasOwnProperty("mode")) {
        if (typeof m.mode === "number") d.mode = o.longs === String ? String(m.mode) : m.mode;else d.mode = o.longs === String ? $util.Long.prototype.toString.call(m.mode) : o.longs === Number ? new $util.LongBits(m.mode.low >>> 0, m.mode.high >>> 0).toNumber() : m.mode;
      }

      if (m.mode_param != null && m.hasOwnProperty("mode_param")) {
        d.mode_param = m.mode_param;
      }

      if (m.game_type != null && m.hasOwnProperty("game_type")) {
        if (typeof m.game_type === "number") d.game_type = o.longs === String ? String(m.game_type) : m.game_type;else d.game_type = o.longs === String ? $util.Long.prototype.toString.call(m.game_type) : o.longs === Number ? new $util.LongBits(m.game_type.low >>> 0, m.game_type.high >>> 0).toNumber() : m.game_type;
      }

      return d;
    };
    /**
     * Converts this ReqGameWords to JSON.
     * @function toJSON
     * @memberof farm.ReqGameWords
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqGameWords.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqGameWords;
  }();

  farm.RespGameWords = function () {
    /**
     * Properties of a RespGameWords.
     * @memberof farm
     * @interface IRespGameWords
     * @property {Array.<number|Long>|null} [item_ids] RespGameWords item_ids
     * @property {number|Long|null} [must_learn] RespGameWords must_learn
     * @property {farm.IGameTypeConfig|null} [game_config] RespGameWords game_config
     */

    /**
     * Constructs a new RespGameWords.
     * @memberof farm
     * @classdesc Represents a RespGameWords.
     * @implements IRespGameWords
     * @constructor
     * @param {farm.IRespGameWords=} [p] Properties to set
     */
    function RespGameWords(p) {
      this.item_ids = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespGameWords item_ids.
     * @member {Array.<number|Long>} item_ids
     * @memberof farm.RespGameWords
     * @instance
     */


    RespGameWords.prototype.item_ids = $util.emptyArray;
    /**
     * RespGameWords must_learn.
     * @member {number|Long} must_learn
     * @memberof farm.RespGameWords
     * @instance
     */

    RespGameWords.prototype.must_learn = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespGameWords game_config.
     * @member {farm.IGameTypeConfig|null|undefined} game_config
     * @memberof farm.RespGameWords
     * @instance
     */

    RespGameWords.prototype.game_config = null;
    /**
     * Encodes the specified RespGameWords message. Does not implicitly {@link farm.RespGameWords.verify|verify} messages.
     * @function encode
     * @memberof farm.RespGameWords
     * @static
     * @param {farm.IRespGameWords} m RespGameWords message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespGameWords.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.item_ids != null && m.item_ids.length) {
        w.uint32(10).fork();

        for (var i = 0; i < m.item_ids.length; ++i) {
          w.int64(m.item_ids[i]);
        }

        w.ldelim();
      }

      if (m.must_learn != null && Object.hasOwnProperty.call(m, "must_learn")) w.uint32(16).int64(m.must_learn);
      if (m.game_config != null && Object.hasOwnProperty.call(m, "game_config")) $root.farm.GameTypeConfig.encode(m.game_config, w.uint32(26).fork()).ldelim();
      return w;
    };
    /**
     * Decodes a RespGameWords message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespGameWords
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespGameWords} RespGameWords
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespGameWords.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespGameWords();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.item_ids && m.item_ids.length)) m.item_ids = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.item_ids.push(r.int64());
              }
            } else m.item_ids.push(r.int64());

            break;

          case 2:
            m.must_learn = r.int64();
            break;

          case 3:
            m.game_config = $root.farm.GameTypeConfig.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespGameWords message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespGameWords
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespGameWords} RespGameWords
     */


    RespGameWords.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespGameWords) return d;
      var m = new $root.farm.RespGameWords();

      if (d.item_ids) {
        if (!Array.isArray(d.item_ids)) throw TypeError(".farm.RespGameWords.item_ids: array expected");
        m.item_ids = [];

        for (var i = 0; i < d.item_ids.length; ++i) {
          if ($util.Long) (m.item_ids[i] = $util.Long.fromValue(d.item_ids[i])).unsigned = false;else if (typeof d.item_ids[i] === "string") m.item_ids[i] = parseInt(d.item_ids[i], 10);else if (typeof d.item_ids[i] === "number") m.item_ids[i] = d.item_ids[i];else if (typeof d.item_ids[i] === "object") m.item_ids[i] = new $util.LongBits(d.item_ids[i].low >>> 0, d.item_ids[i].high >>> 0).toNumber();
        }
      }

      if (d.must_learn != null) {
        if ($util.Long) (m.must_learn = $util.Long.fromValue(d.must_learn)).unsigned = false;else if (typeof d.must_learn === "string") m.must_learn = parseInt(d.must_learn, 10);else if (typeof d.must_learn === "number") m.must_learn = d.must_learn;else if (typeof d.must_learn === "object") m.must_learn = new $util.LongBits(d.must_learn.low >>> 0, d.must_learn.high >>> 0).toNumber();
      }

      if (d.game_config != null) {
        if (typeof d.game_config !== "object") throw TypeError(".farm.RespGameWords.game_config: object expected");
        m.game_config = $root.farm.GameTypeConfig.fromObject(d.game_config);
      }

      return m;
    };
    /**
     * Creates a plain object from a RespGameWords message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespGameWords
     * @static
     * @param {farm.RespGameWords} m RespGameWords
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespGameWords.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.item_ids = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.must_learn = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.must_learn = o.longs === String ? "0" : 0;

        d.game_config = null;
      }

      if (m.item_ids && m.item_ids.length) {
        d.item_ids = [];

        for (var j = 0; j < m.item_ids.length; ++j) {
          if (typeof m.item_ids[j] === "number") d.item_ids[j] = o.longs === String ? String(m.item_ids[j]) : m.item_ids[j];else d.item_ids[j] = o.longs === String ? $util.Long.prototype.toString.call(m.item_ids[j]) : o.longs === Number ? new $util.LongBits(m.item_ids[j].low >>> 0, m.item_ids[j].high >>> 0).toNumber() : m.item_ids[j];
        }
      }

      if (m.must_learn != null && m.hasOwnProperty("must_learn")) {
        if (typeof m.must_learn === "number") d.must_learn = o.longs === String ? String(m.must_learn) : m.must_learn;else d.must_learn = o.longs === String ? $util.Long.prototype.toString.call(m.must_learn) : o.longs === Number ? new $util.LongBits(m.must_learn.low >>> 0, m.must_learn.high >>> 0).toNumber() : m.must_learn;
      }

      if (m.game_config != null && m.hasOwnProperty("game_config")) {
        d.game_config = $root.farm.GameTypeConfig.toObject(m.game_config, o);
      }

      return d;
    };
    /**
     * Converts this RespGameWords to JSON.
     * @function toJSON
     * @memberof farm.RespGameWords
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespGameWords.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespGameWords;
  }();

  farm.GameTypeConfig = function () {
    /**
     * Properties of a GameTypeConfig.
     * @memberof farm
     * @interface IGameTypeConfig
     * @property {number|Long|null} [game_duration] GameTypeConfig game_duration
     * @property {number|Long|null} [time_over] GameTypeConfig time_over
     * @property {Array.<number|Long>|null} [stage_params] GameTypeConfig stage_params
     * @property {number|Long|null} [game_type] GameTypeConfig game_type
     * @property {number|null} [time_over_or_wrong_deduction] GameTypeConfig time_over_or_wrong_deduction
     * @property {number|null} [unskillfull_deduction] GameTypeConfig unskillfull_deduction
     * @property {Array.<number>|null} [star_evaluation] GameTypeConfig star_evaluation
     */

    /**
     * Constructs a new GameTypeConfig.
     * @memberof farm
     * @classdesc Represents a GameTypeConfig.
     * @implements IGameTypeConfig
     * @constructor
     * @param {farm.IGameTypeConfig=} [p] Properties to set
     */
    function GameTypeConfig(p) {
      this.stage_params = [];
      this.star_evaluation = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * GameTypeConfig game_duration.
     * @member {number|Long} game_duration
     * @memberof farm.GameTypeConfig
     * @instance
     */


    GameTypeConfig.prototype.game_duration = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameTypeConfig time_over.
     * @member {number|Long} time_over
     * @memberof farm.GameTypeConfig
     * @instance
     */

    GameTypeConfig.prototype.time_over = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameTypeConfig stage_params.
     * @member {Array.<number|Long>} stage_params
     * @memberof farm.GameTypeConfig
     * @instance
     */

    GameTypeConfig.prototype.stage_params = $util.emptyArray;
    /**
     * GameTypeConfig game_type.
     * @member {number|Long} game_type
     * @memberof farm.GameTypeConfig
     * @instance
     */

    GameTypeConfig.prototype.game_type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameTypeConfig time_over_or_wrong_deduction.
     * @member {number} time_over_or_wrong_deduction
     * @memberof farm.GameTypeConfig
     * @instance
     */

    GameTypeConfig.prototype.time_over_or_wrong_deduction = 0;
    /**
     * GameTypeConfig unskillfull_deduction.
     * @member {number} unskillfull_deduction
     * @memberof farm.GameTypeConfig
     * @instance
     */

    GameTypeConfig.prototype.unskillfull_deduction = 0;
    /**
     * GameTypeConfig star_evaluation.
     * @member {Array.<number>} star_evaluation
     * @memberof farm.GameTypeConfig
     * @instance
     */

    GameTypeConfig.prototype.star_evaluation = $util.emptyArray;
    /**
     * Encodes the specified GameTypeConfig message. Does not implicitly {@link farm.GameTypeConfig.verify|verify} messages.
     * @function encode
     * @memberof farm.GameTypeConfig
     * @static
     * @param {farm.IGameTypeConfig} m GameTypeConfig message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    GameTypeConfig.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.game_duration != null && Object.hasOwnProperty.call(m, "game_duration")) w.uint32(8).int64(m.game_duration);
      if (m.time_over != null && Object.hasOwnProperty.call(m, "time_over")) w.uint32(16).int64(m.time_over);

      if (m.stage_params != null && m.stage_params.length) {
        w.uint32(26).fork();

        for (var i = 0; i < m.stage_params.length; ++i) {
          w.int64(m.stage_params[i]);
        }

        w.ldelim();
      }

      if (m.game_type != null && Object.hasOwnProperty.call(m, "game_type")) w.uint32(32).int64(m.game_type);
      if (m.time_over_or_wrong_deduction != null && Object.hasOwnProperty.call(m, "time_over_or_wrong_deduction")) w.uint32(45)["float"](m.time_over_or_wrong_deduction);
      if (m.unskillfull_deduction != null && Object.hasOwnProperty.call(m, "unskillfull_deduction")) w.uint32(53)["float"](m.unskillfull_deduction);

      if (m.star_evaluation != null && m.star_evaluation.length) {
        w.uint32(58).fork();

        for (var i = 0; i < m.star_evaluation.length; ++i) {
          w["float"](m.star_evaluation[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a GameTypeConfig message from the specified reader or buffer.
     * @function decode
     * @memberof farm.GameTypeConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.GameTypeConfig} GameTypeConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    GameTypeConfig.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.GameTypeConfig();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.game_duration = r.int64();
            break;

          case 2:
            m.time_over = r.int64();
            break;

          case 3:
            if (!(m.stage_params && m.stage_params.length)) m.stage_params = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.stage_params.push(r.int64());
              }
            } else m.stage_params.push(r.int64());

            break;

          case 4:
            m.game_type = r.int64();
            break;

          case 5:
            m.time_over_or_wrong_deduction = r["float"]();
            break;

          case 6:
            m.unskillfull_deduction = r["float"]();
            break;

          case 7:
            if (!(m.star_evaluation && m.star_evaluation.length)) m.star_evaluation = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.star_evaluation.push(r["float"]());
              }
            } else m.star_evaluation.push(r["float"]());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a GameTypeConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.GameTypeConfig
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.GameTypeConfig} GameTypeConfig
     */


    GameTypeConfig.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.GameTypeConfig) return d;
      var m = new $root.farm.GameTypeConfig();

      if (d.game_duration != null) {
        if ($util.Long) (m.game_duration = $util.Long.fromValue(d.game_duration)).unsigned = false;else if (typeof d.game_duration === "string") m.game_duration = parseInt(d.game_duration, 10);else if (typeof d.game_duration === "number") m.game_duration = d.game_duration;else if (typeof d.game_duration === "object") m.game_duration = new $util.LongBits(d.game_duration.low >>> 0, d.game_duration.high >>> 0).toNumber();
      }

      if (d.time_over != null) {
        if ($util.Long) (m.time_over = $util.Long.fromValue(d.time_over)).unsigned = false;else if (typeof d.time_over === "string") m.time_over = parseInt(d.time_over, 10);else if (typeof d.time_over === "number") m.time_over = d.time_over;else if (typeof d.time_over === "object") m.time_over = new $util.LongBits(d.time_over.low >>> 0, d.time_over.high >>> 0).toNumber();
      }

      if (d.stage_params) {
        if (!Array.isArray(d.stage_params)) throw TypeError(".farm.GameTypeConfig.stage_params: array expected");
        m.stage_params = [];

        for (var i = 0; i < d.stage_params.length; ++i) {
          if ($util.Long) (m.stage_params[i] = $util.Long.fromValue(d.stage_params[i])).unsigned = false;else if (typeof d.stage_params[i] === "string") m.stage_params[i] = parseInt(d.stage_params[i], 10);else if (typeof d.stage_params[i] === "number") m.stage_params[i] = d.stage_params[i];else if (typeof d.stage_params[i] === "object") m.stage_params[i] = new $util.LongBits(d.stage_params[i].low >>> 0, d.stage_params[i].high >>> 0).toNumber();
        }
      }

      if (d.game_type != null) {
        if ($util.Long) (m.game_type = $util.Long.fromValue(d.game_type)).unsigned = false;else if (typeof d.game_type === "string") m.game_type = parseInt(d.game_type, 10);else if (typeof d.game_type === "number") m.game_type = d.game_type;else if (typeof d.game_type === "object") m.game_type = new $util.LongBits(d.game_type.low >>> 0, d.game_type.high >>> 0).toNumber();
      }

      if (d.time_over_or_wrong_deduction != null) {
        m.time_over_or_wrong_deduction = Number(d.time_over_or_wrong_deduction);
      }

      if (d.unskillfull_deduction != null) {
        m.unskillfull_deduction = Number(d.unskillfull_deduction);
      }

      if (d.star_evaluation) {
        if (!Array.isArray(d.star_evaluation)) throw TypeError(".farm.GameTypeConfig.star_evaluation: array expected");
        m.star_evaluation = [];

        for (var i = 0; i < d.star_evaluation.length; ++i) {
          m.star_evaluation[i] = Number(d.star_evaluation[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a GameTypeConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.GameTypeConfig
     * @static
     * @param {farm.GameTypeConfig} m GameTypeConfig
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    GameTypeConfig.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.stage_params = [];
        d.star_evaluation = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.game_duration = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.game_duration = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.time_over = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.time_over = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.game_type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.game_type = o.longs === String ? "0" : 0;

        d.time_over_or_wrong_deduction = 0;
        d.unskillfull_deduction = 0;
      }

      if (m.game_duration != null && m.hasOwnProperty("game_duration")) {
        if (typeof m.game_duration === "number") d.game_duration = o.longs === String ? String(m.game_duration) : m.game_duration;else d.game_duration = o.longs === String ? $util.Long.prototype.toString.call(m.game_duration) : o.longs === Number ? new $util.LongBits(m.game_duration.low >>> 0, m.game_duration.high >>> 0).toNumber() : m.game_duration;
      }

      if (m.time_over != null && m.hasOwnProperty("time_over")) {
        if (typeof m.time_over === "number") d.time_over = o.longs === String ? String(m.time_over) : m.time_over;else d.time_over = o.longs === String ? $util.Long.prototype.toString.call(m.time_over) : o.longs === Number ? new $util.LongBits(m.time_over.low >>> 0, m.time_over.high >>> 0).toNumber() : m.time_over;
      }

      if (m.stage_params && m.stage_params.length) {
        d.stage_params = [];

        for (var j = 0; j < m.stage_params.length; ++j) {
          if (typeof m.stage_params[j] === "number") d.stage_params[j] = o.longs === String ? String(m.stage_params[j]) : m.stage_params[j];else d.stage_params[j] = o.longs === String ? $util.Long.prototype.toString.call(m.stage_params[j]) : o.longs === Number ? new $util.LongBits(m.stage_params[j].low >>> 0, m.stage_params[j].high >>> 0).toNumber() : m.stage_params[j];
        }
      }

      if (m.game_type != null && m.hasOwnProperty("game_type")) {
        if (typeof m.game_type === "number") d.game_type = o.longs === String ? String(m.game_type) : m.game_type;else d.game_type = o.longs === String ? $util.Long.prototype.toString.call(m.game_type) : o.longs === Number ? new $util.LongBits(m.game_type.low >>> 0, m.game_type.high >>> 0).toNumber() : m.game_type;
      }

      if (m.time_over_or_wrong_deduction != null && m.hasOwnProperty("time_over_or_wrong_deduction")) {
        d.time_over_or_wrong_deduction = o.json && !isFinite(m.time_over_or_wrong_deduction) ? String(m.time_over_or_wrong_deduction) : m.time_over_or_wrong_deduction;
      }

      if (m.unskillfull_deduction != null && m.hasOwnProperty("unskillfull_deduction")) {
        d.unskillfull_deduction = o.json && !isFinite(m.unskillfull_deduction) ? String(m.unskillfull_deduction) : m.unskillfull_deduction;
      }

      if (m.star_evaluation && m.star_evaluation.length) {
        d.star_evaluation = [];

        for (var j = 0; j < m.star_evaluation.length; ++j) {
          d.star_evaluation[j] = o.json && !isFinite(m.star_evaluation[j]) ? String(m.star_evaluation[j]) : m.star_evaluation[j];
        }
      }

      return d;
    };
    /**
     * Converts this GameTypeConfig to JSON.
     * @function toJSON
     * @memberof farm.GameTypeConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    GameTypeConfig.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GameTypeConfig;
  }();

  farm.ReqUnitLearningProgress = function () {
    /**
     * Properties of a ReqUnitLearningProgress.
     * @memberof farm
     * @interface IReqUnitLearningProgress
     * @property {string|null} [user_id] ReqUnitLearningProgress user_id
     * @property {number|Long|null} [mat_id] ReqUnitLearningProgress mat_id
     * @property {number|Long|null} [unit_id] ReqUnitLearningProgress unit_id
     */

    /**
     * Constructs a new ReqUnitLearningProgress.
     * @memberof farm
     * @classdesc Represents a ReqUnitLearningProgress.
     * @implements IReqUnitLearningProgress
     * @constructor
     * @param {farm.IReqUnitLearningProgress=} [p] Properties to set
     */
    function ReqUnitLearningProgress(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqUnitLearningProgress user_id.
     * @member {string} user_id
     * @memberof farm.ReqUnitLearningProgress
     * @instance
     */


    ReqUnitLearningProgress.prototype.user_id = "";
    /**
     * ReqUnitLearningProgress mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.ReqUnitLearningProgress
     * @instance
     */

    ReqUnitLearningProgress.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqUnitLearningProgress unit_id.
     * @member {number|Long} unit_id
     * @memberof farm.ReqUnitLearningProgress
     * @instance
     */

    ReqUnitLearningProgress.prototype.unit_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqUnitLearningProgress message. Does not implicitly {@link farm.ReqUnitLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqUnitLearningProgress
     * @static
     * @param {farm.IReqUnitLearningProgress} m ReqUnitLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqUnitLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.user_id != null && Object.hasOwnProperty.call(m, "user_id")) w.uint32(10).string(m.user_id);
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(16).int64(m.mat_id);
      if (m.unit_id != null && Object.hasOwnProperty.call(m, "unit_id")) w.uint32(24).int64(m.unit_id);
      return w;
    };
    /**
     * Decodes a ReqUnitLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqUnitLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqUnitLearningProgress} ReqUnitLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqUnitLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqUnitLearningProgress();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.user_id = r.string();
            break;

          case 2:
            m.mat_id = r.int64();
            break;

          case 3:
            m.unit_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqUnitLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqUnitLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqUnitLearningProgress} ReqUnitLearningProgress
     */


    ReqUnitLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqUnitLearningProgress) return d;
      var m = new $root.farm.ReqUnitLearningProgress();

      if (d.user_id != null) {
        m.user_id = String(d.user_id);
      }

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      if (d.unit_id != null) {
        if ($util.Long) (m.unit_id = $util.Long.fromValue(d.unit_id)).unsigned = false;else if (typeof d.unit_id === "string") m.unit_id = parseInt(d.unit_id, 10);else if (typeof d.unit_id === "number") m.unit_id = d.unit_id;else if (typeof d.unit_id === "object") m.unit_id = new $util.LongBits(d.unit_id.low >>> 0, d.unit_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqUnitLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqUnitLearningProgress
     * @static
     * @param {farm.ReqUnitLearningProgress} m ReqUnitLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqUnitLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.user_id = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.unit_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.unit_id = o.longs === String ? "0" : 0;
      }

      if (m.user_id != null && m.hasOwnProperty("user_id")) {
        d.user_id = m.user_id;
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      if (m.unit_id != null && m.hasOwnProperty("unit_id")) {
        if (typeof m.unit_id === "number") d.unit_id = o.longs === String ? String(m.unit_id) : m.unit_id;else d.unit_id = o.longs === String ? $util.Long.prototype.toString.call(m.unit_id) : o.longs === Number ? new $util.LongBits(m.unit_id.low >>> 0, m.unit_id.high >>> 0).toNumber() : m.unit_id;
      }

      return d;
    };
    /**
     * Converts this ReqUnitLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.ReqUnitLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqUnitLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqUnitLearningProgress;
  }();

  farm.RespUnitLearningProgress = function () {
    /**
     * Properties of a RespUnitLearningProgress.
     * @memberof farm
     * @interface IRespUnitLearningProgress
     * @property {number|Long|null} [mat_id] RespUnitLearningProgress mat_id
     * @property {Array.<farm.IGameTypeLearningProgressItem>|null} [games_progress] RespUnitLearningProgress games_progress
     */

    /**
     * Constructs a new RespUnitLearningProgress.
     * @memberof farm
     * @classdesc Represents a RespUnitLearningProgress.
     * @implements IRespUnitLearningProgress
     * @constructor
     * @param {farm.IRespUnitLearningProgress=} [p] Properties to set
     */
    function RespUnitLearningProgress(p) {
      this.games_progress = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespUnitLearningProgress mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.RespUnitLearningProgress
     * @instance
     */


    RespUnitLearningProgress.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespUnitLearningProgress games_progress.
     * @member {Array.<farm.IGameTypeLearningProgressItem>} games_progress
     * @memberof farm.RespUnitLearningProgress
     * @instance
     */

    RespUnitLearningProgress.prototype.games_progress = $util.emptyArray;
    /**
     * Encodes the specified RespUnitLearningProgress message. Does not implicitly {@link farm.RespUnitLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.RespUnitLearningProgress
     * @static
     * @param {farm.IRespUnitLearningProgress} m RespUnitLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespUnitLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(8).int64(m.mat_id);

      if (m.games_progress != null && m.games_progress.length) {
        for (var i = 0; i < m.games_progress.length; ++i) {
          $root.farm.GameTypeLearningProgressItem.encode(m.games_progress[i], w.uint32(18).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespUnitLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespUnitLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespUnitLearningProgress} RespUnitLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespUnitLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespUnitLearningProgress();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.mat_id = r.int64();
            break;

          case 2:
            if (!(m.games_progress && m.games_progress.length)) m.games_progress = [];
            m.games_progress.push($root.farm.GameTypeLearningProgressItem.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespUnitLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespUnitLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespUnitLearningProgress} RespUnitLearningProgress
     */


    RespUnitLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespUnitLearningProgress) return d;
      var m = new $root.farm.RespUnitLearningProgress();

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      if (d.games_progress) {
        if (!Array.isArray(d.games_progress)) throw TypeError(".farm.RespUnitLearningProgress.games_progress: array expected");
        m.games_progress = [];

        for (var i = 0; i < d.games_progress.length; ++i) {
          if (typeof d.games_progress[i] !== "object") throw TypeError(".farm.RespUnitLearningProgress.games_progress: object expected");
          m.games_progress[i] = $root.farm.GameTypeLearningProgressItem.fromObject(d.games_progress[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespUnitLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespUnitLearningProgress
     * @static
     * @param {farm.RespUnitLearningProgress} m RespUnitLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespUnitLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.games_progress = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      if (m.games_progress && m.games_progress.length) {
        d.games_progress = [];

        for (var j = 0; j < m.games_progress.length; ++j) {
          d.games_progress[j] = $root.farm.GameTypeLearningProgressItem.toObject(m.games_progress[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespUnitLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.RespUnitLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespUnitLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespUnitLearningProgress;
  }();

  farm.GameTypeLearningProgressItem = function () {
    /**
     * Properties of a GameTypeLearningProgressItem.
     * @memberof farm
     * @interface IGameTypeLearningProgressItem
     * @property {number|Long|null} [game_type] GameTypeLearningProgressItem game_type
     * @property {Array.<number|Long>|null} [star] GameTypeLearningProgressItem star
     * @property {string|null} [history_max_score] GameTypeLearningProgressItem history_max_score
     * @property {number|Long|null} [state] GameTypeLearningProgressItem state
     */

    /**
     * Constructs a new GameTypeLearningProgressItem.
     * @memberof farm
     * @classdesc Represents a GameTypeLearningProgressItem.
     * @implements IGameTypeLearningProgressItem
     * @constructor
     * @param {farm.IGameTypeLearningProgressItem=} [p] Properties to set
     */
    function GameTypeLearningProgressItem(p) {
      this.star = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * GameTypeLearningProgressItem game_type.
     * @member {number|Long} game_type
     * @memberof farm.GameTypeLearningProgressItem
     * @instance
     */


    GameTypeLearningProgressItem.prototype.game_type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameTypeLearningProgressItem star.
     * @member {Array.<number|Long>} star
     * @memberof farm.GameTypeLearningProgressItem
     * @instance
     */

    GameTypeLearningProgressItem.prototype.star = $util.emptyArray;
    /**
     * GameTypeLearningProgressItem history_max_score.
     * @member {string} history_max_score
     * @memberof farm.GameTypeLearningProgressItem
     * @instance
     */

    GameTypeLearningProgressItem.prototype.history_max_score = "";
    /**
     * GameTypeLearningProgressItem state.
     * @member {number|Long} state
     * @memberof farm.GameTypeLearningProgressItem
     * @instance
     */

    GameTypeLearningProgressItem.prototype.state = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified GameTypeLearningProgressItem message. Does not implicitly {@link farm.GameTypeLearningProgressItem.verify|verify} messages.
     * @function encode
     * @memberof farm.GameTypeLearningProgressItem
     * @static
     * @param {farm.IGameTypeLearningProgressItem} m GameTypeLearningProgressItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    GameTypeLearningProgressItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.game_type != null && Object.hasOwnProperty.call(m, "game_type")) w.uint32(8).int64(m.game_type);

      if (m.star != null && m.star.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.star.length; ++i) {
          w.int64(m.star[i]);
        }

        w.ldelim();
      }

      if (m.history_max_score != null && Object.hasOwnProperty.call(m, "history_max_score")) w.uint32(26).string(m.history_max_score);
      if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(32).int64(m.state);
      return w;
    };
    /**
     * Decodes a GameTypeLearningProgressItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.GameTypeLearningProgressItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.GameTypeLearningProgressItem} GameTypeLearningProgressItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    GameTypeLearningProgressItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.GameTypeLearningProgressItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.game_type = r.int64();
            break;

          case 2:
            if (!(m.star && m.star.length)) m.star = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.star.push(r.int64());
              }
            } else m.star.push(r.int64());

            break;

          case 3:
            m.history_max_score = r.string();
            break;

          case 4:
            m.state = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a GameTypeLearningProgressItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.GameTypeLearningProgressItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.GameTypeLearningProgressItem} GameTypeLearningProgressItem
     */


    GameTypeLearningProgressItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.GameTypeLearningProgressItem) return d;
      var m = new $root.farm.GameTypeLearningProgressItem();

      if (d.game_type != null) {
        if ($util.Long) (m.game_type = $util.Long.fromValue(d.game_type)).unsigned = false;else if (typeof d.game_type === "string") m.game_type = parseInt(d.game_type, 10);else if (typeof d.game_type === "number") m.game_type = d.game_type;else if (typeof d.game_type === "object") m.game_type = new $util.LongBits(d.game_type.low >>> 0, d.game_type.high >>> 0).toNumber();
      }

      if (d.star) {
        if (!Array.isArray(d.star)) throw TypeError(".farm.GameTypeLearningProgressItem.star: array expected");
        m.star = [];

        for (var i = 0; i < d.star.length; ++i) {
          if ($util.Long) (m.star[i] = $util.Long.fromValue(d.star[i])).unsigned = false;else if (typeof d.star[i] === "string") m.star[i] = parseInt(d.star[i], 10);else if (typeof d.star[i] === "number") m.star[i] = d.star[i];else if (typeof d.star[i] === "object") m.star[i] = new $util.LongBits(d.star[i].low >>> 0, d.star[i].high >>> 0).toNumber();
        }
      }

      if (d.history_max_score != null) {
        m.history_max_score = String(d.history_max_score);
      }

      if (d.state != null) {
        if ($util.Long) (m.state = $util.Long.fromValue(d.state)).unsigned = false;else if (typeof d.state === "string") m.state = parseInt(d.state, 10);else if (typeof d.state === "number") m.state = d.state;else if (typeof d.state === "object") m.state = new $util.LongBits(d.state.low >>> 0, d.state.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a GameTypeLearningProgressItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.GameTypeLearningProgressItem
     * @static
     * @param {farm.GameTypeLearningProgressItem} m GameTypeLearningProgressItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    GameTypeLearningProgressItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.star = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.game_type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.game_type = o.longs === String ? "0" : 0;

        d.history_max_score = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.state = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.state = o.longs === String ? "0" : 0;
      }

      if (m.game_type != null && m.hasOwnProperty("game_type")) {
        if (typeof m.game_type === "number") d.game_type = o.longs === String ? String(m.game_type) : m.game_type;else d.game_type = o.longs === String ? $util.Long.prototype.toString.call(m.game_type) : o.longs === Number ? new $util.LongBits(m.game_type.low >>> 0, m.game_type.high >>> 0).toNumber() : m.game_type;
      }

      if (m.star && m.star.length) {
        d.star = [];

        for (var j = 0; j < m.star.length; ++j) {
          if (typeof m.star[j] === "number") d.star[j] = o.longs === String ? String(m.star[j]) : m.star[j];else d.star[j] = o.longs === String ? $util.Long.prototype.toString.call(m.star[j]) : o.longs === Number ? new $util.LongBits(m.star[j].low >>> 0, m.star[j].high >>> 0).toNumber() : m.star[j];
        }
      }

      if (m.history_max_score != null && m.hasOwnProperty("history_max_score")) {
        d.history_max_score = m.history_max_score;
      }

      if (m.state != null && m.hasOwnProperty("state")) {
        if (typeof m.state === "number") d.state = o.longs === String ? String(m.state) : m.state;else d.state = o.longs === String ? $util.Long.prototype.toString.call(m.state) : o.longs === Number ? new $util.LongBits(m.state.low >>> 0, m.state.high >>> 0).toNumber() : m.state;
      }

      return d;
    };
    /**
     * Converts this GameTypeLearningProgressItem to JSON.
     * @function toJSON
     * @memberof farm.GameTypeLearningProgressItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    GameTypeLearningProgressItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GameTypeLearningProgressItem;
  }();

  farm.ReqMatLearningProgress = function () {
    /**
     * Properties of a ReqMatLearningProgress.
     * @memberof farm
     * @interface IReqMatLearningProgress
     * @property {string|null} [user_id] ReqMatLearningProgress user_id
     * @property {number|Long|null} [mat_id] ReqMatLearningProgress mat_id
     */

    /**
     * Constructs a new ReqMatLearningProgress.
     * @memberof farm
     * @classdesc Represents a ReqMatLearningProgress.
     * @implements IReqMatLearningProgress
     * @constructor
     * @param {farm.IReqMatLearningProgress=} [p] Properties to set
     */
    function ReqMatLearningProgress(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqMatLearningProgress user_id.
     * @member {string} user_id
     * @memberof farm.ReqMatLearningProgress
     * @instance
     */


    ReqMatLearningProgress.prototype.user_id = "";
    /**
     * ReqMatLearningProgress mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.ReqMatLearningProgress
     * @instance
     */

    ReqMatLearningProgress.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqMatLearningProgress message. Does not implicitly {@link farm.ReqMatLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqMatLearningProgress
     * @static
     * @param {farm.IReqMatLearningProgress} m ReqMatLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqMatLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.user_id != null && Object.hasOwnProperty.call(m, "user_id")) w.uint32(10).string(m.user_id);
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(16).int64(m.mat_id);
      return w;
    };
    /**
     * Decodes a ReqMatLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqMatLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqMatLearningProgress} ReqMatLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqMatLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqMatLearningProgress();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.user_id = r.string();
            break;

          case 2:
            m.mat_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqMatLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqMatLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqMatLearningProgress} ReqMatLearningProgress
     */


    ReqMatLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqMatLearningProgress) return d;
      var m = new $root.farm.ReqMatLearningProgress();

      if (d.user_id != null) {
        m.user_id = String(d.user_id);
      }

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqMatLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqMatLearningProgress
     * @static
     * @param {farm.ReqMatLearningProgress} m ReqMatLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqMatLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.user_id = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;
      }

      if (m.user_id != null && m.hasOwnProperty("user_id")) {
        d.user_id = m.user_id;
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      return d;
    };
    /**
     * Converts this ReqMatLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.ReqMatLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqMatLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqMatLearningProgress;
  }();

  farm.RespMatLearningProgress = function () {
    /**
     * Properties of a RespMatLearningProgress.
     * @memberof farm
     * @interface IRespMatLearningProgress
     * @property {number|Long|null} [mat_id] RespMatLearningProgress mat_id
     * @property {Array.<number|Long>|null} [mat_star] RespMatLearningProgress mat_star
     * @property {string|null} [grades_star] RespMatLearningProgress grades_star
     * @property {string|null} [units_star] RespMatLearningProgress units_star
     */

    /**
     * Constructs a new RespMatLearningProgress.
     * @memberof farm
     * @classdesc Represents a RespMatLearningProgress.
     * @implements IRespMatLearningProgress
     * @constructor
     * @param {farm.IRespMatLearningProgress=} [p] Properties to set
     */
    function RespMatLearningProgress(p) {
      this.mat_star = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespMatLearningProgress mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.RespMatLearningProgress
     * @instance
     */


    RespMatLearningProgress.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespMatLearningProgress mat_star.
     * @member {Array.<number|Long>} mat_star
     * @memberof farm.RespMatLearningProgress
     * @instance
     */

    RespMatLearningProgress.prototype.mat_star = $util.emptyArray;
    /**
     * RespMatLearningProgress grades_star.
     * @member {string} grades_star
     * @memberof farm.RespMatLearningProgress
     * @instance
     */

    RespMatLearningProgress.prototype.grades_star = "";
    /**
     * RespMatLearningProgress units_star.
     * @member {string} units_star
     * @memberof farm.RespMatLearningProgress
     * @instance
     */

    RespMatLearningProgress.prototype.units_star = "";
    /**
     * Encodes the specified RespMatLearningProgress message. Does not implicitly {@link farm.RespMatLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.RespMatLearningProgress
     * @static
     * @param {farm.IRespMatLearningProgress} m RespMatLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespMatLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(8).int64(m.mat_id);

      if (m.mat_star != null && m.mat_star.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.mat_star.length; ++i) {
          w.int64(m.mat_star[i]);
        }

        w.ldelim();
      }

      if (m.grades_star != null && Object.hasOwnProperty.call(m, "grades_star")) w.uint32(26).string(m.grades_star);
      if (m.units_star != null && Object.hasOwnProperty.call(m, "units_star")) w.uint32(34).string(m.units_star);
      return w;
    };
    /**
     * Decodes a RespMatLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespMatLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespMatLearningProgress} RespMatLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespMatLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespMatLearningProgress();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.mat_id = r.int64();
            break;

          case 2:
            if (!(m.mat_star && m.mat_star.length)) m.mat_star = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.mat_star.push(r.int64());
              }
            } else m.mat_star.push(r.int64());

            break;

          case 3:
            m.grades_star = r.string();
            break;

          case 4:
            m.units_star = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespMatLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespMatLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespMatLearningProgress} RespMatLearningProgress
     */


    RespMatLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespMatLearningProgress) return d;
      var m = new $root.farm.RespMatLearningProgress();

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      if (d.mat_star) {
        if (!Array.isArray(d.mat_star)) throw TypeError(".farm.RespMatLearningProgress.mat_star: array expected");
        m.mat_star = [];

        for (var i = 0; i < d.mat_star.length; ++i) {
          if ($util.Long) (m.mat_star[i] = $util.Long.fromValue(d.mat_star[i])).unsigned = false;else if (typeof d.mat_star[i] === "string") m.mat_star[i] = parseInt(d.mat_star[i], 10);else if (typeof d.mat_star[i] === "number") m.mat_star[i] = d.mat_star[i];else if (typeof d.mat_star[i] === "object") m.mat_star[i] = new $util.LongBits(d.mat_star[i].low >>> 0, d.mat_star[i].high >>> 0).toNumber();
        }
      }

      if (d.grades_star != null) {
        m.grades_star = String(d.grades_star);
      }

      if (d.units_star != null) {
        m.units_star = String(d.units_star);
      }

      return m;
    };
    /**
     * Creates a plain object from a RespMatLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespMatLearningProgress
     * @static
     * @param {farm.RespMatLearningProgress} m RespMatLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespMatLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.mat_star = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;

        d.grades_star = "";
        d.units_star = "";
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      if (m.mat_star && m.mat_star.length) {
        d.mat_star = [];

        for (var j = 0; j < m.mat_star.length; ++j) {
          if (typeof m.mat_star[j] === "number") d.mat_star[j] = o.longs === String ? String(m.mat_star[j]) : m.mat_star[j];else d.mat_star[j] = o.longs === String ? $util.Long.prototype.toString.call(m.mat_star[j]) : o.longs === Number ? new $util.LongBits(m.mat_star[j].low >>> 0, m.mat_star[j].high >>> 0).toNumber() : m.mat_star[j];
        }
      }

      if (m.grades_star != null && m.hasOwnProperty("grades_star")) {
        d.grades_star = m.grades_star;
      }

      if (m.units_star != null && m.hasOwnProperty("units_star")) {
        d.units_star = m.units_star;
      }

      return d;
    };
    /**
     * Converts this RespMatLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.RespMatLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespMatLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespMatLearningProgress;
  }();

  farm.ReqStudyUpload = function () {
    /**
     * Properties of a ReqStudyUpload.
     * @memberof farm
     * @interface IReqStudyUpload
     * @property {string|null} [user_id] ReqStudyUpload user_id
     * @property {number|Long|null} [is_skip] ReqStudyUpload is_skip
     * @property {Array.<farm.IStudyResult>|null} [study_result] ReqStudyUpload study_result
     */

    /**
     * Constructs a new ReqStudyUpload.
     * @memberof farm
     * @classdesc Represents a ReqStudyUpload.
     * @implements IReqStudyUpload
     * @constructor
     * @param {farm.IReqStudyUpload=} [p] Properties to set
     */
    function ReqStudyUpload(p) {
      this.study_result = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqStudyUpload user_id.
     * @member {string} user_id
     * @memberof farm.ReqStudyUpload
     * @instance
     */


    ReqStudyUpload.prototype.user_id = "";
    /**
     * ReqStudyUpload is_skip.
     * @member {number|Long} is_skip
     * @memberof farm.ReqStudyUpload
     * @instance
     */

    ReqStudyUpload.prototype.is_skip = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqStudyUpload study_result.
     * @member {Array.<farm.IStudyResult>} study_result
     * @memberof farm.ReqStudyUpload
     * @instance
     */

    ReqStudyUpload.prototype.study_result = $util.emptyArray;
    /**
     * Encodes the specified ReqStudyUpload message. Does not implicitly {@link farm.ReqStudyUpload.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqStudyUpload
     * @static
     * @param {farm.IReqStudyUpload} m ReqStudyUpload message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqStudyUpload.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.user_id != null && Object.hasOwnProperty.call(m, "user_id")) w.uint32(10).string(m.user_id);
      if (m.is_skip != null && Object.hasOwnProperty.call(m, "is_skip")) w.uint32(16).int64(m.is_skip);

      if (m.study_result != null && m.study_result.length) {
        for (var i = 0; i < m.study_result.length; ++i) {
          $root.farm.StudyResult.encode(m.study_result[i], w.uint32(26).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a ReqStudyUpload message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqStudyUpload
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqStudyUpload} ReqStudyUpload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqStudyUpload.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqStudyUpload();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.user_id = r.string();
            break;

          case 2:
            m.is_skip = r.int64();
            break;

          case 3:
            if (!(m.study_result && m.study_result.length)) m.study_result = [];
            m.study_result.push($root.farm.StudyResult.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqStudyUpload message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqStudyUpload
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqStudyUpload} ReqStudyUpload
     */


    ReqStudyUpload.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqStudyUpload) return d;
      var m = new $root.farm.ReqStudyUpload();

      if (d.user_id != null) {
        m.user_id = String(d.user_id);
      }

      if (d.is_skip != null) {
        if ($util.Long) (m.is_skip = $util.Long.fromValue(d.is_skip)).unsigned = false;else if (typeof d.is_skip === "string") m.is_skip = parseInt(d.is_skip, 10);else if (typeof d.is_skip === "number") m.is_skip = d.is_skip;else if (typeof d.is_skip === "object") m.is_skip = new $util.LongBits(d.is_skip.low >>> 0, d.is_skip.high >>> 0).toNumber();
      }

      if (d.study_result) {
        if (!Array.isArray(d.study_result)) throw TypeError(".farm.ReqStudyUpload.study_result: array expected");
        m.study_result = [];

        for (var i = 0; i < d.study_result.length; ++i) {
          if (typeof d.study_result[i] !== "object") throw TypeError(".farm.ReqStudyUpload.study_result: object expected");
          m.study_result[i] = $root.farm.StudyResult.fromObject(d.study_result[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqStudyUpload message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqStudyUpload
     * @static
     * @param {farm.ReqStudyUpload} m ReqStudyUpload
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqStudyUpload.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.study_result = [];
      }

      if (o.defaults) {
        d.user_id = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.is_skip = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.is_skip = o.longs === String ? "0" : 0;
      }

      if (m.user_id != null && m.hasOwnProperty("user_id")) {
        d.user_id = m.user_id;
      }

      if (m.is_skip != null && m.hasOwnProperty("is_skip")) {
        if (typeof m.is_skip === "number") d.is_skip = o.longs === String ? String(m.is_skip) : m.is_skip;else d.is_skip = o.longs === String ? $util.Long.prototype.toString.call(m.is_skip) : o.longs === Number ? new $util.LongBits(m.is_skip.low >>> 0, m.is_skip.high >>> 0).toNumber() : m.is_skip;
      }

      if (m.study_result && m.study_result.length) {
        d.study_result = [];

        for (var j = 0; j < m.study_result.length; ++j) {
          d.study_result[j] = $root.farm.StudyResult.toObject(m.study_result[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this ReqStudyUpload to JSON.
     * @function toJSON
     * @memberof farm.ReqStudyUpload
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqStudyUpload.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqStudyUpload;
  }();

  farm.RespStudyUpload = function () {
    /**
     * Properties of a RespStudyUpload.
     * @memberof farm
     * @interface IRespStudyUpload
     * @property {Array.<farm.IRes>|null} [res_list] RespStudyUpload res_list
     */

    /**
     * Constructs a new RespStudyUpload.
     * @memberof farm
     * @classdesc Represents a RespStudyUpload.
     * @implements IRespStudyUpload
     * @constructor
     * @param {farm.IRespStudyUpload=} [p] Properties to set
     */
    function RespStudyUpload(p) {
      this.res_list = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespStudyUpload res_list.
     * @member {Array.<farm.IRes>} res_list
     * @memberof farm.RespStudyUpload
     * @instance
     */


    RespStudyUpload.prototype.res_list = $util.emptyArray;
    /**
     * Encodes the specified RespStudyUpload message. Does not implicitly {@link farm.RespStudyUpload.verify|verify} messages.
     * @function encode
     * @memberof farm.RespStudyUpload
     * @static
     * @param {farm.IRespStudyUpload} m RespStudyUpload message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespStudyUpload.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.res_list != null && m.res_list.length) {
        for (var i = 0; i < m.res_list.length; ++i) {
          $root.farm.Res.encode(m.res_list[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespStudyUpload message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespStudyUpload
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespStudyUpload} RespStudyUpload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespStudyUpload.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespStudyUpload();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.res_list && m.res_list.length)) m.res_list = [];
            m.res_list.push($root.farm.Res.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespStudyUpload message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespStudyUpload
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespStudyUpload} RespStudyUpload
     */


    RespStudyUpload.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespStudyUpload) return d;
      var m = new $root.farm.RespStudyUpload();

      if (d.res_list) {
        if (!Array.isArray(d.res_list)) throw TypeError(".farm.RespStudyUpload.res_list: array expected");
        m.res_list = [];

        for (var i = 0; i < d.res_list.length; ++i) {
          if (typeof d.res_list[i] !== "object") throw TypeError(".farm.RespStudyUpload.res_list: object expected");
          m.res_list[i] = $root.farm.Res.fromObject(d.res_list[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespStudyUpload message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespStudyUpload
     * @static
     * @param {farm.RespStudyUpload} m RespStudyUpload
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespStudyUpload.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.res_list = [];
      }

      if (m.res_list && m.res_list.length) {
        d.res_list = [];

        for (var j = 0; j < m.res_list.length; ++j) {
          d.res_list[j] = $root.farm.Res.toObject(m.res_list[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespStudyUpload to JSON.
     * @function toJSON
     * @memberof farm.RespStudyUpload
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespStudyUpload.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespStudyUpload;
  }();

  farm.StudyResult = function () {
    /**
     * Properties of a StudyResult.
     * @memberof farm
     * @interface IStudyResult
     * @property {number|Long|null} [item_id] StudyResult item_id
     * @property {number|Long|null} [result] StudyResult result
     * @property {number|Long|null} [res_type] StudyResult res_type
     * @property {number|Long|null} [res_num] StudyResult res_num
     */

    /**
     * Constructs a new StudyResult.
     * @memberof farm
     * @classdesc Represents a StudyResult.
     * @implements IStudyResult
     * @constructor
     * @param {farm.IStudyResult=} [p] Properties to set
     */
    function StudyResult(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * StudyResult item_id.
     * @member {number|Long} item_id
     * @memberof farm.StudyResult
     * @instance
     */


    StudyResult.prototype.item_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * StudyResult result.
     * @member {number|Long} result
     * @memberof farm.StudyResult
     * @instance
     */

    StudyResult.prototype.result = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * StudyResult res_type.
     * @member {number|Long} res_type
     * @memberof farm.StudyResult
     * @instance
     */

    StudyResult.prototype.res_type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * StudyResult res_num.
     * @member {number|Long} res_num
     * @memberof farm.StudyResult
     * @instance
     */

    StudyResult.prototype.res_num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified StudyResult message. Does not implicitly {@link farm.StudyResult.verify|verify} messages.
     * @function encode
     * @memberof farm.StudyResult
     * @static
     * @param {farm.IStudyResult} m StudyResult message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    StudyResult.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.item_id != null && Object.hasOwnProperty.call(m, "item_id")) w.uint32(8).int64(m.item_id);
      if (m.result != null && Object.hasOwnProperty.call(m, "result")) w.uint32(16).int64(m.result);
      if (m.res_type != null && Object.hasOwnProperty.call(m, "res_type")) w.uint32(24).int64(m.res_type);
      if (m.res_num != null && Object.hasOwnProperty.call(m, "res_num")) w.uint32(32).int64(m.res_num);
      return w;
    };
    /**
     * Decodes a StudyResult message from the specified reader or buffer.
     * @function decode
     * @memberof farm.StudyResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.StudyResult} StudyResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    StudyResult.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.StudyResult();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.item_id = r.int64();
            break;

          case 2:
            m.result = r.int64();
            break;

          case 3:
            m.res_type = r.int64();
            break;

          case 4:
            m.res_num = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a StudyResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.StudyResult
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.StudyResult} StudyResult
     */


    StudyResult.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.StudyResult) return d;
      var m = new $root.farm.StudyResult();

      if (d.item_id != null) {
        if ($util.Long) (m.item_id = $util.Long.fromValue(d.item_id)).unsigned = false;else if (typeof d.item_id === "string") m.item_id = parseInt(d.item_id, 10);else if (typeof d.item_id === "number") m.item_id = d.item_id;else if (typeof d.item_id === "object") m.item_id = new $util.LongBits(d.item_id.low >>> 0, d.item_id.high >>> 0).toNumber();
      }

      if (d.result != null) {
        if ($util.Long) (m.result = $util.Long.fromValue(d.result)).unsigned = false;else if (typeof d.result === "string") m.result = parseInt(d.result, 10);else if (typeof d.result === "number") m.result = d.result;else if (typeof d.result === "object") m.result = new $util.LongBits(d.result.low >>> 0, d.result.high >>> 0).toNumber();
      }

      if (d.res_type != null) {
        if ($util.Long) (m.res_type = $util.Long.fromValue(d.res_type)).unsigned = false;else if (typeof d.res_type === "string") m.res_type = parseInt(d.res_type, 10);else if (typeof d.res_type === "number") m.res_type = d.res_type;else if (typeof d.res_type === "object") m.res_type = new $util.LongBits(d.res_type.low >>> 0, d.res_type.high >>> 0).toNumber();
      }

      if (d.res_num != null) {
        if ($util.Long) (m.res_num = $util.Long.fromValue(d.res_num)).unsigned = false;else if (typeof d.res_num === "string") m.res_num = parseInt(d.res_num, 10);else if (typeof d.res_num === "number") m.res_num = d.res_num;else if (typeof d.res_num === "object") m.res_num = new $util.LongBits(d.res_num.low >>> 0, d.res_num.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a StudyResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.StudyResult
     * @static
     * @param {farm.StudyResult} m StudyResult
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    StudyResult.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.item_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.item_id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.result = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.result = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.res_type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.res_type = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.res_num = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.res_num = o.longs === String ? "0" : 0;
      }

      if (m.item_id != null && m.hasOwnProperty("item_id")) {
        if (typeof m.item_id === "number") d.item_id = o.longs === String ? String(m.item_id) : m.item_id;else d.item_id = o.longs === String ? $util.Long.prototype.toString.call(m.item_id) : o.longs === Number ? new $util.LongBits(m.item_id.low >>> 0, m.item_id.high >>> 0).toNumber() : m.item_id;
      }

      if (m.result != null && m.hasOwnProperty("result")) {
        if (typeof m.result === "number") d.result = o.longs === String ? String(m.result) : m.result;else d.result = o.longs === String ? $util.Long.prototype.toString.call(m.result) : o.longs === Number ? new $util.LongBits(m.result.low >>> 0, m.result.high >>> 0).toNumber() : m.result;
      }

      if (m.res_type != null && m.hasOwnProperty("res_type")) {
        if (typeof m.res_type === "number") d.res_type = o.longs === String ? String(m.res_type) : m.res_type;else d.res_type = o.longs === String ? $util.Long.prototype.toString.call(m.res_type) : o.longs === Number ? new $util.LongBits(m.res_type.low >>> 0, m.res_type.high >>> 0).toNumber() : m.res_type;
      }

      if (m.res_num != null && m.hasOwnProperty("res_num")) {
        if (typeof m.res_num === "number") d.res_num = o.longs === String ? String(m.res_num) : m.res_num;else d.res_num = o.longs === String ? $util.Long.prototype.toString.call(m.res_num) : o.longs === Number ? new $util.LongBits(m.res_num.low >>> 0, m.res_num.high >>> 0).toNumber() : m.res_num;
      }

      return d;
    };
    /**
     * Converts this StudyResult to JSON.
     * @function toJSON
     * @memberof farm.StudyResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    StudyResult.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return StudyResult;
  }();

  farm.Res = function () {
    /**
     * Properties of a Res.
     * @memberof farm
     * @interface IRes
     * @property {number|Long|null} [res_type] Res res_type
     * @property {number|Long|null} [res_num] Res res_num
     */

    /**
     * Constructs a new Res.
     * @memberof farm
     * @classdesc Represents a Res.
     * @implements IRes
     * @constructor
     * @param {farm.IRes=} [p] Properties to set
     */
    function Res(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Res res_type.
     * @member {number|Long} res_type
     * @memberof farm.Res
     * @instance
     */


    Res.prototype.res_type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Res res_num.
     * @member {number|Long} res_num
     * @memberof farm.Res
     * @instance
     */

    Res.prototype.res_num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified Res message. Does not implicitly {@link farm.Res.verify|verify} messages.
     * @function encode
     * @memberof farm.Res
     * @static
     * @param {farm.IRes} m Res message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Res.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.res_type != null && Object.hasOwnProperty.call(m, "res_type")) w.uint32(8).int64(m.res_type);
      if (m.res_num != null && Object.hasOwnProperty.call(m, "res_num")) w.uint32(16).int64(m.res_num);
      return w;
    };
    /**
     * Decodes a Res message from the specified reader or buffer.
     * @function decode
     * @memberof farm.Res
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.Res} Res
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Res.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.Res();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.res_type = r.int64();
            break;

          case 2:
            m.res_num = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a Res message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.Res
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.Res} Res
     */


    Res.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.Res) return d;
      var m = new $root.farm.Res();

      if (d.res_type != null) {
        if ($util.Long) (m.res_type = $util.Long.fromValue(d.res_type)).unsigned = false;else if (typeof d.res_type === "string") m.res_type = parseInt(d.res_type, 10);else if (typeof d.res_type === "number") m.res_type = d.res_type;else if (typeof d.res_type === "object") m.res_type = new $util.LongBits(d.res_type.low >>> 0, d.res_type.high >>> 0).toNumber();
      }

      if (d.res_num != null) {
        if ($util.Long) (m.res_num = $util.Long.fromValue(d.res_num)).unsigned = false;else if (typeof d.res_num === "string") m.res_num = parseInt(d.res_num, 10);else if (typeof d.res_num === "number") m.res_num = d.res_num;else if (typeof d.res_num === "object") m.res_num = new $util.LongBits(d.res_num.low >>> 0, d.res_num.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a Res message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.Res
     * @static
     * @param {farm.Res} m Res
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Res.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.res_type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.res_type = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.res_num = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.res_num = o.longs === String ? "0" : 0;
      }

      if (m.res_type != null && m.hasOwnProperty("res_type")) {
        if (typeof m.res_type === "number") d.res_type = o.longs === String ? String(m.res_type) : m.res_type;else d.res_type = o.longs === String ? $util.Long.prototype.toString.call(m.res_type) : o.longs === Number ? new $util.LongBits(m.res_type.low >>> 0, m.res_type.high >>> 0).toNumber() : m.res_type;
      }

      if (m.res_num != null && m.hasOwnProperty("res_num")) {
        if (typeof m.res_num === "number") d.res_num = o.longs === String ? String(m.res_num) : m.res_num;else d.res_num = o.longs === String ? $util.Long.prototype.toString.call(m.res_num) : o.longs === Number ? new $util.LongBits(m.res_num.low >>> 0, m.res_num.high >>> 0).toNumber() : m.res_num;
      }

      return d;
    };
    /**
     * Converts this Res to JSON.
     * @function toJSON
     * @memberof farm.Res
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Res.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Res;
  }();

  farm.ReqGameUpload = function () {
    /**
     * Properties of a ReqGameUpload.
     * @memberof farm
     * @interface IReqGameUpload
     * @property {string|null} [user_id] ReqGameUpload user_id
     * @property {number|Long|null} [start_time] ReqGameUpload start_time
     * @property {number|Long|null} [end_time] ReqGameUpload end_time
     * @property {Array.<farm.IGameResult>|null} [game_result] ReqGameUpload game_result
     * @property {number|null} [mode] ReqGameUpload mode
     * @property {string|null} [mode_param] ReqGameUpload mode_param
     * @property {number|null} [game_type] ReqGameUpload game_type
     */

    /**
     * Constructs a new ReqGameUpload.
     * @memberof farm
     * @classdesc Represents a ReqGameUpload.
     * @implements IReqGameUpload
     * @constructor
     * @param {farm.IReqGameUpload=} [p] Properties to set
     */
    function ReqGameUpload(p) {
      this.game_result = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqGameUpload user_id.
     * @member {string} user_id
     * @memberof farm.ReqGameUpload
     * @instance
     */


    ReqGameUpload.prototype.user_id = "";
    /**
     * ReqGameUpload start_time.
     * @member {number|Long} start_time
     * @memberof farm.ReqGameUpload
     * @instance
     */

    ReqGameUpload.prototype.start_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqGameUpload end_time.
     * @member {number|Long} end_time
     * @memberof farm.ReqGameUpload
     * @instance
     */

    ReqGameUpload.prototype.end_time = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqGameUpload game_result.
     * @member {Array.<farm.IGameResult>} game_result
     * @memberof farm.ReqGameUpload
     * @instance
     */

    ReqGameUpload.prototype.game_result = $util.emptyArray;
    /**
     * ReqGameUpload mode.
     * @member {number} mode
     * @memberof farm.ReqGameUpload
     * @instance
     */

    ReqGameUpload.prototype.mode = 0;
    /**
     * ReqGameUpload mode_param.
     * @member {string} mode_param
     * @memberof farm.ReqGameUpload
     * @instance
     */

    ReqGameUpload.prototype.mode_param = "";
    /**
     * ReqGameUpload game_type.
     * @member {number} game_type
     * @memberof farm.ReqGameUpload
     * @instance
     */

    ReqGameUpload.prototype.game_type = 0;
    /**
     * Encodes the specified ReqGameUpload message. Does not implicitly {@link farm.ReqGameUpload.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqGameUpload
     * @static
     * @param {farm.IReqGameUpload} m ReqGameUpload message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqGameUpload.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.user_id != null && Object.hasOwnProperty.call(m, "user_id")) w.uint32(10).string(m.user_id);
      if (m.start_time != null && Object.hasOwnProperty.call(m, "start_time")) w.uint32(16).int64(m.start_time);
      if (m.end_time != null && Object.hasOwnProperty.call(m, "end_time")) w.uint32(24).int64(m.end_time);

      if (m.game_result != null && m.game_result.length) {
        for (var i = 0; i < m.game_result.length; ++i) {
          $root.farm.GameResult.encode(m.game_result[i], w.uint32(34).fork()).ldelim();
        }
      }

      if (m.mode != null && Object.hasOwnProperty.call(m, "mode")) w.uint32(40).int32(m.mode);
      if (m.mode_param != null && Object.hasOwnProperty.call(m, "mode_param")) w.uint32(50).string(m.mode_param);
      if (m.game_type != null && Object.hasOwnProperty.call(m, "game_type")) w.uint32(56).int32(m.game_type);
      return w;
    };
    /**
     * Decodes a ReqGameUpload message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqGameUpload
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqGameUpload} ReqGameUpload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqGameUpload.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqGameUpload();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.user_id = r.string();
            break;

          case 2:
            m.start_time = r.int64();
            break;

          case 3:
            m.end_time = r.int64();
            break;

          case 4:
            if (!(m.game_result && m.game_result.length)) m.game_result = [];
            m.game_result.push($root.farm.GameResult.decode(r, r.uint32()));
            break;

          case 5:
            m.mode = r.int32();
            break;

          case 6:
            m.mode_param = r.string();
            break;

          case 7:
            m.game_type = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqGameUpload message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqGameUpload
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqGameUpload} ReqGameUpload
     */


    ReqGameUpload.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqGameUpload) return d;
      var m = new $root.farm.ReqGameUpload();

      if (d.user_id != null) {
        m.user_id = String(d.user_id);
      }

      if (d.start_time != null) {
        if ($util.Long) (m.start_time = $util.Long.fromValue(d.start_time)).unsigned = false;else if (typeof d.start_time === "string") m.start_time = parseInt(d.start_time, 10);else if (typeof d.start_time === "number") m.start_time = d.start_time;else if (typeof d.start_time === "object") m.start_time = new $util.LongBits(d.start_time.low >>> 0, d.start_time.high >>> 0).toNumber();
      }

      if (d.end_time != null) {
        if ($util.Long) (m.end_time = $util.Long.fromValue(d.end_time)).unsigned = false;else if (typeof d.end_time === "string") m.end_time = parseInt(d.end_time, 10);else if (typeof d.end_time === "number") m.end_time = d.end_time;else if (typeof d.end_time === "object") m.end_time = new $util.LongBits(d.end_time.low >>> 0, d.end_time.high >>> 0).toNumber();
      }

      if (d.game_result) {
        if (!Array.isArray(d.game_result)) throw TypeError(".farm.ReqGameUpload.game_result: array expected");
        m.game_result = [];

        for (var i = 0; i < d.game_result.length; ++i) {
          if (typeof d.game_result[i] !== "object") throw TypeError(".farm.ReqGameUpload.game_result: object expected");
          m.game_result[i] = $root.farm.GameResult.fromObject(d.game_result[i]);
        }
      }

      if (d.mode != null) {
        m.mode = d.mode | 0;
      }

      if (d.mode_param != null) {
        m.mode_param = String(d.mode_param);
      }

      if (d.game_type != null) {
        m.game_type = d.game_type | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqGameUpload message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqGameUpload
     * @static
     * @param {farm.ReqGameUpload} m ReqGameUpload
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqGameUpload.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.game_result = [];
      }

      if (o.defaults) {
        d.user_id = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.start_time = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.start_time = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.end_time = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.end_time = o.longs === String ? "0" : 0;

        d.mode = 0;
        d.mode_param = "";
        d.game_type = 0;
      }

      if (m.user_id != null && m.hasOwnProperty("user_id")) {
        d.user_id = m.user_id;
      }

      if (m.start_time != null && m.hasOwnProperty("start_time")) {
        if (typeof m.start_time === "number") d.start_time = o.longs === String ? String(m.start_time) : m.start_time;else d.start_time = o.longs === String ? $util.Long.prototype.toString.call(m.start_time) : o.longs === Number ? new $util.LongBits(m.start_time.low >>> 0, m.start_time.high >>> 0).toNumber() : m.start_time;
      }

      if (m.end_time != null && m.hasOwnProperty("end_time")) {
        if (typeof m.end_time === "number") d.end_time = o.longs === String ? String(m.end_time) : m.end_time;else d.end_time = o.longs === String ? $util.Long.prototype.toString.call(m.end_time) : o.longs === Number ? new $util.LongBits(m.end_time.low >>> 0, m.end_time.high >>> 0).toNumber() : m.end_time;
      }

      if (m.game_result && m.game_result.length) {
        d.game_result = [];

        for (var j = 0; j < m.game_result.length; ++j) {
          d.game_result[j] = $root.farm.GameResult.toObject(m.game_result[j], o);
        }
      }

      if (m.mode != null && m.hasOwnProperty("mode")) {
        d.mode = m.mode;
      }

      if (m.mode_param != null && m.hasOwnProperty("mode_param")) {
        d.mode_param = m.mode_param;
      }

      if (m.game_type != null && m.hasOwnProperty("game_type")) {
        d.game_type = m.game_type;
      }

      return d;
    };
    /**
     * Converts this ReqGameUpload to JSON.
     * @function toJSON
     * @memberof farm.ReqGameUpload
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqGameUpload.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqGameUpload;
  }();

  farm.RespGameUpload = function () {
    /**
     * Properties of a RespGameUpload.
     * @memberof farm
     * @interface IRespGameUpload
     * @property {Array.<farm.IRes>|null} [res_list] RespGameUpload res_list
     * @property {farm.IGameRecord|null} [game_record] RespGameUpload game_record
     * @property {number|null} [mode] RespGameUpload mode
     * @property {farm.IModeResult|null} [mode_result] RespGameUpload mode_result
     * @property {Array.<string>|null} [tkfight_message] RespGameUpload tkfight_message
     * @property {Array.<number|Long>|null} [tast_completed] RespGameUpload tast_completed
     * @property {number|Long|null} [play_num] RespGameUpload play_num
     */

    /**
     * Constructs a new RespGameUpload.
     * @memberof farm
     * @classdesc Represents a RespGameUpload.
     * @implements IRespGameUpload
     * @constructor
     * @param {farm.IRespGameUpload=} [p] Properties to set
     */
    function RespGameUpload(p) {
      this.res_list = [];
      this.tkfight_message = [];
      this.tast_completed = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespGameUpload res_list.
     * @member {Array.<farm.IRes>} res_list
     * @memberof farm.RespGameUpload
     * @instance
     */


    RespGameUpload.prototype.res_list = $util.emptyArray;
    /**
     * RespGameUpload game_record.
     * @member {farm.IGameRecord|null|undefined} game_record
     * @memberof farm.RespGameUpload
     * @instance
     */

    RespGameUpload.prototype.game_record = null;
    /**
     * RespGameUpload mode.
     * @member {number} mode
     * @memberof farm.RespGameUpload
     * @instance
     */

    RespGameUpload.prototype.mode = 0;
    /**
     * RespGameUpload mode_result.
     * @member {farm.IModeResult|null|undefined} mode_result
     * @memberof farm.RespGameUpload
     * @instance
     */

    RespGameUpload.prototype.mode_result = null;
    /**
     * RespGameUpload tkfight_message.
     * @member {Array.<string>} tkfight_message
     * @memberof farm.RespGameUpload
     * @instance
     */

    RespGameUpload.prototype.tkfight_message = $util.emptyArray;
    /**
     * RespGameUpload tast_completed.
     * @member {Array.<number|Long>} tast_completed
     * @memberof farm.RespGameUpload
     * @instance
     */

    RespGameUpload.prototype.tast_completed = $util.emptyArray;
    /**
     * RespGameUpload play_num.
     * @member {number|Long} play_num
     * @memberof farm.RespGameUpload
     * @instance
     */

    RespGameUpload.prototype.play_num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified RespGameUpload message. Does not implicitly {@link farm.RespGameUpload.verify|verify} messages.
     * @function encode
     * @memberof farm.RespGameUpload
     * @static
     * @param {farm.IRespGameUpload} m RespGameUpload message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespGameUpload.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.res_list != null && m.res_list.length) {
        for (var i = 0; i < m.res_list.length; ++i) {
          $root.farm.Res.encode(m.res_list[i], w.uint32(10).fork()).ldelim();
        }
      }

      if (m.game_record != null && Object.hasOwnProperty.call(m, "game_record")) $root.farm.GameRecord.encode(m.game_record, w.uint32(18).fork()).ldelim();
      if (m.mode != null && Object.hasOwnProperty.call(m, "mode")) w.uint32(24).int32(m.mode);
      if (m.mode_result != null && Object.hasOwnProperty.call(m, "mode_result")) $root.farm.ModeResult.encode(m.mode_result, w.uint32(34).fork()).ldelim();

      if (m.tkfight_message != null && m.tkfight_message.length) {
        for (var i = 0; i < m.tkfight_message.length; ++i) {
          w.uint32(42).string(m.tkfight_message[i]);
        }
      }

      if (m.tast_completed != null && m.tast_completed.length) {
        w.uint32(50).fork();

        for (var i = 0; i < m.tast_completed.length; ++i) {
          w.int64(m.tast_completed[i]);
        }

        w.ldelim();
      }

      if (m.play_num != null && Object.hasOwnProperty.call(m, "play_num")) w.uint32(56).int64(m.play_num);
      return w;
    };
    /**
     * Decodes a RespGameUpload message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespGameUpload
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespGameUpload} RespGameUpload
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespGameUpload.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespGameUpload();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.res_list && m.res_list.length)) m.res_list = [];
            m.res_list.push($root.farm.Res.decode(r, r.uint32()));
            break;

          case 2:
            m.game_record = $root.farm.GameRecord.decode(r, r.uint32());
            break;

          case 3:
            m.mode = r.int32();
            break;

          case 4:
            m.mode_result = $root.farm.ModeResult.decode(r, r.uint32());
            break;

          case 5:
            if (!(m.tkfight_message && m.tkfight_message.length)) m.tkfight_message = [];
            m.tkfight_message.push(r.string());
            break;

          case 6:
            if (!(m.tast_completed && m.tast_completed.length)) m.tast_completed = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.tast_completed.push(r.int64());
              }
            } else m.tast_completed.push(r.int64());

            break;

          case 7:
            m.play_num = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespGameUpload message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespGameUpload
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespGameUpload} RespGameUpload
     */


    RespGameUpload.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespGameUpload) return d;
      var m = new $root.farm.RespGameUpload();

      if (d.res_list) {
        if (!Array.isArray(d.res_list)) throw TypeError(".farm.RespGameUpload.res_list: array expected");
        m.res_list = [];

        for (var i = 0; i < d.res_list.length; ++i) {
          if (typeof d.res_list[i] !== "object") throw TypeError(".farm.RespGameUpload.res_list: object expected");
          m.res_list[i] = $root.farm.Res.fromObject(d.res_list[i]);
        }
      }

      if (d.game_record != null) {
        if (typeof d.game_record !== "object") throw TypeError(".farm.RespGameUpload.game_record: object expected");
        m.game_record = $root.farm.GameRecord.fromObject(d.game_record);
      }

      if (d.mode != null) {
        m.mode = d.mode | 0;
      }

      if (d.mode_result != null) {
        if (typeof d.mode_result !== "object") throw TypeError(".farm.RespGameUpload.mode_result: object expected");
        m.mode_result = $root.farm.ModeResult.fromObject(d.mode_result);
      }

      if (d.tkfight_message) {
        if (!Array.isArray(d.tkfight_message)) throw TypeError(".farm.RespGameUpload.tkfight_message: array expected");
        m.tkfight_message = [];

        for (var i = 0; i < d.tkfight_message.length; ++i) {
          m.tkfight_message[i] = String(d.tkfight_message[i]);
        }
      }

      if (d.tast_completed) {
        if (!Array.isArray(d.tast_completed)) throw TypeError(".farm.RespGameUpload.tast_completed: array expected");
        m.tast_completed = [];

        for (var i = 0; i < d.tast_completed.length; ++i) {
          if ($util.Long) (m.tast_completed[i] = $util.Long.fromValue(d.tast_completed[i])).unsigned = false;else if (typeof d.tast_completed[i] === "string") m.tast_completed[i] = parseInt(d.tast_completed[i], 10);else if (typeof d.tast_completed[i] === "number") m.tast_completed[i] = d.tast_completed[i];else if (typeof d.tast_completed[i] === "object") m.tast_completed[i] = new $util.LongBits(d.tast_completed[i].low >>> 0, d.tast_completed[i].high >>> 0).toNumber();
        }
      }

      if (d.play_num != null) {
        if ($util.Long) (m.play_num = $util.Long.fromValue(d.play_num)).unsigned = false;else if (typeof d.play_num === "string") m.play_num = parseInt(d.play_num, 10);else if (typeof d.play_num === "number") m.play_num = d.play_num;else if (typeof d.play_num === "object") m.play_num = new $util.LongBits(d.play_num.low >>> 0, d.play_num.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a RespGameUpload message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespGameUpload
     * @static
     * @param {farm.RespGameUpload} m RespGameUpload
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespGameUpload.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.res_list = [];
        d.tkfight_message = [];
        d.tast_completed = [];
      }

      if (o.defaults) {
        d.game_record = null;
        d.mode = 0;
        d.mode_result = null;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.play_num = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.play_num = o.longs === String ? "0" : 0;
      }

      if (m.res_list && m.res_list.length) {
        d.res_list = [];

        for (var j = 0; j < m.res_list.length; ++j) {
          d.res_list[j] = $root.farm.Res.toObject(m.res_list[j], o);
        }
      }

      if (m.game_record != null && m.hasOwnProperty("game_record")) {
        d.game_record = $root.farm.GameRecord.toObject(m.game_record, o);
      }

      if (m.mode != null && m.hasOwnProperty("mode")) {
        d.mode = m.mode;
      }

      if (m.mode_result != null && m.hasOwnProperty("mode_result")) {
        d.mode_result = $root.farm.ModeResult.toObject(m.mode_result, o);
      }

      if (m.tkfight_message && m.tkfight_message.length) {
        d.tkfight_message = [];

        for (var j = 0; j < m.tkfight_message.length; ++j) {
          d.tkfight_message[j] = m.tkfight_message[j];
        }
      }

      if (m.tast_completed && m.tast_completed.length) {
        d.tast_completed = [];

        for (var j = 0; j < m.tast_completed.length; ++j) {
          if (typeof m.tast_completed[j] === "number") d.tast_completed[j] = o.longs === String ? String(m.tast_completed[j]) : m.tast_completed[j];else d.tast_completed[j] = o.longs === String ? $util.Long.prototype.toString.call(m.tast_completed[j]) : o.longs === Number ? new $util.LongBits(m.tast_completed[j].low >>> 0, m.tast_completed[j].high >>> 0).toNumber() : m.tast_completed[j];
        }
      }

      if (m.play_num != null && m.hasOwnProperty("play_num")) {
        if (typeof m.play_num === "number") d.play_num = o.longs === String ? String(m.play_num) : m.play_num;else d.play_num = o.longs === String ? $util.Long.prototype.toString.call(m.play_num) : o.longs === Number ? new $util.LongBits(m.play_num.low >>> 0, m.play_num.high >>> 0).toNumber() : m.play_num;
      }

      return d;
    };
    /**
     * Converts this RespGameUpload to JSON.
     * @function toJSON
     * @memberof farm.RespGameUpload
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespGameUpload.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespGameUpload;
  }();

  farm.GameResult = function () {
    /**
     * Properties of a GameResult.
     * @memberof farm
     * @interface IGameResult
     * @property {number|Long|null} [item_id] GameResult item_id
     * @property {number|Long|null} [result] GameResult result
     * @property {number|Long|null} [res_type] GameResult res_type
     * @property {number|Long|null} [res_num] GameResult res_num
     * @property {number|Long|null} [catch_num] GameResult catch_num
     * @property {number|null} [react_time] GameResult react_time
     * @property {number|Long|null} [is_crit] GameResult is_crit
     */

    /**
     * Constructs a new GameResult.
     * @memberof farm
     * @classdesc Represents a GameResult.
     * @implements IGameResult
     * @constructor
     * @param {farm.IGameResult=} [p] Properties to set
     */
    function GameResult(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * GameResult item_id.
     * @member {number|Long} item_id
     * @memberof farm.GameResult
     * @instance
     */


    GameResult.prototype.item_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameResult result.
     * @member {number|Long} result
     * @memberof farm.GameResult
     * @instance
     */

    GameResult.prototype.result = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameResult res_type.
     * @member {number|Long} res_type
     * @memberof farm.GameResult
     * @instance
     */

    GameResult.prototype.res_type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameResult res_num.
     * @member {number|Long} res_num
     * @memberof farm.GameResult
     * @instance
     */

    GameResult.prototype.res_num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameResult catch_num.
     * @member {number|Long} catch_num
     * @memberof farm.GameResult
     * @instance
     */

    GameResult.prototype.catch_num = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameResult react_time.
     * @member {number} react_time
     * @memberof farm.GameResult
     * @instance
     */

    GameResult.prototype.react_time = 0;
    /**
     * GameResult is_crit.
     * @member {number|Long} is_crit
     * @memberof farm.GameResult
     * @instance
     */

    GameResult.prototype.is_crit = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified GameResult message. Does not implicitly {@link farm.GameResult.verify|verify} messages.
     * @function encode
     * @memberof farm.GameResult
     * @static
     * @param {farm.IGameResult} m GameResult message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    GameResult.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.item_id != null && Object.hasOwnProperty.call(m, "item_id")) w.uint32(8).int64(m.item_id);
      if (m.result != null && Object.hasOwnProperty.call(m, "result")) w.uint32(16).int64(m.result);
      if (m.res_type != null && Object.hasOwnProperty.call(m, "res_type")) w.uint32(24).int64(m.res_type);
      if (m.res_num != null && Object.hasOwnProperty.call(m, "res_num")) w.uint32(32).int64(m.res_num);
      if (m.catch_num != null && Object.hasOwnProperty.call(m, "catch_num")) w.uint32(40).int64(m.catch_num);
      if (m.react_time != null && Object.hasOwnProperty.call(m, "react_time")) w.uint32(49)["double"](m.react_time);
      if (m.is_crit != null && Object.hasOwnProperty.call(m, "is_crit")) w.uint32(56).int64(m.is_crit);
      return w;
    };
    /**
     * Decodes a GameResult message from the specified reader or buffer.
     * @function decode
     * @memberof farm.GameResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.GameResult} GameResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    GameResult.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.GameResult();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.item_id = r.int64();
            break;

          case 2:
            m.result = r.int64();
            break;

          case 3:
            m.res_type = r.int64();
            break;

          case 4:
            m.res_num = r.int64();
            break;

          case 5:
            m.catch_num = r.int64();
            break;

          case 6:
            m.react_time = r["double"]();
            break;

          case 7:
            m.is_crit = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a GameResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.GameResult
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.GameResult} GameResult
     */


    GameResult.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.GameResult) return d;
      var m = new $root.farm.GameResult();

      if (d.item_id != null) {
        if ($util.Long) (m.item_id = $util.Long.fromValue(d.item_id)).unsigned = false;else if (typeof d.item_id === "string") m.item_id = parseInt(d.item_id, 10);else if (typeof d.item_id === "number") m.item_id = d.item_id;else if (typeof d.item_id === "object") m.item_id = new $util.LongBits(d.item_id.low >>> 0, d.item_id.high >>> 0).toNumber();
      }

      if (d.result != null) {
        if ($util.Long) (m.result = $util.Long.fromValue(d.result)).unsigned = false;else if (typeof d.result === "string") m.result = parseInt(d.result, 10);else if (typeof d.result === "number") m.result = d.result;else if (typeof d.result === "object") m.result = new $util.LongBits(d.result.low >>> 0, d.result.high >>> 0).toNumber();
      }

      if (d.res_type != null) {
        if ($util.Long) (m.res_type = $util.Long.fromValue(d.res_type)).unsigned = false;else if (typeof d.res_type === "string") m.res_type = parseInt(d.res_type, 10);else if (typeof d.res_type === "number") m.res_type = d.res_type;else if (typeof d.res_type === "object") m.res_type = new $util.LongBits(d.res_type.low >>> 0, d.res_type.high >>> 0).toNumber();
      }

      if (d.res_num != null) {
        if ($util.Long) (m.res_num = $util.Long.fromValue(d.res_num)).unsigned = false;else if (typeof d.res_num === "string") m.res_num = parseInt(d.res_num, 10);else if (typeof d.res_num === "number") m.res_num = d.res_num;else if (typeof d.res_num === "object") m.res_num = new $util.LongBits(d.res_num.low >>> 0, d.res_num.high >>> 0).toNumber();
      }

      if (d.catch_num != null) {
        if ($util.Long) (m.catch_num = $util.Long.fromValue(d.catch_num)).unsigned = false;else if (typeof d.catch_num === "string") m.catch_num = parseInt(d.catch_num, 10);else if (typeof d.catch_num === "number") m.catch_num = d.catch_num;else if (typeof d.catch_num === "object") m.catch_num = new $util.LongBits(d.catch_num.low >>> 0, d.catch_num.high >>> 0).toNumber();
      }

      if (d.react_time != null) {
        m.react_time = Number(d.react_time);
      }

      if (d.is_crit != null) {
        if ($util.Long) (m.is_crit = $util.Long.fromValue(d.is_crit)).unsigned = false;else if (typeof d.is_crit === "string") m.is_crit = parseInt(d.is_crit, 10);else if (typeof d.is_crit === "number") m.is_crit = d.is_crit;else if (typeof d.is_crit === "object") m.is_crit = new $util.LongBits(d.is_crit.low >>> 0, d.is_crit.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a GameResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.GameResult
     * @static
     * @param {farm.GameResult} m GameResult
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    GameResult.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.item_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.item_id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.result = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.result = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.res_type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.res_type = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.res_num = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.res_num = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.catch_num = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.catch_num = o.longs === String ? "0" : 0;

        d.react_time = 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.is_crit = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.is_crit = o.longs === String ? "0" : 0;
      }

      if (m.item_id != null && m.hasOwnProperty("item_id")) {
        if (typeof m.item_id === "number") d.item_id = o.longs === String ? String(m.item_id) : m.item_id;else d.item_id = o.longs === String ? $util.Long.prototype.toString.call(m.item_id) : o.longs === Number ? new $util.LongBits(m.item_id.low >>> 0, m.item_id.high >>> 0).toNumber() : m.item_id;
      }

      if (m.result != null && m.hasOwnProperty("result")) {
        if (typeof m.result === "number") d.result = o.longs === String ? String(m.result) : m.result;else d.result = o.longs === String ? $util.Long.prototype.toString.call(m.result) : o.longs === Number ? new $util.LongBits(m.result.low >>> 0, m.result.high >>> 0).toNumber() : m.result;
      }

      if (m.res_type != null && m.hasOwnProperty("res_type")) {
        if (typeof m.res_type === "number") d.res_type = o.longs === String ? String(m.res_type) : m.res_type;else d.res_type = o.longs === String ? $util.Long.prototype.toString.call(m.res_type) : o.longs === Number ? new $util.LongBits(m.res_type.low >>> 0, m.res_type.high >>> 0).toNumber() : m.res_type;
      }

      if (m.res_num != null && m.hasOwnProperty("res_num")) {
        if (typeof m.res_num === "number") d.res_num = o.longs === String ? String(m.res_num) : m.res_num;else d.res_num = o.longs === String ? $util.Long.prototype.toString.call(m.res_num) : o.longs === Number ? new $util.LongBits(m.res_num.low >>> 0, m.res_num.high >>> 0).toNumber() : m.res_num;
      }

      if (m.catch_num != null && m.hasOwnProperty("catch_num")) {
        if (typeof m.catch_num === "number") d.catch_num = o.longs === String ? String(m.catch_num) : m.catch_num;else d.catch_num = o.longs === String ? $util.Long.prototype.toString.call(m.catch_num) : o.longs === Number ? new $util.LongBits(m.catch_num.low >>> 0, m.catch_num.high >>> 0).toNumber() : m.catch_num;
      }

      if (m.react_time != null && m.hasOwnProperty("react_time")) {
        d.react_time = o.json && !isFinite(m.react_time) ? String(m.react_time) : m.react_time;
      }

      if (m.is_crit != null && m.hasOwnProperty("is_crit")) {
        if (typeof m.is_crit === "number") d.is_crit = o.longs === String ? String(m.is_crit) : m.is_crit;else d.is_crit = o.longs === String ? $util.Long.prototype.toString.call(m.is_crit) : o.longs === Number ? new $util.LongBits(m.is_crit.low >>> 0, m.is_crit.high >>> 0).toNumber() : m.is_crit;
      }

      return d;
    };
    /**
     * Converts this GameResult to JSON.
     * @function toJSON
     * @memberof farm.GameResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    GameResult.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GameResult;
  }();

  farm.GameRecord = function () {
    /**
     * Properties of a GameRecord.
     * @memberof farm
     * @interface IGameRecord
     * @property {number|null} [score] GameRecord score
     * @property {Array.<number|Long>|null} [wrong_words] GameRecord wrong_words
     * @property {Array.<number|Long>|null} [unskillful_words] GameRecord unskillful_words
     * @property {Array.<number|Long>|null} [skillful_words] GameRecord skillful_words
     * @property {Array.<number|Long>|null} [superskillful_words] GameRecord superskillful_words
     */

    /**
     * Constructs a new GameRecord.
     * @memberof farm
     * @classdesc Represents a GameRecord.
     * @implements IGameRecord
     * @constructor
     * @param {farm.IGameRecord=} [p] Properties to set
     */
    function GameRecord(p) {
      this.wrong_words = [];
      this.unskillful_words = [];
      this.skillful_words = [];
      this.superskillful_words = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * GameRecord score.
     * @member {number} score
     * @memberof farm.GameRecord
     * @instance
     */


    GameRecord.prototype.score = 0;
    /**
     * GameRecord wrong_words.
     * @member {Array.<number|Long>} wrong_words
     * @memberof farm.GameRecord
     * @instance
     */

    GameRecord.prototype.wrong_words = $util.emptyArray;
    /**
     * GameRecord unskillful_words.
     * @member {Array.<number|Long>} unskillful_words
     * @memberof farm.GameRecord
     * @instance
     */

    GameRecord.prototype.unskillful_words = $util.emptyArray;
    /**
     * GameRecord skillful_words.
     * @member {Array.<number|Long>} skillful_words
     * @memberof farm.GameRecord
     * @instance
     */

    GameRecord.prototype.skillful_words = $util.emptyArray;
    /**
     * GameRecord superskillful_words.
     * @member {Array.<number|Long>} superskillful_words
     * @memberof farm.GameRecord
     * @instance
     */

    GameRecord.prototype.superskillful_words = $util.emptyArray;
    /**
     * Encodes the specified GameRecord message. Does not implicitly {@link farm.GameRecord.verify|verify} messages.
     * @function encode
     * @memberof farm.GameRecord
     * @static
     * @param {farm.IGameRecord} m GameRecord message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    GameRecord.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.score != null && Object.hasOwnProperty.call(m, "score")) w.uint32(13)["float"](m.score);

      if (m.wrong_words != null && m.wrong_words.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.wrong_words.length; ++i) {
          w.int64(m.wrong_words[i]);
        }

        w.ldelim();
      }

      if (m.unskillful_words != null && m.unskillful_words.length) {
        w.uint32(26).fork();

        for (var i = 0; i < m.unskillful_words.length; ++i) {
          w.int64(m.unskillful_words[i]);
        }

        w.ldelim();
      }

      if (m.skillful_words != null && m.skillful_words.length) {
        w.uint32(34).fork();

        for (var i = 0; i < m.skillful_words.length; ++i) {
          w.int64(m.skillful_words[i]);
        }

        w.ldelim();
      }

      if (m.superskillful_words != null && m.superskillful_words.length) {
        w.uint32(42).fork();

        for (var i = 0; i < m.superskillful_words.length; ++i) {
          w.int64(m.superskillful_words[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a GameRecord message from the specified reader or buffer.
     * @function decode
     * @memberof farm.GameRecord
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.GameRecord} GameRecord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    GameRecord.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.GameRecord();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.score = r["float"]();
            break;

          case 2:
            if (!(m.wrong_words && m.wrong_words.length)) m.wrong_words = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.wrong_words.push(r.int64());
              }
            } else m.wrong_words.push(r.int64());

            break;

          case 3:
            if (!(m.unskillful_words && m.unskillful_words.length)) m.unskillful_words = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.unskillful_words.push(r.int64());
              }
            } else m.unskillful_words.push(r.int64());

            break;

          case 4:
            if (!(m.skillful_words && m.skillful_words.length)) m.skillful_words = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.skillful_words.push(r.int64());
              }
            } else m.skillful_words.push(r.int64());

            break;

          case 5:
            if (!(m.superskillful_words && m.superskillful_words.length)) m.superskillful_words = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.superskillful_words.push(r.int64());
              }
            } else m.superskillful_words.push(r.int64());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a GameRecord message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.GameRecord
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.GameRecord} GameRecord
     */


    GameRecord.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.GameRecord) return d;
      var m = new $root.farm.GameRecord();

      if (d.score != null) {
        m.score = Number(d.score);
      }

      if (d.wrong_words) {
        if (!Array.isArray(d.wrong_words)) throw TypeError(".farm.GameRecord.wrong_words: array expected");
        m.wrong_words = [];

        for (var i = 0; i < d.wrong_words.length; ++i) {
          if ($util.Long) (m.wrong_words[i] = $util.Long.fromValue(d.wrong_words[i])).unsigned = false;else if (typeof d.wrong_words[i] === "string") m.wrong_words[i] = parseInt(d.wrong_words[i], 10);else if (typeof d.wrong_words[i] === "number") m.wrong_words[i] = d.wrong_words[i];else if (typeof d.wrong_words[i] === "object") m.wrong_words[i] = new $util.LongBits(d.wrong_words[i].low >>> 0, d.wrong_words[i].high >>> 0).toNumber();
        }
      }

      if (d.unskillful_words) {
        if (!Array.isArray(d.unskillful_words)) throw TypeError(".farm.GameRecord.unskillful_words: array expected");
        m.unskillful_words = [];

        for (var i = 0; i < d.unskillful_words.length; ++i) {
          if ($util.Long) (m.unskillful_words[i] = $util.Long.fromValue(d.unskillful_words[i])).unsigned = false;else if (typeof d.unskillful_words[i] === "string") m.unskillful_words[i] = parseInt(d.unskillful_words[i], 10);else if (typeof d.unskillful_words[i] === "number") m.unskillful_words[i] = d.unskillful_words[i];else if (typeof d.unskillful_words[i] === "object") m.unskillful_words[i] = new $util.LongBits(d.unskillful_words[i].low >>> 0, d.unskillful_words[i].high >>> 0).toNumber();
        }
      }

      if (d.skillful_words) {
        if (!Array.isArray(d.skillful_words)) throw TypeError(".farm.GameRecord.skillful_words: array expected");
        m.skillful_words = [];

        for (var i = 0; i < d.skillful_words.length; ++i) {
          if ($util.Long) (m.skillful_words[i] = $util.Long.fromValue(d.skillful_words[i])).unsigned = false;else if (typeof d.skillful_words[i] === "string") m.skillful_words[i] = parseInt(d.skillful_words[i], 10);else if (typeof d.skillful_words[i] === "number") m.skillful_words[i] = d.skillful_words[i];else if (typeof d.skillful_words[i] === "object") m.skillful_words[i] = new $util.LongBits(d.skillful_words[i].low >>> 0, d.skillful_words[i].high >>> 0).toNumber();
        }
      }

      if (d.superskillful_words) {
        if (!Array.isArray(d.superskillful_words)) throw TypeError(".farm.GameRecord.superskillful_words: array expected");
        m.superskillful_words = [];

        for (var i = 0; i < d.superskillful_words.length; ++i) {
          if ($util.Long) (m.superskillful_words[i] = $util.Long.fromValue(d.superskillful_words[i])).unsigned = false;else if (typeof d.superskillful_words[i] === "string") m.superskillful_words[i] = parseInt(d.superskillful_words[i], 10);else if (typeof d.superskillful_words[i] === "number") m.superskillful_words[i] = d.superskillful_words[i];else if (typeof d.superskillful_words[i] === "object") m.superskillful_words[i] = new $util.LongBits(d.superskillful_words[i].low >>> 0, d.superskillful_words[i].high >>> 0).toNumber();
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a GameRecord message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.GameRecord
     * @static
     * @param {farm.GameRecord} m GameRecord
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    GameRecord.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.wrong_words = [];
        d.unskillful_words = [];
        d.skillful_words = [];
        d.superskillful_words = [];
      }

      if (o.defaults) {
        d.score = 0;
      }

      if (m.score != null && m.hasOwnProperty("score")) {
        d.score = o.json && !isFinite(m.score) ? String(m.score) : m.score;
      }

      if (m.wrong_words && m.wrong_words.length) {
        d.wrong_words = [];

        for (var j = 0; j < m.wrong_words.length; ++j) {
          if (typeof m.wrong_words[j] === "number") d.wrong_words[j] = o.longs === String ? String(m.wrong_words[j]) : m.wrong_words[j];else d.wrong_words[j] = o.longs === String ? $util.Long.prototype.toString.call(m.wrong_words[j]) : o.longs === Number ? new $util.LongBits(m.wrong_words[j].low >>> 0, m.wrong_words[j].high >>> 0).toNumber() : m.wrong_words[j];
        }
      }

      if (m.unskillful_words && m.unskillful_words.length) {
        d.unskillful_words = [];

        for (var j = 0; j < m.unskillful_words.length; ++j) {
          if (typeof m.unskillful_words[j] === "number") d.unskillful_words[j] = o.longs === String ? String(m.unskillful_words[j]) : m.unskillful_words[j];else d.unskillful_words[j] = o.longs === String ? $util.Long.prototype.toString.call(m.unskillful_words[j]) : o.longs === Number ? new $util.LongBits(m.unskillful_words[j].low >>> 0, m.unskillful_words[j].high >>> 0).toNumber() : m.unskillful_words[j];
        }
      }

      if (m.skillful_words && m.skillful_words.length) {
        d.skillful_words = [];

        for (var j = 0; j < m.skillful_words.length; ++j) {
          if (typeof m.skillful_words[j] === "number") d.skillful_words[j] = o.longs === String ? String(m.skillful_words[j]) : m.skillful_words[j];else d.skillful_words[j] = o.longs === String ? $util.Long.prototype.toString.call(m.skillful_words[j]) : o.longs === Number ? new $util.LongBits(m.skillful_words[j].low >>> 0, m.skillful_words[j].high >>> 0).toNumber() : m.skillful_words[j];
        }
      }

      if (m.superskillful_words && m.superskillful_words.length) {
        d.superskillful_words = [];

        for (var j = 0; j < m.superskillful_words.length; ++j) {
          if (typeof m.superskillful_words[j] === "number") d.superskillful_words[j] = o.longs === String ? String(m.superskillful_words[j]) : m.superskillful_words[j];else d.superskillful_words[j] = o.longs === String ? $util.Long.prototype.toString.call(m.superskillful_words[j]) : o.longs === Number ? new $util.LongBits(m.superskillful_words[j].low >>> 0, m.superskillful_words[j].high >>> 0).toNumber() : m.superskillful_words[j];
        }
      }

      return d;
    };
    /**
     * Converts this GameRecord to JSON.
     * @function toJSON
     * @memberof farm.GameRecord
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    GameRecord.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GameRecord;
  }();

  farm.ModeResult = function () {
    /**
     * Properties of a ModeResult.
     * @memberof farm
     * @interface IModeResult
     * @property {number|Long|null} [checkin_id] ModeResult checkin_id
     * @property {number|null} [checkin_state] ModeResult checkin_state
     * @property {number|null} [lesson_state] ModeResult lesson_state
     * @property {string|null} [nickName] ModeResult nickName
     * @property {string|null} [lessonName] ModeResult lessonName
     * @property {number|null} [zeroLeftTime] ModeResult zeroLeftTime
     * @property {string|null} [checkinPushRemark] ModeResult checkinPushRemark
     * @property {Array.<number|Long>|null} [star_progress] ModeResult star_progress
     */

    /**
     * Constructs a new ModeResult.
     * @memberof farm
     * @classdesc Represents a ModeResult.
     * @implements IModeResult
     * @constructor
     * @param {farm.IModeResult=} [p] Properties to set
     */
    function ModeResult(p) {
      this.star_progress = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ModeResult checkin_id.
     * @member {number|Long} checkin_id
     * @memberof farm.ModeResult
     * @instance
     */


    ModeResult.prototype.checkin_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ModeResult checkin_state.
     * @member {number} checkin_state
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.checkin_state = 0;
    /**
     * ModeResult lesson_state.
     * @member {number} lesson_state
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.lesson_state = 0;
    /**
     * ModeResult nickName.
     * @member {string} nickName
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.nickName = "";
    /**
     * ModeResult lessonName.
     * @member {string} lessonName
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.lessonName = "";
    /**
     * ModeResult zeroLeftTime.
     * @member {number} zeroLeftTime
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.zeroLeftTime = 0;
    /**
     * ModeResult checkinPushRemark.
     * @member {string} checkinPushRemark
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.checkinPushRemark = "";
    /**
     * ModeResult star_progress.
     * @member {Array.<number|Long>} star_progress
     * @memberof farm.ModeResult
     * @instance
     */

    ModeResult.prototype.star_progress = $util.emptyArray;
    /**
     * Encodes the specified ModeResult message. Does not implicitly {@link farm.ModeResult.verify|verify} messages.
     * @function encode
     * @memberof farm.ModeResult
     * @static
     * @param {farm.IModeResult} m ModeResult message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ModeResult.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.checkin_id != null && Object.hasOwnProperty.call(m, "checkin_id")) w.uint32(8).int64(m.checkin_id);
      if (m.checkin_state != null && Object.hasOwnProperty.call(m, "checkin_state")) w.uint32(16).int32(m.checkin_state);
      if (m.lesson_state != null && Object.hasOwnProperty.call(m, "lesson_state")) w.uint32(24).int32(m.lesson_state);
      if (m.nickName != null && Object.hasOwnProperty.call(m, "nickName")) w.uint32(34).string(m.nickName);
      if (m.lessonName != null && Object.hasOwnProperty.call(m, "lessonName")) w.uint32(42).string(m.lessonName);
      if (m.zeroLeftTime != null && Object.hasOwnProperty.call(m, "zeroLeftTime")) w.uint32(48).int32(m.zeroLeftTime);
      if (m.checkinPushRemark != null && Object.hasOwnProperty.call(m, "checkinPushRemark")) w.uint32(58).string(m.checkinPushRemark);

      if (m.star_progress != null && m.star_progress.length) {
        w.uint32(66).fork();

        for (var i = 0; i < m.star_progress.length; ++i) {
          w.int64(m.star_progress[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a ModeResult message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ModeResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ModeResult} ModeResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ModeResult.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ModeResult();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.checkin_id = r.int64();
            break;

          case 2:
            m.checkin_state = r.int32();
            break;

          case 3:
            m.lesson_state = r.int32();
            break;

          case 4:
            m.nickName = r.string();
            break;

          case 5:
            m.lessonName = r.string();
            break;

          case 6:
            m.zeroLeftTime = r.int32();
            break;

          case 7:
            m.checkinPushRemark = r.string();
            break;

          case 8:
            if (!(m.star_progress && m.star_progress.length)) m.star_progress = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.star_progress.push(r.int64());
              }
            } else m.star_progress.push(r.int64());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ModeResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ModeResult
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ModeResult} ModeResult
     */


    ModeResult.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ModeResult) return d;
      var m = new $root.farm.ModeResult();

      if (d.checkin_id != null) {
        if ($util.Long) (m.checkin_id = $util.Long.fromValue(d.checkin_id)).unsigned = false;else if (typeof d.checkin_id === "string") m.checkin_id = parseInt(d.checkin_id, 10);else if (typeof d.checkin_id === "number") m.checkin_id = d.checkin_id;else if (typeof d.checkin_id === "object") m.checkin_id = new $util.LongBits(d.checkin_id.low >>> 0, d.checkin_id.high >>> 0).toNumber();
      }

      if (d.checkin_state != null) {
        m.checkin_state = d.checkin_state | 0;
      }

      if (d.lesson_state != null) {
        m.lesson_state = d.lesson_state | 0;
      }

      if (d.nickName != null) {
        m.nickName = String(d.nickName);
      }

      if (d.lessonName != null) {
        m.lessonName = String(d.lessonName);
      }

      if (d.zeroLeftTime != null) {
        m.zeroLeftTime = d.zeroLeftTime | 0;
      }

      if (d.checkinPushRemark != null) {
        m.checkinPushRemark = String(d.checkinPushRemark);
      }

      if (d.star_progress) {
        if (!Array.isArray(d.star_progress)) throw TypeError(".farm.ModeResult.star_progress: array expected");
        m.star_progress = [];

        for (var i = 0; i < d.star_progress.length; ++i) {
          if ($util.Long) (m.star_progress[i] = $util.Long.fromValue(d.star_progress[i])).unsigned = false;else if (typeof d.star_progress[i] === "string") m.star_progress[i] = parseInt(d.star_progress[i], 10);else if (typeof d.star_progress[i] === "number") m.star_progress[i] = d.star_progress[i];else if (typeof d.star_progress[i] === "object") m.star_progress[i] = new $util.LongBits(d.star_progress[i].low >>> 0, d.star_progress[i].high >>> 0).toNumber();
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a ModeResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ModeResult
     * @static
     * @param {farm.ModeResult} m ModeResult
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ModeResult.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.star_progress = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.checkin_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.checkin_id = o.longs === String ? "0" : 0;

        d.checkin_state = 0;
        d.lesson_state = 0;
        d.nickName = "";
        d.lessonName = "";
        d.zeroLeftTime = 0;
        d.checkinPushRemark = "";
      }

      if (m.checkin_id != null && m.hasOwnProperty("checkin_id")) {
        if (typeof m.checkin_id === "number") d.checkin_id = o.longs === String ? String(m.checkin_id) : m.checkin_id;else d.checkin_id = o.longs === String ? $util.Long.prototype.toString.call(m.checkin_id) : o.longs === Number ? new $util.LongBits(m.checkin_id.low >>> 0, m.checkin_id.high >>> 0).toNumber() : m.checkin_id;
      }

      if (m.checkin_state != null && m.hasOwnProperty("checkin_state")) {
        d.checkin_state = m.checkin_state;
      }

      if (m.lesson_state != null && m.hasOwnProperty("lesson_state")) {
        d.lesson_state = m.lesson_state;
      }

      if (m.nickName != null && m.hasOwnProperty("nickName")) {
        d.nickName = m.nickName;
      }

      if (m.lessonName != null && m.hasOwnProperty("lessonName")) {
        d.lessonName = m.lessonName;
      }

      if (m.zeroLeftTime != null && m.hasOwnProperty("zeroLeftTime")) {
        d.zeroLeftTime = m.zeroLeftTime;
      }

      if (m.checkinPushRemark != null && m.hasOwnProperty("checkinPushRemark")) {
        d.checkinPushRemark = m.checkinPushRemark;
      }

      if (m.star_progress && m.star_progress.length) {
        d.star_progress = [];

        for (var j = 0; j < m.star_progress.length; ++j) {
          if (typeof m.star_progress[j] === "number") d.star_progress[j] = o.longs === String ? String(m.star_progress[j]) : m.star_progress[j];else d.star_progress[j] = o.longs === String ? $util.Long.prototype.toString.call(m.star_progress[j]) : o.longs === Number ? new $util.LongBits(m.star_progress[j].low >>> 0, m.star_progress[j].high >>> 0).toNumber() : m.star_progress[j];
        }
      }

      return d;
    };
    /**
     * Converts this ModeResult to JSON.
     * @function toJSON
     * @memberof farm.ModeResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ModeResult.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ModeResult;
  }();

  farm.ExpiredUserLimitConfig = function () {
    /**
     * Properties of an ExpiredUserLimitConfig.
     * @memberof farm
     * @interface IExpiredUserLimitConfig
     * @property {Array.<number|Long>|null} [can_play_unit_ids] ExpiredUserLimitConfig can_play_unit_ids
     * @property {number|Long|null} [limit_res_count] ExpiredUserLimitConfig limit_res_count
     * @property {number|Long|null} [can_use_checkin] ExpiredUserLimitConfig can_use_checkin
     * @property {number|Long|null} [can_use_spec] ExpiredUserLimitConfig can_use_spec
     */

    /**
     * Constructs a new ExpiredUserLimitConfig.
     * @memberof farm
     * @classdesc Represents an ExpiredUserLimitConfig.
     * @implements IExpiredUserLimitConfig
     * @constructor
     * @param {farm.IExpiredUserLimitConfig=} [p] Properties to set
     */
    function ExpiredUserLimitConfig(p) {
      this.can_play_unit_ids = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ExpiredUserLimitConfig can_play_unit_ids.
     * @member {Array.<number|Long>} can_play_unit_ids
     * @memberof farm.ExpiredUserLimitConfig
     * @instance
     */


    ExpiredUserLimitConfig.prototype.can_play_unit_ids = $util.emptyArray;
    /**
     * ExpiredUserLimitConfig limit_res_count.
     * @member {number|Long} limit_res_count
     * @memberof farm.ExpiredUserLimitConfig
     * @instance
     */

    ExpiredUserLimitConfig.prototype.limit_res_count = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ExpiredUserLimitConfig can_use_checkin.
     * @member {number|Long} can_use_checkin
     * @memberof farm.ExpiredUserLimitConfig
     * @instance
     */

    ExpiredUserLimitConfig.prototype.can_use_checkin = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ExpiredUserLimitConfig can_use_spec.
     * @member {number|Long} can_use_spec
     * @memberof farm.ExpiredUserLimitConfig
     * @instance
     */

    ExpiredUserLimitConfig.prototype.can_use_spec = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ExpiredUserLimitConfig message. Does not implicitly {@link farm.ExpiredUserLimitConfig.verify|verify} messages.
     * @function encode
     * @memberof farm.ExpiredUserLimitConfig
     * @static
     * @param {farm.IExpiredUserLimitConfig} m ExpiredUserLimitConfig message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ExpiredUserLimitConfig.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.can_play_unit_ids != null && m.can_play_unit_ids.length) {
        w.uint32(10).fork();

        for (var i = 0; i < m.can_play_unit_ids.length; ++i) {
          w.int64(m.can_play_unit_ids[i]);
        }

        w.ldelim();
      }

      if (m.limit_res_count != null && Object.hasOwnProperty.call(m, "limit_res_count")) w.uint32(16).int64(m.limit_res_count);
      if (m.can_use_checkin != null && Object.hasOwnProperty.call(m, "can_use_checkin")) w.uint32(24).int64(m.can_use_checkin);
      if (m.can_use_spec != null && Object.hasOwnProperty.call(m, "can_use_spec")) w.uint32(32).int64(m.can_use_spec);
      return w;
    };
    /**
     * Decodes an ExpiredUserLimitConfig message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ExpiredUserLimitConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ExpiredUserLimitConfig} ExpiredUserLimitConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ExpiredUserLimitConfig.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ExpiredUserLimitConfig();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.can_play_unit_ids && m.can_play_unit_ids.length)) m.can_play_unit_ids = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.can_play_unit_ids.push(r.int64());
              }
            } else m.can_play_unit_ids.push(r.int64());

            break;

          case 2:
            m.limit_res_count = r.int64();
            break;

          case 3:
            m.can_use_checkin = r.int64();
            break;

          case 4:
            m.can_use_spec = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an ExpiredUserLimitConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ExpiredUserLimitConfig
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ExpiredUserLimitConfig} ExpiredUserLimitConfig
     */


    ExpiredUserLimitConfig.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ExpiredUserLimitConfig) return d;
      var m = new $root.farm.ExpiredUserLimitConfig();

      if (d.can_play_unit_ids) {
        if (!Array.isArray(d.can_play_unit_ids)) throw TypeError(".farm.ExpiredUserLimitConfig.can_play_unit_ids: array expected");
        m.can_play_unit_ids = [];

        for (var i = 0; i < d.can_play_unit_ids.length; ++i) {
          if ($util.Long) (m.can_play_unit_ids[i] = $util.Long.fromValue(d.can_play_unit_ids[i])).unsigned = false;else if (typeof d.can_play_unit_ids[i] === "string") m.can_play_unit_ids[i] = parseInt(d.can_play_unit_ids[i], 10);else if (typeof d.can_play_unit_ids[i] === "number") m.can_play_unit_ids[i] = d.can_play_unit_ids[i];else if (typeof d.can_play_unit_ids[i] === "object") m.can_play_unit_ids[i] = new $util.LongBits(d.can_play_unit_ids[i].low >>> 0, d.can_play_unit_ids[i].high >>> 0).toNumber();
        }
      }

      if (d.limit_res_count != null) {
        if ($util.Long) (m.limit_res_count = $util.Long.fromValue(d.limit_res_count)).unsigned = false;else if (typeof d.limit_res_count === "string") m.limit_res_count = parseInt(d.limit_res_count, 10);else if (typeof d.limit_res_count === "number") m.limit_res_count = d.limit_res_count;else if (typeof d.limit_res_count === "object") m.limit_res_count = new $util.LongBits(d.limit_res_count.low >>> 0, d.limit_res_count.high >>> 0).toNumber();
      }

      if (d.can_use_checkin != null) {
        if ($util.Long) (m.can_use_checkin = $util.Long.fromValue(d.can_use_checkin)).unsigned = false;else if (typeof d.can_use_checkin === "string") m.can_use_checkin = parseInt(d.can_use_checkin, 10);else if (typeof d.can_use_checkin === "number") m.can_use_checkin = d.can_use_checkin;else if (typeof d.can_use_checkin === "object") m.can_use_checkin = new $util.LongBits(d.can_use_checkin.low >>> 0, d.can_use_checkin.high >>> 0).toNumber();
      }

      if (d.can_use_spec != null) {
        if ($util.Long) (m.can_use_spec = $util.Long.fromValue(d.can_use_spec)).unsigned = false;else if (typeof d.can_use_spec === "string") m.can_use_spec = parseInt(d.can_use_spec, 10);else if (typeof d.can_use_spec === "number") m.can_use_spec = d.can_use_spec;else if (typeof d.can_use_spec === "object") m.can_use_spec = new $util.LongBits(d.can_use_spec.low >>> 0, d.can_use_spec.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from an ExpiredUserLimitConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ExpiredUserLimitConfig
     * @static
     * @param {farm.ExpiredUserLimitConfig} m ExpiredUserLimitConfig
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ExpiredUserLimitConfig.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.can_play_unit_ids = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.limit_res_count = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.limit_res_count = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.can_use_checkin = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.can_use_checkin = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.can_use_spec = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.can_use_spec = o.longs === String ? "0" : 0;
      }

      if (m.can_play_unit_ids && m.can_play_unit_ids.length) {
        d.can_play_unit_ids = [];

        for (var j = 0; j < m.can_play_unit_ids.length; ++j) {
          if (typeof m.can_play_unit_ids[j] === "number") d.can_play_unit_ids[j] = o.longs === String ? String(m.can_play_unit_ids[j]) : m.can_play_unit_ids[j];else d.can_play_unit_ids[j] = o.longs === String ? $util.Long.prototype.toString.call(m.can_play_unit_ids[j]) : o.longs === Number ? new $util.LongBits(m.can_play_unit_ids[j].low >>> 0, m.can_play_unit_ids[j].high >>> 0).toNumber() : m.can_play_unit_ids[j];
        }
      }

      if (m.limit_res_count != null && m.hasOwnProperty("limit_res_count")) {
        if (typeof m.limit_res_count === "number") d.limit_res_count = o.longs === String ? String(m.limit_res_count) : m.limit_res_count;else d.limit_res_count = o.longs === String ? $util.Long.prototype.toString.call(m.limit_res_count) : o.longs === Number ? new $util.LongBits(m.limit_res_count.low >>> 0, m.limit_res_count.high >>> 0).toNumber() : m.limit_res_count;
      }

      if (m.can_use_checkin != null && m.hasOwnProperty("can_use_checkin")) {
        if (typeof m.can_use_checkin === "number") d.can_use_checkin = o.longs === String ? String(m.can_use_checkin) : m.can_use_checkin;else d.can_use_checkin = o.longs === String ? $util.Long.prototype.toString.call(m.can_use_checkin) : o.longs === Number ? new $util.LongBits(m.can_use_checkin.low >>> 0, m.can_use_checkin.high >>> 0).toNumber() : m.can_use_checkin;
      }

      if (m.can_use_spec != null && m.hasOwnProperty("can_use_spec")) {
        if (typeof m.can_use_spec === "number") d.can_use_spec = o.longs === String ? String(m.can_use_spec) : m.can_use_spec;else d.can_use_spec = o.longs === String ? $util.Long.prototype.toString.call(m.can_use_spec) : o.longs === Number ? new $util.LongBits(m.can_use_spec.low >>> 0, m.can_use_spec.high >>> 0).toNumber() : m.can_use_spec;
      }

      return d;
    };
    /**
     * Converts this ExpiredUserLimitConfig to JSON.
     * @function toJSON
     * @memberof farm.ExpiredUserLimitConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ExpiredUserLimitConfig.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ExpiredUserLimitConfig;
  }();
  /**
   * GameType enum.
   * @name farm.GameType
   * @enum {number}
   * @property {number} GameTypeNormal=0 GameTypeNormal value
   * @property {number} GameType1=1 GameType1 value
   * @property {number} GameType2=2 GameType2 value
   * @property {number} GameType3=3 GameType3 value
   * @property {number} GameType4=4 GameType4 value
   */


  farm.GameType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "GameTypeNormal"] = 0;
    values[valuesById[1] = "GameType1"] = 1;
    values[valuesById[2] = "GameType2"] = 2;
    values[valuesById[3] = "GameType3"] = 3;
    values[valuesById[4] = "GameType4"] = 4;
    return values;
  }();

  farm.WordItemInfo = function () {
    /**
     * Properties of a WordItemInfo.
     * @memberof farm
     * @interface IWordItemInfo
     * @property {number|Long|null} [id] WordItemInfo id
     * @property {number|Long|null} [grade_id] WordItemInfo grade_id
     * @property {number|Long|null} [unit_id] WordItemInfo unit_id
     * @property {number|Long|null} [type] WordItemInfo type
     * @property {number|Long|null} [unit_index] WordItemInfo unit_index
     * @property {string|null} [cn] WordItemInfo cn
     * @property {string|null} [en] WordItemInfo en
     */

    /**
     * Constructs a new WordItemInfo.
     * @memberof farm
     * @classdesc Represents a WordItemInfo.
     * @implements IWordItemInfo
     * @constructor
     * @param {farm.IWordItemInfo=} [p] Properties to set
     */
    function WordItemInfo(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * WordItemInfo id.
     * @member {number|Long} id
     * @memberof farm.WordItemInfo
     * @instance
     */


    WordItemInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * WordItemInfo grade_id.
     * @member {number|Long} grade_id
     * @memberof farm.WordItemInfo
     * @instance
     */

    WordItemInfo.prototype.grade_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * WordItemInfo unit_id.
     * @member {number|Long} unit_id
     * @memberof farm.WordItemInfo
     * @instance
     */

    WordItemInfo.prototype.unit_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * WordItemInfo type.
     * @member {number|Long} type
     * @memberof farm.WordItemInfo
     * @instance
     */

    WordItemInfo.prototype.type = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * WordItemInfo unit_index.
     * @member {number|Long} unit_index
     * @memberof farm.WordItemInfo
     * @instance
     */

    WordItemInfo.prototype.unit_index = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * WordItemInfo cn.
     * @member {string} cn
     * @memberof farm.WordItemInfo
     * @instance
     */

    WordItemInfo.prototype.cn = "";
    /**
     * WordItemInfo en.
     * @member {string} en
     * @memberof farm.WordItemInfo
     * @instance
     */

    WordItemInfo.prototype.en = "";
    /**
     * Encodes the specified WordItemInfo message. Does not implicitly {@link farm.WordItemInfo.verify|verify} messages.
     * @function encode
     * @memberof farm.WordItemInfo
     * @static
     * @param {farm.IWordItemInfo} m WordItemInfo message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    WordItemInfo.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.grade_id != null && Object.hasOwnProperty.call(m, "grade_id")) w.uint32(16).int64(m.grade_id);
      if (m.unit_id != null && Object.hasOwnProperty.call(m, "unit_id")) w.uint32(24).int64(m.unit_id);
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(32).int64(m.type);
      if (m.unit_index != null && Object.hasOwnProperty.call(m, "unit_index")) w.uint32(40).int64(m.unit_index);
      if (m.cn != null && Object.hasOwnProperty.call(m, "cn")) w.uint32(50).string(m.cn);
      if (m.en != null && Object.hasOwnProperty.call(m, "en")) w.uint32(58).string(m.en);
      return w;
    };
    /**
     * Decodes a WordItemInfo message from the specified reader or buffer.
     * @function decode
     * @memberof farm.WordItemInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.WordItemInfo} WordItemInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    WordItemInfo.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.WordItemInfo();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.grade_id = r.int64();
            break;

          case 3:
            m.unit_id = r.int64();
            break;

          case 4:
            m.type = r.int64();
            break;

          case 5:
            m.unit_index = r.int64();
            break;

          case 6:
            m.cn = r.string();
            break;

          case 7:
            m.en = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a WordItemInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.WordItemInfo
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.WordItemInfo} WordItemInfo
     */


    WordItemInfo.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.WordItemInfo) return d;
      var m = new $root.farm.WordItemInfo();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.grade_id != null) {
        if ($util.Long) (m.grade_id = $util.Long.fromValue(d.grade_id)).unsigned = false;else if (typeof d.grade_id === "string") m.grade_id = parseInt(d.grade_id, 10);else if (typeof d.grade_id === "number") m.grade_id = d.grade_id;else if (typeof d.grade_id === "object") m.grade_id = new $util.LongBits(d.grade_id.low >>> 0, d.grade_id.high >>> 0).toNumber();
      }

      if (d.unit_id != null) {
        if ($util.Long) (m.unit_id = $util.Long.fromValue(d.unit_id)).unsigned = false;else if (typeof d.unit_id === "string") m.unit_id = parseInt(d.unit_id, 10);else if (typeof d.unit_id === "number") m.unit_id = d.unit_id;else if (typeof d.unit_id === "object") m.unit_id = new $util.LongBits(d.unit_id.low >>> 0, d.unit_id.high >>> 0).toNumber();
      }

      if (d.type != null) {
        if ($util.Long) (m.type = $util.Long.fromValue(d.type)).unsigned = false;else if (typeof d.type === "string") m.type = parseInt(d.type, 10);else if (typeof d.type === "number") m.type = d.type;else if (typeof d.type === "object") m.type = new $util.LongBits(d.type.low >>> 0, d.type.high >>> 0).toNumber();
      }

      if (d.unit_index != null) {
        if ($util.Long) (m.unit_index = $util.Long.fromValue(d.unit_index)).unsigned = false;else if (typeof d.unit_index === "string") m.unit_index = parseInt(d.unit_index, 10);else if (typeof d.unit_index === "number") m.unit_index = d.unit_index;else if (typeof d.unit_index === "object") m.unit_index = new $util.LongBits(d.unit_index.low >>> 0, d.unit_index.high >>> 0).toNumber();
      }

      if (d.cn != null) {
        m.cn = String(d.cn);
      }

      if (d.en != null) {
        m.en = String(d.en);
      }

      return m;
    };
    /**
     * Creates a plain object from a WordItemInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.WordItemInfo
     * @static
     * @param {farm.WordItemInfo} m WordItemInfo
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    WordItemInfo.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.grade_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.grade_id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.unit_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.unit_id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.type = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.type = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.unit_index = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.unit_index = o.longs === String ? "0" : 0;

        d.cn = "";
        d.en = "";
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.grade_id != null && m.hasOwnProperty("grade_id")) {
        if (typeof m.grade_id === "number") d.grade_id = o.longs === String ? String(m.grade_id) : m.grade_id;else d.grade_id = o.longs === String ? $util.Long.prototype.toString.call(m.grade_id) : o.longs === Number ? new $util.LongBits(m.grade_id.low >>> 0, m.grade_id.high >>> 0).toNumber() : m.grade_id;
      }

      if (m.unit_id != null && m.hasOwnProperty("unit_id")) {
        if (typeof m.unit_id === "number") d.unit_id = o.longs === String ? String(m.unit_id) : m.unit_id;else d.unit_id = o.longs === String ? $util.Long.prototype.toString.call(m.unit_id) : o.longs === Number ? new $util.LongBits(m.unit_id.low >>> 0, m.unit_id.high >>> 0).toNumber() : m.unit_id;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        if (typeof m.type === "number") d.type = o.longs === String ? String(m.type) : m.type;else d.type = o.longs === String ? $util.Long.prototype.toString.call(m.type) : o.longs === Number ? new $util.LongBits(m.type.low >>> 0, m.type.high >>> 0).toNumber() : m.type;
      }

      if (m.unit_index != null && m.hasOwnProperty("unit_index")) {
        if (typeof m.unit_index === "number") d.unit_index = o.longs === String ? String(m.unit_index) : m.unit_index;else d.unit_index = o.longs === String ? $util.Long.prototype.toString.call(m.unit_index) : o.longs === Number ? new $util.LongBits(m.unit_index.low >>> 0, m.unit_index.high >>> 0).toNumber() : m.unit_index;
      }

      if (m.cn != null && m.hasOwnProperty("cn")) {
        d.cn = m.cn;
      }

      if (m.en != null && m.hasOwnProperty("en")) {
        d.en = m.en;
      }

      return d;
    };
    /**
     * Converts this WordItemInfo to JSON.
     * @function toJSON
     * @memberof farm.WordItemInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    WordItemInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return WordItemInfo;
  }();

  farm.GradeLearningProgress = function () {
    /**
     * Properties of a GradeLearningProgress.
     * @memberof farm
     * @interface IGradeLearningProgress
     * @property {number|Long|null} [GradeID] GradeLearningProgress GradeID
     * @property {number|Long|null} [Star] GradeLearningProgress Star
     */

    /**
     * Constructs a new GradeLearningProgress.
     * @memberof farm
     * @classdesc Represents a GradeLearningProgress.
     * @implements IGradeLearningProgress
     * @constructor
     * @param {farm.IGradeLearningProgress=} [p] Properties to set
     */
    function GradeLearningProgress(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * GradeLearningProgress GradeID.
     * @member {number|Long} GradeID
     * @memberof farm.GradeLearningProgress
     * @instance
     */


    GradeLearningProgress.prototype.GradeID = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GradeLearningProgress Star.
     * @member {number|Long} Star
     * @memberof farm.GradeLearningProgress
     * @instance
     */

    GradeLearningProgress.prototype.Star = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified GradeLearningProgress message. Does not implicitly {@link farm.GradeLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.GradeLearningProgress
     * @static
     * @param {farm.IGradeLearningProgress} m GradeLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    GradeLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.GradeID != null && Object.hasOwnProperty.call(m, "GradeID")) w.uint32(8).int64(m.GradeID);
      if (m.Star != null && Object.hasOwnProperty.call(m, "Star")) w.uint32(16).int64(m.Star);
      return w;
    };
    /**
     * Decodes a GradeLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.GradeLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.GradeLearningProgress} GradeLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    GradeLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.GradeLearningProgress();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.GradeID = r.int64();
            break;

          case 2:
            m.Star = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a GradeLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.GradeLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.GradeLearningProgress} GradeLearningProgress
     */


    GradeLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.GradeLearningProgress) return d;
      var m = new $root.farm.GradeLearningProgress();

      if (d.GradeID != null) {
        if ($util.Long) (m.GradeID = $util.Long.fromValue(d.GradeID)).unsigned = false;else if (typeof d.GradeID === "string") m.GradeID = parseInt(d.GradeID, 10);else if (typeof d.GradeID === "number") m.GradeID = d.GradeID;else if (typeof d.GradeID === "object") m.GradeID = new $util.LongBits(d.GradeID.low >>> 0, d.GradeID.high >>> 0).toNumber();
      }

      if (d.Star != null) {
        if ($util.Long) (m.Star = $util.Long.fromValue(d.Star)).unsigned = false;else if (typeof d.Star === "string") m.Star = parseInt(d.Star, 10);else if (typeof d.Star === "number") m.Star = d.Star;else if (typeof d.Star === "object") m.Star = new $util.LongBits(d.Star.low >>> 0, d.Star.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a GradeLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.GradeLearningProgress
     * @static
     * @param {farm.GradeLearningProgress} m GradeLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    GradeLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.GradeID = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.GradeID = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.Star = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.Star = o.longs === String ? "0" : 0;
      }

      if (m.GradeID != null && m.hasOwnProperty("GradeID")) {
        if (typeof m.GradeID === "number") d.GradeID = o.longs === String ? String(m.GradeID) : m.GradeID;else d.GradeID = o.longs === String ? $util.Long.prototype.toString.call(m.GradeID) : o.longs === Number ? new $util.LongBits(m.GradeID.low >>> 0, m.GradeID.high >>> 0).toNumber() : m.GradeID;
      }

      if (m.Star != null && m.hasOwnProperty("Star")) {
        if (typeof m.Star === "number") d.Star = o.longs === String ? String(m.Star) : m.Star;else d.Star = o.longs === String ? $util.Long.prototype.toString.call(m.Star) : o.longs === Number ? new $util.LongBits(m.Star.low >>> 0, m.Star.high >>> 0).toNumber() : m.Star;
      }

      return d;
    };
    /**
     * Converts this GradeLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.GradeLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    GradeLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GradeLearningProgress;
  }();

  farm.UnitLearningProgress = function () {
    /**
     * Properties of an UnitLearningProgress.
     * @memberof farm
     * @interface IUnitLearningProgress
     * @property {number|Long|null} [UnitID] UnitLearningProgress UnitID
     * @property {Object.<string,farm.IGameTypeLearningProgress>|null} [GamesLearningProgress] UnitLearningProgress GamesLearningProgress
     */

    /**
     * Constructs a new UnitLearningProgress.
     * @memberof farm
     * @classdesc Represents an UnitLearningProgress.
     * @implements IUnitLearningProgress
     * @constructor
     * @param {farm.IUnitLearningProgress=} [p] Properties to set
     */
    function UnitLearningProgress(p) {
      this.GamesLearningProgress = {};
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * UnitLearningProgress UnitID.
     * @member {number|Long} UnitID
     * @memberof farm.UnitLearningProgress
     * @instance
     */


    UnitLearningProgress.prototype.UnitID = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * UnitLearningProgress GamesLearningProgress.
     * @member {Object.<string,farm.IGameTypeLearningProgress>} GamesLearningProgress
     * @memberof farm.UnitLearningProgress
     * @instance
     */

    UnitLearningProgress.prototype.GamesLearningProgress = $util.emptyObject;
    /**
     * Encodes the specified UnitLearningProgress message. Does not implicitly {@link farm.UnitLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.UnitLearningProgress
     * @static
     * @param {farm.IUnitLearningProgress} m UnitLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    UnitLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.UnitID != null && Object.hasOwnProperty.call(m, "UnitID")) w.uint32(8).int64(m.UnitID);

      if (m.GamesLearningProgress != null && Object.hasOwnProperty.call(m, "GamesLearningProgress")) {
        for (var ks = Object.keys(m.GamesLearningProgress), i = 0; i < ks.length; ++i) {
          w.uint32(18).fork().uint32(8).int64(ks[i]);
          $root.farm.GameTypeLearningProgress.encode(m.GamesLearningProgress[ks[i]], w.uint32(18).fork()).ldelim().ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes an UnitLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.UnitLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.UnitLearningProgress} UnitLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    UnitLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.UnitLearningProgress(),
          k;

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.UnitID = r.int64();
            break;

          case 2:
            r.skip().pos++;
            if (m.GamesLearningProgress === $util.emptyObject) m.GamesLearningProgress = {};
            k = r.int64();
            r.pos++;
            m.GamesLearningProgress[typeof k === "object" ? $util.longToHash(k) : k] = $root.farm.GameTypeLearningProgress.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an UnitLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.UnitLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.UnitLearningProgress} UnitLearningProgress
     */


    UnitLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.UnitLearningProgress) return d;
      var m = new $root.farm.UnitLearningProgress();

      if (d.UnitID != null) {
        if ($util.Long) (m.UnitID = $util.Long.fromValue(d.UnitID)).unsigned = false;else if (typeof d.UnitID === "string") m.UnitID = parseInt(d.UnitID, 10);else if (typeof d.UnitID === "number") m.UnitID = d.UnitID;else if (typeof d.UnitID === "object") m.UnitID = new $util.LongBits(d.UnitID.low >>> 0, d.UnitID.high >>> 0).toNumber();
      }

      if (d.GamesLearningProgress) {
        if (typeof d.GamesLearningProgress !== "object") throw TypeError(".farm.UnitLearningProgress.GamesLearningProgress: object expected");
        m.GamesLearningProgress = {};

        for (var ks = Object.keys(d.GamesLearningProgress), i = 0; i < ks.length; ++i) {
          if (typeof d.GamesLearningProgress[ks[i]] !== "object") throw TypeError(".farm.UnitLearningProgress.GamesLearningProgress: object expected");
          m.GamesLearningProgress[ks[i]] = $root.farm.GameTypeLearningProgress.fromObject(d.GamesLearningProgress[ks[i]]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from an UnitLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.UnitLearningProgress
     * @static
     * @param {farm.UnitLearningProgress} m UnitLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    UnitLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.objects || o.defaults) {
        d.GamesLearningProgress = {};
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.UnitID = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.UnitID = o.longs === String ? "0" : 0;
      }

      if (m.UnitID != null && m.hasOwnProperty("UnitID")) {
        if (typeof m.UnitID === "number") d.UnitID = o.longs === String ? String(m.UnitID) : m.UnitID;else d.UnitID = o.longs === String ? $util.Long.prototype.toString.call(m.UnitID) : o.longs === Number ? new $util.LongBits(m.UnitID.low >>> 0, m.UnitID.high >>> 0).toNumber() : m.UnitID;
      }

      var ks2;

      if (m.GamesLearningProgress && (ks2 = Object.keys(m.GamesLearningProgress)).length) {
        d.GamesLearningProgress = {};

        for (var j = 0; j < ks2.length; ++j) {
          d.GamesLearningProgress[ks2[j]] = $root.farm.GameTypeLearningProgress.toObject(m.GamesLearningProgress[ks2[j]], o);
        }
      }

      return d;
    };
    /**
     * Converts this UnitLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.UnitLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    UnitLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return UnitLearningProgress;
  }();

  farm.GameTypeLearningProgress = function () {
    /**
     * Properties of a GameTypeLearningProgress.
     * @memberof farm
     * @interface IGameTypeLearningProgress
     * @property {farm.GameType|null} [GameType] GameTypeLearningProgress GameType
     * @property {number|Long|null} [star] GameTypeLearningProgress star
     * @property {number|null} [HistoryMaxScore] GameTypeLearningProgress HistoryMaxScore
     */

    /**
     * Constructs a new GameTypeLearningProgress.
     * @memberof farm
     * @classdesc Represents a GameTypeLearningProgress.
     * @implements IGameTypeLearningProgress
     * @constructor
     * @param {farm.IGameTypeLearningProgress=} [p] Properties to set
     */
    function GameTypeLearningProgress(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * GameTypeLearningProgress GameType.
     * @member {farm.GameType} GameType
     * @memberof farm.GameTypeLearningProgress
     * @instance
     */


    GameTypeLearningProgress.prototype.GameType = 0;
    /**
     * GameTypeLearningProgress star.
     * @member {number|Long} star
     * @memberof farm.GameTypeLearningProgress
     * @instance
     */

    GameTypeLearningProgress.prototype.star = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * GameTypeLearningProgress HistoryMaxScore.
     * @member {number} HistoryMaxScore
     * @memberof farm.GameTypeLearningProgress
     * @instance
     */

    GameTypeLearningProgress.prototype.HistoryMaxScore = 0;
    /**
     * Encodes the specified GameTypeLearningProgress message. Does not implicitly {@link farm.GameTypeLearningProgress.verify|verify} messages.
     * @function encode
     * @memberof farm.GameTypeLearningProgress
     * @static
     * @param {farm.IGameTypeLearningProgress} m GameTypeLearningProgress message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    GameTypeLearningProgress.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.GameType != null && Object.hasOwnProperty.call(m, "GameType")) w.uint32(8).int32(m.GameType);
      if (m.star != null && Object.hasOwnProperty.call(m, "star")) w.uint32(16).int64(m.star);
      if (m.HistoryMaxScore != null && Object.hasOwnProperty.call(m, "HistoryMaxScore")) w.uint32(29)["float"](m.HistoryMaxScore);
      return w;
    };
    /**
     * Decodes a GameTypeLearningProgress message from the specified reader or buffer.
     * @function decode
     * @memberof farm.GameTypeLearningProgress
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.GameTypeLearningProgress} GameTypeLearningProgress
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    GameTypeLearningProgress.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.GameTypeLearningProgress();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.GameType = r.int32();
            break;

          case 2:
            m.star = r.int64();
            break;

          case 3:
            m.HistoryMaxScore = r["float"]();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a GameTypeLearningProgress message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.GameTypeLearningProgress
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.GameTypeLearningProgress} GameTypeLearningProgress
     */


    GameTypeLearningProgress.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.GameTypeLearningProgress) return d;
      var m = new $root.farm.GameTypeLearningProgress();

      switch (d.GameType) {
        case "GameTypeNormal":
        case 0:
          m.GameType = 0;
          break;

        case "GameType1":
        case 1:
          m.GameType = 1;
          break;

        case "GameType2":
        case 2:
          m.GameType = 2;
          break;

        case "GameType3":
        case 3:
          m.GameType = 3;
          break;

        case "GameType4":
        case 4:
          m.GameType = 4;
          break;
      }

      if (d.star != null) {
        if ($util.Long) (m.star = $util.Long.fromValue(d.star)).unsigned = false;else if (typeof d.star === "string") m.star = parseInt(d.star, 10);else if (typeof d.star === "number") m.star = d.star;else if (typeof d.star === "object") m.star = new $util.LongBits(d.star.low >>> 0, d.star.high >>> 0).toNumber();
      }

      if (d.HistoryMaxScore != null) {
        m.HistoryMaxScore = Number(d.HistoryMaxScore);
      }

      return m;
    };
    /**
     * Creates a plain object from a GameTypeLearningProgress message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.GameTypeLearningProgress
     * @static
     * @param {farm.GameTypeLearningProgress} m GameTypeLearningProgress
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    GameTypeLearningProgress.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.GameType = o.enums === String ? "GameTypeNormal" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.star = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.star = o.longs === String ? "0" : 0;

        d.HistoryMaxScore = 0;
      }

      if (m.GameType != null && m.hasOwnProperty("GameType")) {
        d.GameType = o.enums === String ? $root.farm.GameType[m.GameType] : m.GameType;
      }

      if (m.star != null && m.hasOwnProperty("star")) {
        if (typeof m.star === "number") d.star = o.longs === String ? String(m.star) : m.star;else d.star = o.longs === String ? $util.Long.prototype.toString.call(m.star) : o.longs === Number ? new $util.LongBits(m.star.low >>> 0, m.star.high >>> 0).toNumber() : m.star;
      }

      if (m.HistoryMaxScore != null && m.hasOwnProperty("HistoryMaxScore")) {
        d.HistoryMaxScore = o.json && !isFinite(m.HistoryMaxScore) ? String(m.HistoryMaxScore) : m.HistoryMaxScore;
      }

      return d;
    };
    /**
     * Converts this GameTypeLearningProgress to JSON.
     * @function toJSON
     * @memberof farm.GameTypeLearningProgress
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    GameTypeLearningProgress.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return GameTypeLearningProgress;
  }();

  farm.ReqMaterials = function () {
    /**
     * Properties of a ReqMaterials.
     * @memberof farm
     * @interface IReqMaterials
     * @property {number|Long|null} [user_id] ReqMaterials user_id
     */

    /**
     * Constructs a new ReqMaterials.
     * @memberof farm
     * @classdesc Represents a ReqMaterials.
     * @implements IReqMaterials
     * @constructor
     * @param {farm.IReqMaterials=} [p] Properties to set
     */
    function ReqMaterials(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqMaterials user_id.
     * @member {number|Long} user_id
     * @memberof farm.ReqMaterials
     * @instance
     */


    ReqMaterials.prototype.user_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqMaterials message. Does not implicitly {@link farm.ReqMaterials.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqMaterials
     * @static
     * @param {farm.IReqMaterials} m ReqMaterials message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqMaterials.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.user_id != null && Object.hasOwnProperty.call(m, "user_id")) w.uint32(8).int64(m.user_id);
      return w;
    };
    /**
     * Decodes a ReqMaterials message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqMaterials
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqMaterials} ReqMaterials
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqMaterials.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqMaterials();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.user_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqMaterials message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqMaterials
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqMaterials} ReqMaterials
     */


    ReqMaterials.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqMaterials) return d;
      var m = new $root.farm.ReqMaterials();

      if (d.user_id != null) {
        if ($util.Long) (m.user_id = $util.Long.fromValue(d.user_id)).unsigned = false;else if (typeof d.user_id === "string") m.user_id = parseInt(d.user_id, 10);else if (typeof d.user_id === "number") m.user_id = d.user_id;else if (typeof d.user_id === "object") m.user_id = new $util.LongBits(d.user_id.low >>> 0, d.user_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqMaterials message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqMaterials
     * @static
     * @param {farm.ReqMaterials} m ReqMaterials
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqMaterials.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.user_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.user_id = o.longs === String ? "0" : 0;
      }

      if (m.user_id != null && m.hasOwnProperty("user_id")) {
        if (typeof m.user_id === "number") d.user_id = o.longs === String ? String(m.user_id) : m.user_id;else d.user_id = o.longs === String ? $util.Long.prototype.toString.call(m.user_id) : o.longs === Number ? new $util.LongBits(m.user_id.low >>> 0, m.user_id.high >>> 0).toNumber() : m.user_id;
      }

      return d;
    };
    /**
     * Converts this ReqMaterials to JSON.
     * @function toJSON
     * @memberof farm.ReqMaterials
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqMaterials.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqMaterials;
  }();

  farm.RespMaterials = function () {
    /**
     * Properties of a RespMaterials.
     * @memberof farm
     * @interface IRespMaterials
     * @property {Array.<farm.IMaterialItem>|null} [Mats] RespMaterials Mats
     */

    /**
     * Constructs a new RespMaterials.
     * @memberof farm
     * @classdesc Represents a RespMaterials.
     * @implements IRespMaterials
     * @constructor
     * @param {farm.IRespMaterials=} [p] Properties to set
     */
    function RespMaterials(p) {
      this.Mats = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespMaterials Mats.
     * @member {Array.<farm.IMaterialItem>} Mats
     * @memberof farm.RespMaterials
     * @instance
     */


    RespMaterials.prototype.Mats = $util.emptyArray;
    /**
     * Encodes the specified RespMaterials message. Does not implicitly {@link farm.RespMaterials.verify|verify} messages.
     * @function encode
     * @memberof farm.RespMaterials
     * @static
     * @param {farm.IRespMaterials} m RespMaterials message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespMaterials.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.Mats != null && m.Mats.length) {
        for (var i = 0; i < m.Mats.length; ++i) {
          $root.farm.MaterialItem.encode(m.Mats[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespMaterials message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespMaterials
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespMaterials} RespMaterials
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespMaterials.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespMaterials();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.Mats && m.Mats.length)) m.Mats = [];
            m.Mats.push($root.farm.MaterialItem.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespMaterials message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespMaterials
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespMaterials} RespMaterials
     */


    RespMaterials.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespMaterials) return d;
      var m = new $root.farm.RespMaterials();

      if (d.Mats) {
        if (!Array.isArray(d.Mats)) throw TypeError(".farm.RespMaterials.Mats: array expected");
        m.Mats = [];

        for (var i = 0; i < d.Mats.length; ++i) {
          if (typeof d.Mats[i] !== "object") throw TypeError(".farm.RespMaterials.Mats: object expected");
          m.Mats[i] = $root.farm.MaterialItem.fromObject(d.Mats[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespMaterials message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespMaterials
     * @static
     * @param {farm.RespMaterials} m RespMaterials
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespMaterials.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.Mats = [];
      }

      if (m.Mats && m.Mats.length) {
        d.Mats = [];

        for (var j = 0; j < m.Mats.length; ++j) {
          d.Mats[j] = $root.farm.MaterialItem.toObject(m.Mats[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespMaterials to JSON.
     * @function toJSON
     * @memberof farm.RespMaterials
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespMaterials.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespMaterials;
  }();

  farm.MaterialItem = function () {
    /**
     * Properties of a MaterialItem.
     * @memberof farm
     * @interface IMaterialItem
     * @property {number|Long|null} [mat_id] MaterialItem mat_id
     * @property {string|null} [mat_name] MaterialItem mat_name
     */

    /**
     * Constructs a new MaterialItem.
     * @memberof farm
     * @classdesc Represents a MaterialItem.
     * @implements IMaterialItem
     * @constructor
     * @param {farm.IMaterialItem=} [p] Properties to set
     */
    function MaterialItem(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MaterialItem mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.MaterialItem
     * @instance
     */


    MaterialItem.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * MaterialItem mat_name.
     * @member {string} mat_name
     * @memberof farm.MaterialItem
     * @instance
     */

    MaterialItem.prototype.mat_name = "";
    /**
     * Encodes the specified MaterialItem message. Does not implicitly {@link farm.MaterialItem.verify|verify} messages.
     * @function encode
     * @memberof farm.MaterialItem
     * @static
     * @param {farm.IMaterialItem} m MaterialItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MaterialItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(8).int64(m.mat_id);
      if (m.mat_name != null && Object.hasOwnProperty.call(m, "mat_name")) w.uint32(18).string(m.mat_name);
      return w;
    };
    /**
     * Decodes a MaterialItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MaterialItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MaterialItem} MaterialItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MaterialItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MaterialItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.mat_id = r.int64();
            break;

          case 2:
            m.mat_name = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MaterialItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MaterialItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MaterialItem} MaterialItem
     */


    MaterialItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MaterialItem) return d;
      var m = new $root.farm.MaterialItem();

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      if (d.mat_name != null) {
        m.mat_name = String(d.mat_name);
      }

      return m;
    };
    /**
     * Creates a plain object from a MaterialItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MaterialItem
     * @static
     * @param {farm.MaterialItem} m MaterialItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MaterialItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;

        d.mat_name = "";
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      if (m.mat_name != null && m.hasOwnProperty("mat_name")) {
        d.mat_name = m.mat_name;
      }

      return d;
    };
    /**
     * Converts this MaterialItem to JSON.
     * @function toJSON
     * @memberof farm.MaterialItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MaterialItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MaterialItem;
  }();

  farm.ReqUpdateMat = function () {
    /**
     * Properties of a ReqUpdateMat.
     * @memberof farm
     * @interface IReqUpdateMat
     * @property {number|Long|null} [uid_id] ReqUpdateMat uid_id
     * @property {number|Long|null} [mat_id] ReqUpdateMat mat_id
     */

    /**
     * Constructs a new ReqUpdateMat.
     * @memberof farm
     * @classdesc Represents a ReqUpdateMat.
     * @implements IReqUpdateMat
     * @constructor
     * @param {farm.IReqUpdateMat=} [p] Properties to set
     */
    function ReqUpdateMat(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqUpdateMat uid_id.
     * @member {number|Long} uid_id
     * @memberof farm.ReqUpdateMat
     * @instance
     */


    ReqUpdateMat.prototype.uid_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqUpdateMat mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.ReqUpdateMat
     * @instance
     */

    ReqUpdateMat.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqUpdateMat message. Does not implicitly {@link farm.ReqUpdateMat.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqUpdateMat
     * @static
     * @param {farm.IReqUpdateMat} m ReqUpdateMat message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqUpdateMat.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.uid_id != null && Object.hasOwnProperty.call(m, "uid_id")) w.uint32(8).int64(m.uid_id);
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(16).int64(m.mat_id);
      return w;
    };
    /**
     * Decodes a ReqUpdateMat message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqUpdateMat
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqUpdateMat} ReqUpdateMat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqUpdateMat.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqUpdateMat();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.uid_id = r.int64();
            break;

          case 2:
            m.mat_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqUpdateMat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqUpdateMat
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqUpdateMat} ReqUpdateMat
     */


    ReqUpdateMat.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqUpdateMat) return d;
      var m = new $root.farm.ReqUpdateMat();

      if (d.uid_id != null) {
        if ($util.Long) (m.uid_id = $util.Long.fromValue(d.uid_id)).unsigned = false;else if (typeof d.uid_id === "string") m.uid_id = parseInt(d.uid_id, 10);else if (typeof d.uid_id === "number") m.uid_id = d.uid_id;else if (typeof d.uid_id === "object") m.uid_id = new $util.LongBits(d.uid_id.low >>> 0, d.uid_id.high >>> 0).toNumber();
      }

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqUpdateMat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqUpdateMat
     * @static
     * @param {farm.ReqUpdateMat} m ReqUpdateMat
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqUpdateMat.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.uid_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.uid_id = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;
      }

      if (m.uid_id != null && m.hasOwnProperty("uid_id")) {
        if (typeof m.uid_id === "number") d.uid_id = o.longs === String ? String(m.uid_id) : m.uid_id;else d.uid_id = o.longs === String ? $util.Long.prototype.toString.call(m.uid_id) : o.longs === Number ? new $util.LongBits(m.uid_id.low >>> 0, m.uid_id.high >>> 0).toNumber() : m.uid_id;
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      return d;
    };
    /**
     * Converts this ReqUpdateMat to JSON.
     * @function toJSON
     * @memberof farm.ReqUpdateMat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqUpdateMat.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqUpdateMat;
  }();

  farm.RespUpdateMat = function () {
    /**
     * Properties of a RespUpdateMat.
     * @memberof farm
     * @interface IRespUpdateMat
     * @property {number|Long|null} [mat_id] RespUpdateMat mat_id
     * @property {Array.<number|Long>|null} [last_study] RespUpdateMat last_study
     */

    /**
     * Constructs a new RespUpdateMat.
     * @memberof farm
     * @classdesc Represents a RespUpdateMat.
     * @implements IRespUpdateMat
     * @constructor
     * @param {farm.IRespUpdateMat=} [p] Properties to set
     */
    function RespUpdateMat(p) {
      this.last_study = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespUpdateMat mat_id.
     * @member {number|Long} mat_id
     * @memberof farm.RespUpdateMat
     * @instance
     */


    RespUpdateMat.prototype.mat_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespUpdateMat last_study.
     * @member {Array.<number|Long>} last_study
     * @memberof farm.RespUpdateMat
     * @instance
     */

    RespUpdateMat.prototype.last_study = $util.emptyArray;
    /**
     * Encodes the specified RespUpdateMat message. Does not implicitly {@link farm.RespUpdateMat.verify|verify} messages.
     * @function encode
     * @memberof farm.RespUpdateMat
     * @static
     * @param {farm.IRespUpdateMat} m RespUpdateMat message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespUpdateMat.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.mat_id != null && Object.hasOwnProperty.call(m, "mat_id")) w.uint32(8).int64(m.mat_id);

      if (m.last_study != null && m.last_study.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.last_study.length; ++i) {
          w.int64(m.last_study[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a RespUpdateMat message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespUpdateMat
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespUpdateMat} RespUpdateMat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespUpdateMat.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespUpdateMat();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.mat_id = r.int64();
            break;

          case 2:
            if (!(m.last_study && m.last_study.length)) m.last_study = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.last_study.push(r.int64());
              }
            } else m.last_study.push(r.int64());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespUpdateMat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespUpdateMat
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespUpdateMat} RespUpdateMat
     */


    RespUpdateMat.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespUpdateMat) return d;
      var m = new $root.farm.RespUpdateMat();

      if (d.mat_id != null) {
        if ($util.Long) (m.mat_id = $util.Long.fromValue(d.mat_id)).unsigned = false;else if (typeof d.mat_id === "string") m.mat_id = parseInt(d.mat_id, 10);else if (typeof d.mat_id === "number") m.mat_id = d.mat_id;else if (typeof d.mat_id === "object") m.mat_id = new $util.LongBits(d.mat_id.low >>> 0, d.mat_id.high >>> 0).toNumber();
      }

      if (d.last_study) {
        if (!Array.isArray(d.last_study)) throw TypeError(".farm.RespUpdateMat.last_study: array expected");
        m.last_study = [];

        for (var i = 0; i < d.last_study.length; ++i) {
          if ($util.Long) (m.last_study[i] = $util.Long.fromValue(d.last_study[i])).unsigned = false;else if (typeof d.last_study[i] === "string") m.last_study[i] = parseInt(d.last_study[i], 10);else if (typeof d.last_study[i] === "number") m.last_study[i] = d.last_study[i];else if (typeof d.last_study[i] === "object") m.last_study[i] = new $util.LongBits(d.last_study[i].low >>> 0, d.last_study[i].high >>> 0).toNumber();
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespUpdateMat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespUpdateMat
     * @static
     * @param {farm.RespUpdateMat} m RespUpdateMat
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespUpdateMat.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.last_study = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mat_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mat_id = o.longs === String ? "0" : 0;
      }

      if (m.mat_id != null && m.hasOwnProperty("mat_id")) {
        if (typeof m.mat_id === "number") d.mat_id = o.longs === String ? String(m.mat_id) : m.mat_id;else d.mat_id = o.longs === String ? $util.Long.prototype.toString.call(m.mat_id) : o.longs === Number ? new $util.LongBits(m.mat_id.low >>> 0, m.mat_id.high >>> 0).toNumber() : m.mat_id;
      }

      if (m.last_study && m.last_study.length) {
        d.last_study = [];

        for (var j = 0; j < m.last_study.length; ++j) {
          if (typeof m.last_study[j] === "number") d.last_study[j] = o.longs === String ? String(m.last_study[j]) : m.last_study[j];else d.last_study[j] = o.longs === String ? $util.Long.prototype.toString.call(m.last_study[j]) : o.longs === Number ? new $util.LongBits(m.last_study[j].low >>> 0, m.last_study[j].high >>> 0).toNumber() : m.last_study[j];
        }
      }

      return d;
    };
    /**
     * Converts this RespUpdateMat to JSON.
     * @function toJSON
     * @memberof farm.RespUpdateMat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespUpdateMat.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespUpdateMat;
  }();

  farm.Pos = function () {
    /**
     * Properties of a Pos.
     * @memberof farm
     * @interface IPos
     * @property {number|null} [x] Pos x
     * @property {number|null} [y] Pos y
     */

    /**
     * Constructs a new Pos.
     * @memberof farm
     * @classdesc Represents a Pos.
     * @implements IPos
     * @constructor
     * @param {farm.IPos=} [p] Properties to set
     */
    function Pos(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Pos x.
     * @member {number} x
     * @memberof farm.Pos
     * @instance
     */


    Pos.prototype.x = 0;
    /**
     * Pos y.
     * @member {number} y
     * @memberof farm.Pos
     * @instance
     */

    Pos.prototype.y = 0;
    /**
     * Encodes the specified Pos message. Does not implicitly {@link farm.Pos.verify|verify} messages.
     * @function encode
     * @memberof farm.Pos
     * @static
     * @param {farm.IPos} m Pos message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Pos.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.x != null && Object.hasOwnProperty.call(m, "x")) w.uint32(8).int32(m.x);
      if (m.y != null && Object.hasOwnProperty.call(m, "y")) w.uint32(16).int32(m.y);
      return w;
    };
    /**
     * Decodes a Pos message from the specified reader or buffer.
     * @function decode
     * @memberof farm.Pos
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.Pos} Pos
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Pos.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.Pos();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.x = r.int32();
            break;

          case 2:
            m.y = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a Pos message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.Pos
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.Pos} Pos
     */


    Pos.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.Pos) return d;
      var m = new $root.farm.Pos();

      if (d.x != null) {
        m.x = d.x | 0;
      }

      if (d.y != null) {
        m.y = d.y | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a Pos message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.Pos
     * @static
     * @param {farm.Pos} m Pos
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Pos.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.x = 0;
        d.y = 0;
      }

      if (m.x != null && m.hasOwnProperty("x")) {
        d.x = m.x;
      }

      if (m.y != null && m.hasOwnProperty("y")) {
        d.y = m.y;
      }

      return d;
    };
    /**
     * Converts this Pos to JSON.
     * @function toJSON
     * @memberof farm.Pos
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Pos.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Pos;
  }();
  /**
   * BuildingStateType enum.
   * @name farm.BuildingStateType
   * @enum {number}
   * @property {number} Invalid=0 Invalid value
   * @property {number} Building=1 Building value
   * @property {number} Upgrading=2 Upgrading value
   * @property {number} PreComplete=3 PreComplete value
   * @property {number} Normal=4 Normal value
   * @property {number} Abandoned=5 Abandoned value
   * @property {number} Lock=6 Lock value
   */


  farm.BuildingStateType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "Invalid"] = 0;
    values[valuesById[1] = "Building"] = 1;
    values[valuesById[2] = "Upgrading"] = 2;
    values[valuesById[3] = "PreComplete"] = 3;
    values[valuesById[4] = "Normal"] = 4;
    values[valuesById[5] = "Abandoned"] = 5;
    values[valuesById[6] = "Lock"] = 6;
    return values;
  }();
  /**
   * CropStateType enum.
   * @name farm.CropStateType
   * @enum {number}
   * @property {number} NotExist=0 NotExist value
   * @property {number} Seedling=1 Seedling value
   * @property {number} SmallLeaf=2 SmallLeaf value
   * @property {number} LargeLeaf=3 LargeLeaf value
   * @property {number} Mature=4 Mature value
   */


  farm.CropStateType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "NotExist"] = 0;
    values[valuesById[1] = "Seedling"] = 1;
    values[valuesById[2] = "SmallLeaf"] = 2;
    values[valuesById[3] = "LargeLeaf"] = 3;
    values[valuesById[4] = "Mature"] = 4;
    return values;
  }();
  /**
   * ArableLandStateType enum.
   * @name farm.ArableLandStateType
   * @enum {number}
   * @property {number} Space=0 Space value
   * @property {number} Using=1 Using value
   */


  farm.ArableLandStateType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "Space"] = 0;
    values[valuesById[1] = "Using"] = 1;
    return values;
  }();
  /**
   * MailType enum.
   * @name farm.MailType
   * @enum {number}
   * @property {number} SYS=0 SYS value
   * @property {number} NPC=1 NPC value
   * @property {number} Player=2 Player value
   */


  farm.MailType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "SYS"] = 0;
    values[valuesById[1] = "NPC"] = 1;
    values[valuesById[2] = "Player"] = 2;
    return values;
  }();
  /**
   * MailState enum.
   * @name farm.MailState
   * @enum {number}
   * @property {number} No_Read=0 No_Read value
   * @property {number} Read=1 Read value
   */


  farm.MailState = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "No_Read"] = 0;
    values[valuesById[1] = "Read"] = 1;
    return values;
  }();
  /**
   * MailTapType enum.
   * @name farm.MailTapType
   * @enum {number}
   * @property {number} Notification=0 Notification value
   * @property {number} Annexes=1 Annexes value
   */


  farm.MailTapType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "Notification"] = 0;
    values[valuesById[1] = "Annexes"] = 1;
    return values;
  }();
  /**
   * AnnexState enum.
   * @name farm.AnnexState
   * @enum {number}
   * @property {number} No_Receive=0 No_Receive value
   * @property {number} Received=1 Received value
   */


  farm.AnnexState = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "No_Receive"] = 0;
    values[valuesById[1] = "Received"] = 1;
    return values;
  }();
  /**
   * CurrencyType enum.
   * @name farm.CurrencyType
   * @enum {number}
   * @property {number} CNothing=0 CNothing value
   * @property {number} CGold=1 CGold value
   * @property {number} CCrystal=2 CCrystal value
   * @property {number} CLove=3 CLove value
   */


  farm.CurrencyType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "CNothing"] = 0;
    values[valuesById[1] = "CGold"] = 1;
    values[valuesById[2] = "CCrystal"] = 2;
    values[valuesById[3] = "CLove"] = 3;
    return values;
  }();
  /**
   * UnlockConditionType enum.
   * @name farm.UnlockConditionType
   * @enum {number}
   * @property {number} Nothing=0 Nothing value
   * @property {number} Love=1 Love value
   * @property {number} Gold=2 Gold value
   * @property {number} Task=3 Task value
   * @property {number} Prop=4 Prop value
   * @property {number} ManorHeart=5 ManorHeart value
   * @property {number} Level=6 Level value
   * @property {number} Crystal=7 Crystal value
   */


  farm.UnlockConditionType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "Nothing"] = 0;
    values[valuesById[1] = "Love"] = 1;
    values[valuesById[2] = "Gold"] = 2;
    values[valuesById[3] = "Task"] = 3;
    values[valuesById[4] = "Prop"] = 4;
    values[valuesById[5] = "ManorHeart"] = 5;
    values[valuesById[6] = "Level"] = 6;
    values[valuesById[7] = "Crystal"] = 7;
    return values;
  }();

  farm.BuildingItem = function () {
    /**
     * Properties of a BuildingItem.
     * @memberof farm
     * @interface IBuildingItem
     * @property {number|Long|null} [id] BuildingItem id
     * @property {number|null} [configID] BuildingItem configID
     * @property {number|null} [level] BuildingItem level
     * @property {boolean|null} [rotated] BuildingItem rotated
     * @property {farm.IPos|null} [pos] BuildingItem pos
     * @property {farm.BuildingStateType|null} [state] BuildingItem state
     * @property {number|null} [leftDur] BuildingItem leftDur
     */

    /**
     * Constructs a new BuildingItem.
     * @memberof farm
     * @classdesc Represents a BuildingItem.
     * @implements IBuildingItem
     * @constructor
     * @param {farm.IBuildingItem=} [p] Properties to set
     */
    function BuildingItem(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * BuildingItem id.
     * @member {number|Long} id
     * @memberof farm.BuildingItem
     * @instance
     */


    BuildingItem.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * BuildingItem configID.
     * @member {number} configID
     * @memberof farm.BuildingItem
     * @instance
     */

    BuildingItem.prototype.configID = 0;
    /**
     * BuildingItem level.
     * @member {number} level
     * @memberof farm.BuildingItem
     * @instance
     */

    BuildingItem.prototype.level = 0;
    /**
     * BuildingItem rotated.
     * @member {boolean} rotated
     * @memberof farm.BuildingItem
     * @instance
     */

    BuildingItem.prototype.rotated = false;
    /**
     * BuildingItem pos.
     * @member {farm.IPos|null|undefined} pos
     * @memberof farm.BuildingItem
     * @instance
     */

    BuildingItem.prototype.pos = null;
    /**
     * BuildingItem state.
     * @member {farm.BuildingStateType} state
     * @memberof farm.BuildingItem
     * @instance
     */

    BuildingItem.prototype.state = 0;
    /**
     * BuildingItem leftDur.
     * @member {number} leftDur
     * @memberof farm.BuildingItem
     * @instance
     */

    BuildingItem.prototype.leftDur = 0;
    /**
     * Encodes the specified BuildingItem message. Does not implicitly {@link farm.BuildingItem.verify|verify} messages.
     * @function encode
     * @memberof farm.BuildingItem
     * @static
     * @param {farm.IBuildingItem} m BuildingItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    BuildingItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.configID != null && Object.hasOwnProperty.call(m, "configID")) w.uint32(16).int32(m.configID);
      if (m.level != null && Object.hasOwnProperty.call(m, "level")) w.uint32(24).int32(m.level);
      if (m.rotated != null && Object.hasOwnProperty.call(m, "rotated")) w.uint32(32).bool(m.rotated);
      if (m.pos != null && Object.hasOwnProperty.call(m, "pos")) $root.farm.Pos.encode(m.pos, w.uint32(42).fork()).ldelim();
      if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(48).int32(m.state);
      if (m.leftDur != null && Object.hasOwnProperty.call(m, "leftDur")) w.uint32(56).int32(m.leftDur);
      return w;
    };
    /**
     * Decodes a BuildingItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.BuildingItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.BuildingItem} BuildingItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    BuildingItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.BuildingItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.configID = r.int32();
            break;

          case 3:
            m.level = r.int32();
            break;

          case 4:
            m.rotated = r.bool();
            break;

          case 5:
            m.pos = $root.farm.Pos.decode(r, r.uint32());
            break;

          case 6:
            m.state = r.int32();
            break;

          case 7:
            m.leftDur = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a BuildingItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.BuildingItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.BuildingItem} BuildingItem
     */


    BuildingItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.BuildingItem) return d;
      var m = new $root.farm.BuildingItem();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.configID != null) {
        m.configID = d.configID | 0;
      }

      if (d.level != null) {
        m.level = d.level | 0;
      }

      if (d.rotated != null) {
        m.rotated = Boolean(d.rotated);
      }

      if (d.pos != null) {
        if (typeof d.pos !== "object") throw TypeError(".farm.BuildingItem.pos: object expected");
        m.pos = $root.farm.Pos.fromObject(d.pos);
      }

      switch (d.state) {
        case "Invalid":
        case 0:
          m.state = 0;
          break;

        case "Building":
        case 1:
          m.state = 1;
          break;

        case "Upgrading":
        case 2:
          m.state = 2;
          break;

        case "PreComplete":
        case 3:
          m.state = 3;
          break;

        case "Normal":
        case 4:
          m.state = 4;
          break;

        case "Abandoned":
        case 5:
          m.state = 5;
          break;

        case "Lock":
        case 6:
          m.state = 6;
          break;
      }

      if (d.leftDur != null) {
        m.leftDur = d.leftDur | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a BuildingItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.BuildingItem
     * @static
     * @param {farm.BuildingItem} m BuildingItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    BuildingItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.configID = 0;
        d.level = 0;
        d.rotated = false;
        d.pos = null;
        d.state = o.enums === String ? "Invalid" : 0;
        d.leftDur = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.configID != null && m.hasOwnProperty("configID")) {
        d.configID = m.configID;
      }

      if (m.level != null && m.hasOwnProperty("level")) {
        d.level = m.level;
      }

      if (m.rotated != null && m.hasOwnProperty("rotated")) {
        d.rotated = m.rotated;
      }

      if (m.pos != null && m.hasOwnProperty("pos")) {
        d.pos = $root.farm.Pos.toObject(m.pos, o);
      }

      if (m.state != null && m.hasOwnProperty("state")) {
        d.state = o.enums === String ? $root.farm.BuildingStateType[m.state] : m.state;
      }

      if (m.leftDur != null && m.hasOwnProperty("leftDur")) {
        d.leftDur = m.leftDur;
      }

      return d;
    };
    /**
     * Converts this BuildingItem to JSON.
     * @function toJSON
     * @memberof farm.BuildingItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    BuildingItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return BuildingItem;
  }();

  farm.ReqBuildingList = function () {
    /**
     * Properties of a ReqBuildingList.
     * @memberof farm
     * @interface IReqBuildingList
     */

    /**
     * Constructs a new ReqBuildingList.
     * @memberof farm
     * @classdesc Represents a ReqBuildingList.
     * @implements IReqBuildingList
     * @constructor
     * @param {farm.IReqBuildingList=} [p] Properties to set
     */
    function ReqBuildingList(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Encodes the specified ReqBuildingList message. Does not implicitly {@link farm.ReqBuildingList.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqBuildingList
     * @static
     * @param {farm.IReqBuildingList} m ReqBuildingList message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    ReqBuildingList.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      return w;
    };
    /**
     * Decodes a ReqBuildingList message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqBuildingList
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqBuildingList} ReqBuildingList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqBuildingList.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqBuildingList();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqBuildingList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqBuildingList
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqBuildingList} ReqBuildingList
     */


    ReqBuildingList.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqBuildingList) return d;
      return new $root.farm.ReqBuildingList();
    };
    /**
     * Creates a plain object from a ReqBuildingList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqBuildingList
     * @static
     * @param {farm.ReqBuildingList} m ReqBuildingList
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqBuildingList.toObject = function toObject() {
      return {};
    };
    /**
     * Converts this ReqBuildingList to JSON.
     * @function toJSON
     * @memberof farm.ReqBuildingList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqBuildingList.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqBuildingList;
  }();

  farm.RespBuildingList = function () {
    /**
     * Properties of a RespBuildingList.
     * @memberof farm
     * @interface IRespBuildingList
     * @property {Array.<farm.IBuildingItem>|null} [buildings] RespBuildingList buildings
     */

    /**
     * Constructs a new RespBuildingList.
     * @memberof farm
     * @classdesc Represents a RespBuildingList.
     * @implements IRespBuildingList
     * @constructor
     * @param {farm.IRespBuildingList=} [p] Properties to set
     */
    function RespBuildingList(p) {
      this.buildings = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespBuildingList buildings.
     * @member {Array.<farm.IBuildingItem>} buildings
     * @memberof farm.RespBuildingList
     * @instance
     */


    RespBuildingList.prototype.buildings = $util.emptyArray;
    /**
     * Encodes the specified RespBuildingList message. Does not implicitly {@link farm.RespBuildingList.verify|verify} messages.
     * @function encode
     * @memberof farm.RespBuildingList
     * @static
     * @param {farm.IRespBuildingList} m RespBuildingList message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespBuildingList.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.buildings != null && m.buildings.length) {
        for (var i = 0; i < m.buildings.length; ++i) {
          $root.farm.BuildingItem.encode(m.buildings[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespBuildingList message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespBuildingList
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespBuildingList} RespBuildingList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespBuildingList.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespBuildingList();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.buildings && m.buildings.length)) m.buildings = [];
            m.buildings.push($root.farm.BuildingItem.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespBuildingList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespBuildingList
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespBuildingList} RespBuildingList
     */


    RespBuildingList.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespBuildingList) return d;
      var m = new $root.farm.RespBuildingList();

      if (d.buildings) {
        if (!Array.isArray(d.buildings)) throw TypeError(".farm.RespBuildingList.buildings: array expected");
        m.buildings = [];

        for (var i = 0; i < d.buildings.length; ++i) {
          if (typeof d.buildings[i] !== "object") throw TypeError(".farm.RespBuildingList.buildings: object expected");
          m.buildings[i] = $root.farm.BuildingItem.fromObject(d.buildings[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespBuildingList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespBuildingList
     * @static
     * @param {farm.RespBuildingList} m RespBuildingList
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespBuildingList.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.buildings = [];
      }

      if (m.buildings && m.buildings.length) {
        d.buildings = [];

        for (var j = 0; j < m.buildings.length; ++j) {
          d.buildings[j] = $root.farm.BuildingItem.toObject(m.buildings[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespBuildingList to JSON.
     * @function toJSON
     * @memberof farm.RespBuildingList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespBuildingList.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespBuildingList;
  }();

  farm.ReqCanBuildBuildingList = function () {
    /**
     * Properties of a ReqCanBuildBuildingList.
     * @memberof farm
     * @interface IReqCanBuildBuildingList
     */

    /**
     * Constructs a new ReqCanBuildBuildingList.
     * @memberof farm
     * @classdesc Represents a ReqCanBuildBuildingList.
     * @implements IReqCanBuildBuildingList
     * @constructor
     * @param {farm.IReqCanBuildBuildingList=} [p] Properties to set
     */
    function ReqCanBuildBuildingList(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Encodes the specified ReqCanBuildBuildingList message. Does not implicitly {@link farm.ReqCanBuildBuildingList.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqCanBuildBuildingList
     * @static
     * @param {farm.IReqCanBuildBuildingList} m ReqCanBuildBuildingList message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    ReqCanBuildBuildingList.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      return w;
    };
    /**
     * Decodes a ReqCanBuildBuildingList message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqCanBuildBuildingList
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqCanBuildBuildingList} ReqCanBuildBuildingList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqCanBuildBuildingList.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqCanBuildBuildingList();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqCanBuildBuildingList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqCanBuildBuildingList
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqCanBuildBuildingList} ReqCanBuildBuildingList
     */


    ReqCanBuildBuildingList.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqCanBuildBuildingList) return d;
      return new $root.farm.ReqCanBuildBuildingList();
    };
    /**
     * Creates a plain object from a ReqCanBuildBuildingList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqCanBuildBuildingList
     * @static
     * @param {farm.ReqCanBuildBuildingList} m ReqCanBuildBuildingList
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqCanBuildBuildingList.toObject = function toObject() {
      return {};
    };
    /**
     * Converts this ReqCanBuildBuildingList to JSON.
     * @function toJSON
     * @memberof farm.ReqCanBuildBuildingList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqCanBuildBuildingList.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqCanBuildBuildingList;
  }();

  farm.RespCanBuildBuildingList = function () {
    /**
     * Properties of a RespCanBuildBuildingList.
     * @memberof farm
     * @interface IRespCanBuildBuildingList
     * @property {Array.<number>|null} [buildingConfigIds] RespCanBuildBuildingList buildingConfigIds
     */

    /**
     * Constructs a new RespCanBuildBuildingList.
     * @memberof farm
     * @classdesc Represents a RespCanBuildBuildingList.
     * @implements IRespCanBuildBuildingList
     * @constructor
     * @param {farm.IRespCanBuildBuildingList=} [p] Properties to set
     */
    function RespCanBuildBuildingList(p) {
      this.buildingConfigIds = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespCanBuildBuildingList buildingConfigIds.
     * @member {Array.<number>} buildingConfigIds
     * @memberof farm.RespCanBuildBuildingList
     * @instance
     */


    RespCanBuildBuildingList.prototype.buildingConfigIds = $util.emptyArray;
    /**
     * Encodes the specified RespCanBuildBuildingList message. Does not implicitly {@link farm.RespCanBuildBuildingList.verify|verify} messages.
     * @function encode
     * @memberof farm.RespCanBuildBuildingList
     * @static
     * @param {farm.IRespCanBuildBuildingList} m RespCanBuildBuildingList message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespCanBuildBuildingList.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.buildingConfigIds != null && m.buildingConfigIds.length) {
        w.uint32(10).fork();

        for (var i = 0; i < m.buildingConfigIds.length; ++i) {
          w.int32(m.buildingConfigIds[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a RespCanBuildBuildingList message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespCanBuildBuildingList
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespCanBuildBuildingList} RespCanBuildBuildingList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespCanBuildBuildingList.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespCanBuildBuildingList();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.buildingConfigIds && m.buildingConfigIds.length)) m.buildingConfigIds = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.buildingConfigIds.push(r.int32());
              }
            } else m.buildingConfigIds.push(r.int32());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespCanBuildBuildingList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespCanBuildBuildingList
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespCanBuildBuildingList} RespCanBuildBuildingList
     */


    RespCanBuildBuildingList.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespCanBuildBuildingList) return d;
      var m = new $root.farm.RespCanBuildBuildingList();

      if (d.buildingConfigIds) {
        if (!Array.isArray(d.buildingConfigIds)) throw TypeError(".farm.RespCanBuildBuildingList.buildingConfigIds: array expected");
        m.buildingConfigIds = [];

        for (var i = 0; i < d.buildingConfigIds.length; ++i) {
          m.buildingConfigIds[i] = d.buildingConfigIds[i] | 0;
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespCanBuildBuildingList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespCanBuildBuildingList
     * @static
     * @param {farm.RespCanBuildBuildingList} m RespCanBuildBuildingList
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespCanBuildBuildingList.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.buildingConfigIds = [];
      }

      if (m.buildingConfigIds && m.buildingConfigIds.length) {
        d.buildingConfigIds = [];

        for (var j = 0; j < m.buildingConfigIds.length; ++j) {
          d.buildingConfigIds[j] = m.buildingConfigIds[j];
        }
      }

      return d;
    };
    /**
     * Converts this RespCanBuildBuildingList to JSON.
     * @function toJSON
     * @memberof farm.RespCanBuildBuildingList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespCanBuildBuildingList.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespCanBuildBuildingList;
  }();

  farm.ReqBuild = function () {
    /**
     * Properties of a ReqBuild.
     * @memberof farm
     * @interface IReqBuild
     * @property {number|null} [configID] ReqBuild configID
     * @property {boolean|null} [rotated] ReqBuild rotated
     * @property {farm.IPos|null} [pos] ReqBuild pos
     */

    /**
     * Constructs a new ReqBuild.
     * @memberof farm
     * @classdesc Represents a ReqBuild.
     * @implements IReqBuild
     * @constructor
     * @param {farm.IReqBuild=} [p] Properties to set
     */
    function ReqBuild(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqBuild configID.
     * @member {number} configID
     * @memberof farm.ReqBuild
     * @instance
     */


    ReqBuild.prototype.configID = 0;
    /**
     * ReqBuild rotated.
     * @member {boolean} rotated
     * @memberof farm.ReqBuild
     * @instance
     */

    ReqBuild.prototype.rotated = false;
    /**
     * ReqBuild pos.
     * @member {farm.IPos|null|undefined} pos
     * @memberof farm.ReqBuild
     * @instance
     */

    ReqBuild.prototype.pos = null;
    /**
     * Encodes the specified ReqBuild message. Does not implicitly {@link farm.ReqBuild.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqBuild
     * @static
     * @param {farm.IReqBuild} m ReqBuild message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqBuild.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.configID != null && Object.hasOwnProperty.call(m, "configID")) w.uint32(8).int32(m.configID);
      if (m.rotated != null && Object.hasOwnProperty.call(m, "rotated")) w.uint32(16).bool(m.rotated);
      if (m.pos != null && Object.hasOwnProperty.call(m, "pos")) $root.farm.Pos.encode(m.pos, w.uint32(26).fork()).ldelim();
      return w;
    };
    /**
     * Decodes a ReqBuild message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqBuild
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqBuild} ReqBuild
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqBuild.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqBuild();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.configID = r.int32();
            break;

          case 2:
            m.rotated = r.bool();
            break;

          case 3:
            m.pos = $root.farm.Pos.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqBuild message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqBuild
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqBuild} ReqBuild
     */


    ReqBuild.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqBuild) return d;
      var m = new $root.farm.ReqBuild();

      if (d.configID != null) {
        m.configID = d.configID | 0;
      }

      if (d.rotated != null) {
        m.rotated = Boolean(d.rotated);
      }

      if (d.pos != null) {
        if (typeof d.pos !== "object") throw TypeError(".farm.ReqBuild.pos: object expected");
        m.pos = $root.farm.Pos.fromObject(d.pos);
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqBuild message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqBuild
     * @static
     * @param {farm.ReqBuild} m ReqBuild
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqBuild.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.configID = 0;
        d.rotated = false;
        d.pos = null;
      }

      if (m.configID != null && m.hasOwnProperty("configID")) {
        d.configID = m.configID;
      }

      if (m.rotated != null && m.hasOwnProperty("rotated")) {
        d.rotated = m.rotated;
      }

      if (m.pos != null && m.hasOwnProperty("pos")) {
        d.pos = $root.farm.Pos.toObject(m.pos, o);
      }

      return d;
    };
    /**
     * Converts this ReqBuild to JSON.
     * @function toJSON
     * @memberof farm.ReqBuild
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqBuild.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqBuild;
  }();

  farm.ReqById = function () {
    /**
     * Properties of a ReqById.
     * @memberof farm
     * @interface IReqById
     * @property {number|Long|null} [id] ReqById id
     */

    /**
     * Constructs a new ReqById.
     * @memberof farm
     * @classdesc Represents a ReqById.
     * @implements IReqById
     * @constructor
     * @param {farm.IReqById=} [p] Properties to set
     */
    function ReqById(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqById id.
     * @member {number|Long} id
     * @memberof farm.ReqById
     * @instance
     */


    ReqById.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqById message. Does not implicitly {@link farm.ReqById.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqById
     * @static
     * @param {farm.IReqById} m ReqById message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqById.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      return w;
    };
    /**
     * Decodes a ReqById message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqById
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqById} ReqById
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqById.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqById();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqById message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqById
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqById} ReqById
     */


    ReqById.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqById) return d;
      var m = new $root.farm.ReqById();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqById message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqById
     * @static
     * @param {farm.ReqById} m ReqById
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqById.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      return d;
    };
    /**
     * Converts this ReqById to JSON.
     * @function toJSON
     * @memberof farm.ReqById
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqById.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqById;
  }();

  farm.MessageBuildingStateChanged = function () {
    /**
     * Properties of a MessageBuildingStateChanged.
     * @memberof farm
     * @interface IMessageBuildingStateChanged
     * @property {number|Long|null} [id] MessageBuildingStateChanged id
     * @property {farm.BuildingStateType|null} [state] MessageBuildingStateChanged state
     */

    /**
     * Constructs a new MessageBuildingStateChanged.
     * @memberof farm
     * @classdesc Represents a MessageBuildingStateChanged.
     * @implements IMessageBuildingStateChanged
     * @constructor
     * @param {farm.IMessageBuildingStateChanged=} [p] Properties to set
     */
    function MessageBuildingStateChanged(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessageBuildingStateChanged id.
     * @member {number|Long} id
     * @memberof farm.MessageBuildingStateChanged
     * @instance
     */


    MessageBuildingStateChanged.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * MessageBuildingStateChanged state.
     * @member {farm.BuildingStateType} state
     * @memberof farm.MessageBuildingStateChanged
     * @instance
     */

    MessageBuildingStateChanged.prototype.state = 0;
    /**
     * Encodes the specified MessageBuildingStateChanged message. Does not implicitly {@link farm.MessageBuildingStateChanged.verify|verify} messages.
     * @function encode
     * @memberof farm.MessageBuildingStateChanged
     * @static
     * @param {farm.IMessageBuildingStateChanged} m MessageBuildingStateChanged message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessageBuildingStateChanged.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(16).int32(m.state);
      return w;
    };
    /**
     * Decodes a MessageBuildingStateChanged message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessageBuildingStateChanged
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessageBuildingStateChanged} MessageBuildingStateChanged
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessageBuildingStateChanged.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessageBuildingStateChanged();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.state = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessageBuildingStateChanged message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessageBuildingStateChanged
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessageBuildingStateChanged} MessageBuildingStateChanged
     */


    MessageBuildingStateChanged.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessageBuildingStateChanged) return d;
      var m = new $root.farm.MessageBuildingStateChanged();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      switch (d.state) {
        case "Invalid":
        case 0:
          m.state = 0;
          break;

        case "Building":
        case 1:
          m.state = 1;
          break;

        case "Upgrading":
        case 2:
          m.state = 2;
          break;

        case "PreComplete":
        case 3:
          m.state = 3;
          break;

        case "Normal":
        case 4:
          m.state = 4;
          break;

        case "Abandoned":
        case 5:
          m.state = 5;
          break;

        case "Lock":
        case 6:
          m.state = 6;
          break;
      }

      return m;
    };
    /**
     * Creates a plain object from a MessageBuildingStateChanged message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessageBuildingStateChanged
     * @static
     * @param {farm.MessageBuildingStateChanged} m MessageBuildingStateChanged
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessageBuildingStateChanged.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.state = o.enums === String ? "Invalid" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.state != null && m.hasOwnProperty("state")) {
        d.state = o.enums === String ? $root.farm.BuildingStateType[m.state] : m.state;
      }

      return d;
    };
    /**
     * Converts this MessageBuildingStateChanged to JSON.
     * @function toJSON
     * @memberof farm.MessageBuildingStateChanged
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessageBuildingStateChanged.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessageBuildingStateChanged;
  }();

  farm.MessageCurrencyStateChanged = function () {
    /**
     * Properties of a MessageCurrencyStateChanged.
     * @memberof farm
     * @interface IMessageCurrencyStateChanged
     * @property {number|null} [coin] MessageCurrencyStateChanged coin
     * @property {number|null} [crystal] MessageCurrencyStateChanged crystal
     * @property {number|null} [heart] MessageCurrencyStateChanged heart
     */

    /**
     * Constructs a new MessageCurrencyStateChanged.
     * @memberof farm
     * @classdesc Represents a MessageCurrencyStateChanged.
     * @implements IMessageCurrencyStateChanged
     * @constructor
     * @param {farm.IMessageCurrencyStateChanged=} [p] Properties to set
     */
    function MessageCurrencyStateChanged(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessageCurrencyStateChanged coin.
     * @member {number} coin
     * @memberof farm.MessageCurrencyStateChanged
     * @instance
     */


    MessageCurrencyStateChanged.prototype.coin = 0;
    /**
     * MessageCurrencyStateChanged crystal.
     * @member {number} crystal
     * @memberof farm.MessageCurrencyStateChanged
     * @instance
     */

    MessageCurrencyStateChanged.prototype.crystal = 0;
    /**
     * MessageCurrencyStateChanged heart.
     * @member {number} heart
     * @memberof farm.MessageCurrencyStateChanged
     * @instance
     */

    MessageCurrencyStateChanged.prototype.heart = 0;
    /**
     * Encodes the specified MessageCurrencyStateChanged message. Does not implicitly {@link farm.MessageCurrencyStateChanged.verify|verify} messages.
     * @function encode
     * @memberof farm.MessageCurrencyStateChanged
     * @static
     * @param {farm.IMessageCurrencyStateChanged} m MessageCurrencyStateChanged message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessageCurrencyStateChanged.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.coin != null && Object.hasOwnProperty.call(m, "coin")) w.uint32(8).int32(m.coin);
      if (m.crystal != null && Object.hasOwnProperty.call(m, "crystal")) w.uint32(16).int32(m.crystal);
      if (m.heart != null && Object.hasOwnProperty.call(m, "heart")) w.uint32(24).int32(m.heart);
      return w;
    };
    /**
     * Decodes a MessageCurrencyStateChanged message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessageCurrencyStateChanged
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessageCurrencyStateChanged} MessageCurrencyStateChanged
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessageCurrencyStateChanged.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessageCurrencyStateChanged();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.coin = r.int32();
            break;

          case 2:
            m.crystal = r.int32();
            break;

          case 3:
            m.heart = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessageCurrencyStateChanged message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessageCurrencyStateChanged
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessageCurrencyStateChanged} MessageCurrencyStateChanged
     */


    MessageCurrencyStateChanged.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessageCurrencyStateChanged) return d;
      var m = new $root.farm.MessageCurrencyStateChanged();

      if (d.coin != null) {
        m.coin = d.coin | 0;
      }

      if (d.crystal != null) {
        m.crystal = d.crystal | 0;
      }

      if (d.heart != null) {
        m.heart = d.heart | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a MessageCurrencyStateChanged message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessageCurrencyStateChanged
     * @static
     * @param {farm.MessageCurrencyStateChanged} m MessageCurrencyStateChanged
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessageCurrencyStateChanged.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.coin = 0;
        d.crystal = 0;
        d.heart = 0;
      }

      if (m.coin != null && m.hasOwnProperty("coin")) {
        d.coin = m.coin;
      }

      if (m.crystal != null && m.hasOwnProperty("crystal")) {
        d.crystal = m.crystal;
      }

      if (m.heart != null && m.hasOwnProperty("heart")) {
        d.heart = m.heart;
      }

      return d;
    };
    /**
     * Converts this MessageCurrencyStateChanged to JSON.
     * @function toJSON
     * @memberof farm.MessageCurrencyStateChanged
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessageCurrencyStateChanged.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessageCurrencyStateChanged;
  }();

  farm.ReqEditBuilding = function () {
    /**
     * Properties of a ReqEditBuilding.
     * @memberof farm
     * @interface IReqEditBuilding
     * @property {number|Long|null} [id] ReqEditBuilding id
     * @property {boolean|null} [rotated] ReqEditBuilding rotated
     * @property {farm.IPos|null} [pos] ReqEditBuilding pos
     */

    /**
     * Constructs a new ReqEditBuilding.
     * @memberof farm
     * @classdesc Represents a ReqEditBuilding.
     * @implements IReqEditBuilding
     * @constructor
     * @param {farm.IReqEditBuilding=} [p] Properties to set
     */
    function ReqEditBuilding(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqEditBuilding id.
     * @member {number|Long} id
     * @memberof farm.ReqEditBuilding
     * @instance
     */


    ReqEditBuilding.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqEditBuilding rotated.
     * @member {boolean} rotated
     * @memberof farm.ReqEditBuilding
     * @instance
     */

    ReqEditBuilding.prototype.rotated = false;
    /**
     * ReqEditBuilding pos.
     * @member {farm.IPos|null|undefined} pos
     * @memberof farm.ReqEditBuilding
     * @instance
     */

    ReqEditBuilding.prototype.pos = null;
    /**
     * Encodes the specified ReqEditBuilding message. Does not implicitly {@link farm.ReqEditBuilding.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqEditBuilding
     * @static
     * @param {farm.IReqEditBuilding} m ReqEditBuilding message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqEditBuilding.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.rotated != null && Object.hasOwnProperty.call(m, "rotated")) w.uint32(16).bool(m.rotated);
      if (m.pos != null && Object.hasOwnProperty.call(m, "pos")) $root.farm.Pos.encode(m.pos, w.uint32(26).fork()).ldelim();
      return w;
    };
    /**
     * Decodes a ReqEditBuilding message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqEditBuilding
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqEditBuilding} ReqEditBuilding
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqEditBuilding.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqEditBuilding();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.rotated = r.bool();
            break;

          case 3:
            m.pos = $root.farm.Pos.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqEditBuilding message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqEditBuilding
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqEditBuilding} ReqEditBuilding
     */


    ReqEditBuilding.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqEditBuilding) return d;
      var m = new $root.farm.ReqEditBuilding();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.rotated != null) {
        m.rotated = Boolean(d.rotated);
      }

      if (d.pos != null) {
        if (typeof d.pos !== "object") throw TypeError(".farm.ReqEditBuilding.pos: object expected");
        m.pos = $root.farm.Pos.fromObject(d.pos);
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqEditBuilding message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqEditBuilding
     * @static
     * @param {farm.ReqEditBuilding} m ReqEditBuilding
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqEditBuilding.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.rotated = false;
        d.pos = null;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.rotated != null && m.hasOwnProperty("rotated")) {
        d.rotated = m.rotated;
      }

      if (m.pos != null && m.hasOwnProperty("pos")) {
        d.pos = $root.farm.Pos.toObject(m.pos, o);
      }

      return d;
    };
    /**
     * Converts this ReqEditBuilding to JSON.
     * @function toJSON
     * @memberof farm.ReqEditBuilding
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqEditBuilding.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqEditBuilding;
  }();

  farm.RespRecovery = function () {
    /**
     * Properties of a RespRecovery.
     * @memberof farm
     * @interface IRespRecovery
     * @property {number|Long|null} [id] RespRecovery id
     * @property {number|null} [tkCrystalLeft] RespRecovery tkCrystalLeft
     */

    /**
     * Constructs a new RespRecovery.
     * @memberof farm
     * @classdesc Represents a RespRecovery.
     * @implements IRespRecovery
     * @constructor
     * @param {farm.IRespRecovery=} [p] Properties to set
     */
    function RespRecovery(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespRecovery id.
     * @member {number|Long} id
     * @memberof farm.RespRecovery
     * @instance
     */


    RespRecovery.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespRecovery tkCrystalLeft.
     * @member {number} tkCrystalLeft
     * @memberof farm.RespRecovery
     * @instance
     */

    RespRecovery.prototype.tkCrystalLeft = 0;
    /**
     * Encodes the specified RespRecovery message. Does not implicitly {@link farm.RespRecovery.verify|verify} messages.
     * @function encode
     * @memberof farm.RespRecovery
     * @static
     * @param {farm.IRespRecovery} m RespRecovery message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespRecovery.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.tkCrystalLeft != null && Object.hasOwnProperty.call(m, "tkCrystalLeft")) w.uint32(16).int32(m.tkCrystalLeft);
      return w;
    };
    /**
     * Decodes a RespRecovery message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespRecovery
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespRecovery} RespRecovery
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespRecovery.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespRecovery();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.tkCrystalLeft = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespRecovery message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespRecovery
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespRecovery} RespRecovery
     */


    RespRecovery.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespRecovery) return d;
      var m = new $root.farm.RespRecovery();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.tkCrystalLeft != null) {
        m.tkCrystalLeft = d.tkCrystalLeft | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespRecovery message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespRecovery
     * @static
     * @param {farm.RespRecovery} m RespRecovery
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespRecovery.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.tkCrystalLeft = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.tkCrystalLeft != null && m.hasOwnProperty("tkCrystalLeft")) {
        d.tkCrystalLeft = m.tkCrystalLeft;
      }

      return d;
    };
    /**
     * Converts this RespRecovery to JSON.
     * @function toJSON
     * @memberof farm.RespRecovery
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespRecovery.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespRecovery;
  }();

  farm.RespCompleteImm = function () {
    /**
     * Properties of a RespCompleteImm.
     * @memberof farm
     * @interface IRespCompleteImm
     * @property {number|Long|null} [id] RespCompleteImm id
     * @property {number|null} [tkCrystalLeft] RespCompleteImm tkCrystalLeft
     */

    /**
     * Constructs a new RespCompleteImm.
     * @memberof farm
     * @classdesc Represents a RespCompleteImm.
     * @implements IRespCompleteImm
     * @constructor
     * @param {farm.IRespCompleteImm=} [p] Properties to set
     */
    function RespCompleteImm(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespCompleteImm id.
     * @member {number|Long} id
     * @memberof farm.RespCompleteImm
     * @instance
     */


    RespCompleteImm.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespCompleteImm tkCrystalLeft.
     * @member {number} tkCrystalLeft
     * @memberof farm.RespCompleteImm
     * @instance
     */

    RespCompleteImm.prototype.tkCrystalLeft = 0;
    /**
     * Encodes the specified RespCompleteImm message. Does not implicitly {@link farm.RespCompleteImm.verify|verify} messages.
     * @function encode
     * @memberof farm.RespCompleteImm
     * @static
     * @param {farm.IRespCompleteImm} m RespCompleteImm message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespCompleteImm.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.tkCrystalLeft != null && Object.hasOwnProperty.call(m, "tkCrystalLeft")) w.uint32(16).int32(m.tkCrystalLeft);
      return w;
    };
    /**
     * Decodes a RespCompleteImm message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespCompleteImm
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespCompleteImm} RespCompleteImm
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespCompleteImm.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespCompleteImm();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.tkCrystalLeft = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespCompleteImm message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespCompleteImm
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespCompleteImm} RespCompleteImm
     */


    RespCompleteImm.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespCompleteImm) return d;
      var m = new $root.farm.RespCompleteImm();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.tkCrystalLeft != null) {
        m.tkCrystalLeft = d.tkCrystalLeft | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespCompleteImm message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespCompleteImm
     * @static
     * @param {farm.RespCompleteImm} m RespCompleteImm
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespCompleteImm.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.tkCrystalLeft = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.tkCrystalLeft != null && m.hasOwnProperty("tkCrystalLeft")) {
        d.tkCrystalLeft = m.tkCrystalLeft;
      }

      return d;
    };
    /**
     * Converts this RespCompleteImm to JSON.
     * @function toJSON
     * @memberof farm.RespCompleteImm
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespCompleteImm.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespCompleteImm;
  }();

  farm.ReqNoBodyParam = function () {
    /**
     * Properties of a ReqNoBodyParam.
     * @memberof farm
     * @interface IReqNoBodyParam
     */

    /**
     * Constructs a new ReqNoBodyParam.
     * @memberof farm
     * @classdesc Represents a ReqNoBodyParam.
     * @implements IReqNoBodyParam
     * @constructor
     * @param {farm.IReqNoBodyParam=} [p] Properties to set
     */
    function ReqNoBodyParam(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Encodes the specified ReqNoBodyParam message. Does not implicitly {@link farm.ReqNoBodyParam.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqNoBodyParam
     * @static
     * @param {farm.IReqNoBodyParam} m ReqNoBodyParam message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    ReqNoBodyParam.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      return w;
    };
    /**
     * Decodes a ReqNoBodyParam message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqNoBodyParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqNoBodyParam} ReqNoBodyParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqNoBodyParam.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqNoBodyParam();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqNoBodyParam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqNoBodyParam
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqNoBodyParam} ReqNoBodyParam
     */


    ReqNoBodyParam.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqNoBodyParam) return d;
      return new $root.farm.ReqNoBodyParam();
    };
    /**
     * Creates a plain object from a ReqNoBodyParam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqNoBodyParam
     * @static
     * @param {farm.ReqNoBodyParam} m ReqNoBodyParam
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqNoBodyParam.toObject = function toObject() {
      return {};
    };
    /**
     * Converts this ReqNoBodyParam to JSON.
     * @function toJSON
     * @memberof farm.ReqNoBodyParam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqNoBodyParam.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqNoBodyParam;
  }();

  farm.RespNoBodyParam = function () {
    /**
     * Properties of a RespNoBodyParam.
     * @memberof farm
     * @interface IRespNoBodyParam
     */

    /**
     * Constructs a new RespNoBodyParam.
     * @memberof farm
     * @classdesc Represents a RespNoBodyParam.
     * @implements IRespNoBodyParam
     * @constructor
     * @param {farm.IRespNoBodyParam=} [p] Properties to set
     */
    function RespNoBodyParam(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Encodes the specified RespNoBodyParam message. Does not implicitly {@link farm.RespNoBodyParam.verify|verify} messages.
     * @function encode
     * @memberof farm.RespNoBodyParam
     * @static
     * @param {farm.IRespNoBodyParam} m RespNoBodyParam message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    RespNoBodyParam.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      return w;
    };
    /**
     * Decodes a RespNoBodyParam message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespNoBodyParam
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespNoBodyParam} RespNoBodyParam
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespNoBodyParam.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespNoBodyParam();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespNoBodyParam message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespNoBodyParam
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespNoBodyParam} RespNoBodyParam
     */


    RespNoBodyParam.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespNoBodyParam) return d;
      return new $root.farm.RespNoBodyParam();
    };
    /**
     * Creates a plain object from a RespNoBodyParam message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespNoBodyParam
     * @static
     * @param {farm.RespNoBodyParam} m RespNoBodyParam
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespNoBodyParam.toObject = function toObject() {
      return {};
    };
    /**
     * Converts this RespNoBodyParam to JSON.
     * @function toJSON
     * @memberof farm.RespNoBodyParam
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespNoBodyParam.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespNoBodyParam;
  }();

  farm.RespManorHeartInfo = function () {
    /**
     * Properties of a RespManorHeartInfo.
     * @memberof farm
     * @interface IRespManorHeartInfo
     * @property {number|Long|null} [id] RespManorHeartInfo id
     * @property {string|null} [nike_name] RespManorHeartInfo nike_name
     * @property {string|null} [user_code] RespManorHeartInfo user_code
     * @property {number|Long|null} [tk_gold] RespManorHeartInfo tk_gold
     * @property {number|Long|null} [tk_love] RespManorHeartInfo tk_love
     * @property {number|Long|null} [tk_crystal] RespManorHeartInfo tk_crystal
     * @property {number|null} [avatar_id] RespManorHeartInfo avatar_id
     * @property {Array.<farm.IManorHeartBuildingListItem>|null} [buildings] RespManorHeartInfo buildings
     */

    /**
     * Constructs a new RespManorHeartInfo.
     * @memberof farm
     * @classdesc Represents a RespManorHeartInfo.
     * @implements IRespManorHeartInfo
     * @constructor
     * @param {farm.IRespManorHeartInfo=} [p] Properties to set
     */
    function RespManorHeartInfo(p) {
      this.buildings = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespManorHeartInfo id.
     * @member {number|Long} id
     * @memberof farm.RespManorHeartInfo
     * @instance
     */


    RespManorHeartInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespManorHeartInfo nike_name.
     * @member {string} nike_name
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.nike_name = "";
    /**
     * RespManorHeartInfo user_code.
     * @member {string} user_code
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.user_code = "";
    /**
     * RespManorHeartInfo tk_gold.
     * @member {number|Long} tk_gold
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.tk_gold = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespManorHeartInfo tk_love.
     * @member {number|Long} tk_love
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.tk_love = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespManorHeartInfo tk_crystal.
     * @member {number|Long} tk_crystal
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.tk_crystal = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespManorHeartInfo avatar_id.
     * @member {number} avatar_id
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.avatar_id = 0;
    /**
     * RespManorHeartInfo buildings.
     * @member {Array.<farm.IManorHeartBuildingListItem>} buildings
     * @memberof farm.RespManorHeartInfo
     * @instance
     */

    RespManorHeartInfo.prototype.buildings = $util.emptyArray;
    /**
     * Encodes the specified RespManorHeartInfo message. Does not implicitly {@link farm.RespManorHeartInfo.verify|verify} messages.
     * @function encode
     * @memberof farm.RespManorHeartInfo
     * @static
     * @param {farm.IRespManorHeartInfo} m RespManorHeartInfo message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespManorHeartInfo.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.nike_name != null && Object.hasOwnProperty.call(m, "nike_name")) w.uint32(18).string(m.nike_name);
      if (m.user_code != null && Object.hasOwnProperty.call(m, "user_code")) w.uint32(26).string(m.user_code);
      if (m.tk_gold != null && Object.hasOwnProperty.call(m, "tk_gold")) w.uint32(32).int64(m.tk_gold);
      if (m.tk_love != null && Object.hasOwnProperty.call(m, "tk_love")) w.uint32(40).int64(m.tk_love);
      if (m.tk_crystal != null && Object.hasOwnProperty.call(m, "tk_crystal")) w.uint32(48).int64(m.tk_crystal);
      if (m.avatar_id != null && Object.hasOwnProperty.call(m, "avatar_id")) w.uint32(56).int32(m.avatar_id);

      if (m.buildings != null && m.buildings.length) {
        for (var i = 0; i < m.buildings.length; ++i) {
          $root.farm.ManorHeartBuildingListItem.encode(m.buildings[i], w.uint32(82).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespManorHeartInfo message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespManorHeartInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespManorHeartInfo} RespManorHeartInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespManorHeartInfo.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespManorHeartInfo();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.nike_name = r.string();
            break;

          case 3:
            m.user_code = r.string();
            break;

          case 4:
            m.tk_gold = r.int64();
            break;

          case 5:
            m.tk_love = r.int64();
            break;

          case 6:
            m.tk_crystal = r.int64();
            break;

          case 7:
            m.avatar_id = r.int32();
            break;

          case 10:
            if (!(m.buildings && m.buildings.length)) m.buildings = [];
            m.buildings.push($root.farm.ManorHeartBuildingListItem.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespManorHeartInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespManorHeartInfo
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespManorHeartInfo} RespManorHeartInfo
     */


    RespManorHeartInfo.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespManorHeartInfo) return d;
      var m = new $root.farm.RespManorHeartInfo();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.nike_name != null) {
        m.nike_name = String(d.nike_name);
      }

      if (d.user_code != null) {
        m.user_code = String(d.user_code);
      }

      if (d.tk_gold != null) {
        if ($util.Long) (m.tk_gold = $util.Long.fromValue(d.tk_gold)).unsigned = false;else if (typeof d.tk_gold === "string") m.tk_gold = parseInt(d.tk_gold, 10);else if (typeof d.tk_gold === "number") m.tk_gold = d.tk_gold;else if (typeof d.tk_gold === "object") m.tk_gold = new $util.LongBits(d.tk_gold.low >>> 0, d.tk_gold.high >>> 0).toNumber();
      }

      if (d.tk_love != null) {
        if ($util.Long) (m.tk_love = $util.Long.fromValue(d.tk_love)).unsigned = false;else if (typeof d.tk_love === "string") m.tk_love = parseInt(d.tk_love, 10);else if (typeof d.tk_love === "number") m.tk_love = d.tk_love;else if (typeof d.tk_love === "object") m.tk_love = new $util.LongBits(d.tk_love.low >>> 0, d.tk_love.high >>> 0).toNumber();
      }

      if (d.tk_crystal != null) {
        if ($util.Long) (m.tk_crystal = $util.Long.fromValue(d.tk_crystal)).unsigned = false;else if (typeof d.tk_crystal === "string") m.tk_crystal = parseInt(d.tk_crystal, 10);else if (typeof d.tk_crystal === "number") m.tk_crystal = d.tk_crystal;else if (typeof d.tk_crystal === "object") m.tk_crystal = new $util.LongBits(d.tk_crystal.low >>> 0, d.tk_crystal.high >>> 0).toNumber();
      }

      if (d.avatar_id != null) {
        m.avatar_id = d.avatar_id | 0;
      }

      if (d.buildings) {
        if (!Array.isArray(d.buildings)) throw TypeError(".farm.RespManorHeartInfo.buildings: array expected");
        m.buildings = [];

        for (var i = 0; i < d.buildings.length; ++i) {
          if (typeof d.buildings[i] !== "object") throw TypeError(".farm.RespManorHeartInfo.buildings: object expected");
          m.buildings[i] = $root.farm.ManorHeartBuildingListItem.fromObject(d.buildings[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespManorHeartInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespManorHeartInfo
     * @static
     * @param {farm.RespManorHeartInfo} m RespManorHeartInfo
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespManorHeartInfo.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.buildings = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.nike_name = "";
        d.user_code = "";

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.tk_gold = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.tk_gold = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.tk_love = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.tk_love = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.tk_crystal = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.tk_crystal = o.longs === String ? "0" : 0;

        d.avatar_id = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.nike_name != null && m.hasOwnProperty("nike_name")) {
        d.nike_name = m.nike_name;
      }

      if (m.user_code != null && m.hasOwnProperty("user_code")) {
        d.user_code = m.user_code;
      }

      if (m.tk_gold != null && m.hasOwnProperty("tk_gold")) {
        if (typeof m.tk_gold === "number") d.tk_gold = o.longs === String ? String(m.tk_gold) : m.tk_gold;else d.tk_gold = o.longs === String ? $util.Long.prototype.toString.call(m.tk_gold) : o.longs === Number ? new $util.LongBits(m.tk_gold.low >>> 0, m.tk_gold.high >>> 0).toNumber() : m.tk_gold;
      }

      if (m.tk_love != null && m.hasOwnProperty("tk_love")) {
        if (typeof m.tk_love === "number") d.tk_love = o.longs === String ? String(m.tk_love) : m.tk_love;else d.tk_love = o.longs === String ? $util.Long.prototype.toString.call(m.tk_love) : o.longs === Number ? new $util.LongBits(m.tk_love.low >>> 0, m.tk_love.high >>> 0).toNumber() : m.tk_love;
      }

      if (m.tk_crystal != null && m.hasOwnProperty("tk_crystal")) {
        if (typeof m.tk_crystal === "number") d.tk_crystal = o.longs === String ? String(m.tk_crystal) : m.tk_crystal;else d.tk_crystal = o.longs === String ? $util.Long.prototype.toString.call(m.tk_crystal) : o.longs === Number ? new $util.LongBits(m.tk_crystal.low >>> 0, m.tk_crystal.high >>> 0).toNumber() : m.tk_crystal;
      }

      if (m.avatar_id != null && m.hasOwnProperty("avatar_id")) {
        d.avatar_id = m.avatar_id;
      }

      if (m.buildings && m.buildings.length) {
        d.buildings = [];

        for (var j = 0; j < m.buildings.length; ++j) {
          d.buildings[j] = $root.farm.ManorHeartBuildingListItem.toObject(m.buildings[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespManorHeartInfo to JSON.
     * @function toJSON
     * @memberof farm.RespManorHeartInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespManorHeartInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespManorHeartInfo;
  }();

  farm.ManorHeartBuildingListItem = function () {
    /**
     * Properties of a ManorHeartBuildingListItem.
     * @memberof farm
     * @interface IManorHeartBuildingListItem
     * @property {number|Long|null} [id] ManorHeartBuildingListItem id
     * @property {number|null} [configID] ManorHeartBuildingListItem configID
     */

    /**
     * Constructs a new ManorHeartBuildingListItem.
     * @memberof farm
     * @classdesc Represents a ManorHeartBuildingListItem.
     * @implements IManorHeartBuildingListItem
     * @constructor
     * @param {farm.IManorHeartBuildingListItem=} [p] Properties to set
     */
    function ManorHeartBuildingListItem(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ManorHeartBuildingListItem id.
     * @member {number|Long} id
     * @memberof farm.ManorHeartBuildingListItem
     * @instance
     */


    ManorHeartBuildingListItem.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ManorHeartBuildingListItem configID.
     * @member {number} configID
     * @memberof farm.ManorHeartBuildingListItem
     * @instance
     */

    ManorHeartBuildingListItem.prototype.configID = 0;
    /**
     * Encodes the specified ManorHeartBuildingListItem message. Does not implicitly {@link farm.ManorHeartBuildingListItem.verify|verify} messages.
     * @function encode
     * @memberof farm.ManorHeartBuildingListItem
     * @static
     * @param {farm.IManorHeartBuildingListItem} m ManorHeartBuildingListItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ManorHeartBuildingListItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.configID != null && Object.hasOwnProperty.call(m, "configID")) w.uint32(16).int32(m.configID);
      return w;
    };
    /**
     * Decodes a ManorHeartBuildingListItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ManorHeartBuildingListItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ManorHeartBuildingListItem} ManorHeartBuildingListItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ManorHeartBuildingListItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ManorHeartBuildingListItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.configID = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ManorHeartBuildingListItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ManorHeartBuildingListItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ManorHeartBuildingListItem} ManorHeartBuildingListItem
     */


    ManorHeartBuildingListItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ManorHeartBuildingListItem) return d;
      var m = new $root.farm.ManorHeartBuildingListItem();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.configID != null) {
        m.configID = d.configID | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ManorHeartBuildingListItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ManorHeartBuildingListItem
     * @static
     * @param {farm.ManorHeartBuildingListItem} m ManorHeartBuildingListItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ManorHeartBuildingListItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.configID = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.configID != null && m.hasOwnProperty("configID")) {
        d.configID = m.configID;
      }

      return d;
    };
    /**
     * Converts this ManorHeartBuildingListItem to JSON.
     * @function toJSON
     * @memberof farm.ManorHeartBuildingListItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ManorHeartBuildingListItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ManorHeartBuildingListItem;
  }();

  farm.RespUserAvatars = function () {
    /**
     * Properties of a RespUserAvatars.
     * @memberof farm
     * @interface IRespUserAvatars
     * @property {Array.<number>|null} [avatarIds] RespUserAvatars avatarIds
     */

    /**
     * Constructs a new RespUserAvatars.
     * @memberof farm
     * @classdesc Represents a RespUserAvatars.
     * @implements IRespUserAvatars
     * @constructor
     * @param {farm.IRespUserAvatars=} [p] Properties to set
     */
    function RespUserAvatars(p) {
      this.avatarIds = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespUserAvatars avatarIds.
     * @member {Array.<number>} avatarIds
     * @memberof farm.RespUserAvatars
     * @instance
     */


    RespUserAvatars.prototype.avatarIds = $util.emptyArray;
    /**
     * Encodes the specified RespUserAvatars message. Does not implicitly {@link farm.RespUserAvatars.verify|verify} messages.
     * @function encode
     * @memberof farm.RespUserAvatars
     * @static
     * @param {farm.IRespUserAvatars} m RespUserAvatars message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespUserAvatars.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.avatarIds != null && m.avatarIds.length) {
        w.uint32(10).fork();

        for (var i = 0; i < m.avatarIds.length; ++i) {
          w.int32(m.avatarIds[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a RespUserAvatars message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespUserAvatars
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespUserAvatars} RespUserAvatars
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespUserAvatars.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespUserAvatars();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.avatarIds && m.avatarIds.length)) m.avatarIds = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.avatarIds.push(r.int32());
              }
            } else m.avatarIds.push(r.int32());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespUserAvatars message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespUserAvatars
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespUserAvatars} RespUserAvatars
     */


    RespUserAvatars.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespUserAvatars) return d;
      var m = new $root.farm.RespUserAvatars();

      if (d.avatarIds) {
        if (!Array.isArray(d.avatarIds)) throw TypeError(".farm.RespUserAvatars.avatarIds: array expected");
        m.avatarIds = [];

        for (var i = 0; i < d.avatarIds.length; ++i) {
          m.avatarIds[i] = d.avatarIds[i] | 0;
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespUserAvatars message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespUserAvatars
     * @static
     * @param {farm.RespUserAvatars} m RespUserAvatars
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespUserAvatars.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.avatarIds = [];
      }

      if (m.avatarIds && m.avatarIds.length) {
        d.avatarIds = [];

        for (var j = 0; j < m.avatarIds.length; ++j) {
          d.avatarIds[j] = m.avatarIds[j];
        }
      }

      return d;
    };
    /**
     * Converts this RespUserAvatars to JSON.
     * @function toJSON
     * @memberof farm.RespUserAvatars
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespUserAvatars.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespUserAvatars;
  }();

  farm.ReqUpdateAvatar = function () {
    /**
     * Properties of a ReqUpdateAvatar.
     * @memberof farm
     * @interface IReqUpdateAvatar
     * @property {number|null} [id] ReqUpdateAvatar id
     */

    /**
     * Constructs a new ReqUpdateAvatar.
     * @memberof farm
     * @classdesc Represents a ReqUpdateAvatar.
     * @implements IReqUpdateAvatar
     * @constructor
     * @param {farm.IReqUpdateAvatar=} [p] Properties to set
     */
    function ReqUpdateAvatar(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqUpdateAvatar id.
     * @member {number} id
     * @memberof farm.ReqUpdateAvatar
     * @instance
     */


    ReqUpdateAvatar.prototype.id = 0;
    /**
     * Encodes the specified ReqUpdateAvatar message. Does not implicitly {@link farm.ReqUpdateAvatar.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqUpdateAvatar
     * @static
     * @param {farm.IReqUpdateAvatar} m ReqUpdateAvatar message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqUpdateAvatar.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
      return w;
    };
    /**
     * Decodes a ReqUpdateAvatar message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqUpdateAvatar
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqUpdateAvatar} ReqUpdateAvatar
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqUpdateAvatar.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqUpdateAvatar();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqUpdateAvatar message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqUpdateAvatar
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqUpdateAvatar} ReqUpdateAvatar
     */


    ReqUpdateAvatar.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqUpdateAvatar) return d;
      var m = new $root.farm.ReqUpdateAvatar();

      if (d.id != null) {
        m.id = d.id | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqUpdateAvatar message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqUpdateAvatar
     * @static
     * @param {farm.ReqUpdateAvatar} m ReqUpdateAvatar
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqUpdateAvatar.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.id = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        d.id = m.id;
      }

      return d;
    };
    /**
     * Converts this ReqUpdateAvatar to JSON.
     * @function toJSON
     * @memberof farm.ReqUpdateAvatar
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqUpdateAvatar.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqUpdateAvatar;
  }();

  farm.RespUpdateAvatar = function () {
    /**
     * Properties of a RespUpdateAvatar.
     * @memberof farm
     * @interface IRespUpdateAvatar
     * @property {number|null} [id] RespUpdateAvatar id
     */

    /**
     * Constructs a new RespUpdateAvatar.
     * @memberof farm
     * @classdesc Represents a RespUpdateAvatar.
     * @implements IRespUpdateAvatar
     * @constructor
     * @param {farm.IRespUpdateAvatar=} [p] Properties to set
     */
    function RespUpdateAvatar(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespUpdateAvatar id.
     * @member {number} id
     * @memberof farm.RespUpdateAvatar
     * @instance
     */


    RespUpdateAvatar.prototype.id = 0;
    /**
     * Encodes the specified RespUpdateAvatar message. Does not implicitly {@link farm.RespUpdateAvatar.verify|verify} messages.
     * @function encode
     * @memberof farm.RespUpdateAvatar
     * @static
     * @param {farm.IRespUpdateAvatar} m RespUpdateAvatar message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespUpdateAvatar.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
      return w;
    };
    /**
     * Decodes a RespUpdateAvatar message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespUpdateAvatar
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespUpdateAvatar} RespUpdateAvatar
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespUpdateAvatar.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespUpdateAvatar();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespUpdateAvatar message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespUpdateAvatar
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespUpdateAvatar} RespUpdateAvatar
     */


    RespUpdateAvatar.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespUpdateAvatar) return d;
      var m = new $root.farm.RespUpdateAvatar();

      if (d.id != null) {
        m.id = d.id | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespUpdateAvatar message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespUpdateAvatar
     * @static
     * @param {farm.RespUpdateAvatar} m RespUpdateAvatar
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespUpdateAvatar.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.id = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        d.id = m.id;
      }

      return d;
    };
    /**
     * Converts this RespUpdateAvatar to JSON.
     * @function toJSON
     * @memberof farm.RespUpdateAvatar
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespUpdateAvatar.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespUpdateAvatar;
  }();

  farm.ReqUpdateNickName = function () {
    /**
     * Properties of a ReqUpdateNickName.
     * @memberof farm
     * @interface IReqUpdateNickName
     * @property {string|null} [nick_name] ReqUpdateNickName nick_name
     */

    /**
     * Constructs a new ReqUpdateNickName.
     * @memberof farm
     * @classdesc Represents a ReqUpdateNickName.
     * @implements IReqUpdateNickName
     * @constructor
     * @param {farm.IReqUpdateNickName=} [p] Properties to set
     */
    function ReqUpdateNickName(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqUpdateNickName nick_name.
     * @member {string} nick_name
     * @memberof farm.ReqUpdateNickName
     * @instance
     */


    ReqUpdateNickName.prototype.nick_name = "";
    /**
     * Encodes the specified ReqUpdateNickName message. Does not implicitly {@link farm.ReqUpdateNickName.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqUpdateNickName
     * @static
     * @param {farm.IReqUpdateNickName} m ReqUpdateNickName message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqUpdateNickName.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.nick_name != null && Object.hasOwnProperty.call(m, "nick_name")) w.uint32(10).string(m.nick_name);
      return w;
    };
    /**
     * Decodes a ReqUpdateNickName message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqUpdateNickName
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqUpdateNickName} ReqUpdateNickName
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqUpdateNickName.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqUpdateNickName();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.nick_name = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqUpdateNickName message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqUpdateNickName
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqUpdateNickName} ReqUpdateNickName
     */


    ReqUpdateNickName.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqUpdateNickName) return d;
      var m = new $root.farm.ReqUpdateNickName();

      if (d.nick_name != null) {
        m.nick_name = String(d.nick_name);
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqUpdateNickName message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqUpdateNickName
     * @static
     * @param {farm.ReqUpdateNickName} m ReqUpdateNickName
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqUpdateNickName.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.nick_name = "";
      }

      if (m.nick_name != null && m.hasOwnProperty("nick_name")) {
        d.nick_name = m.nick_name;
      }

      return d;
    };
    /**
     * Converts this ReqUpdateNickName to JSON.
     * @function toJSON
     * @memberof farm.ReqUpdateNickName
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqUpdateNickName.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqUpdateNickName;
  }();

  farm.RespUpdateNickName = function () {
    /**
     * Properties of a RespUpdateNickName.
     * @memberof farm
     * @interface IRespUpdateNickName
     * @property {string|null} [nick_name] RespUpdateNickName nick_name
     */

    /**
     * Constructs a new RespUpdateNickName.
     * @memberof farm
     * @classdesc Represents a RespUpdateNickName.
     * @implements IRespUpdateNickName
     * @constructor
     * @param {farm.IRespUpdateNickName=} [p] Properties to set
     */
    function RespUpdateNickName(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespUpdateNickName nick_name.
     * @member {string} nick_name
     * @memberof farm.RespUpdateNickName
     * @instance
     */


    RespUpdateNickName.prototype.nick_name = "";
    /**
     * Encodes the specified RespUpdateNickName message. Does not implicitly {@link farm.RespUpdateNickName.verify|verify} messages.
     * @function encode
     * @memberof farm.RespUpdateNickName
     * @static
     * @param {farm.IRespUpdateNickName} m RespUpdateNickName message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespUpdateNickName.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.nick_name != null && Object.hasOwnProperty.call(m, "nick_name")) w.uint32(10).string(m.nick_name);
      return w;
    };
    /**
     * Decodes a RespUpdateNickName message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespUpdateNickName
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespUpdateNickName} RespUpdateNickName
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespUpdateNickName.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespUpdateNickName();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.nick_name = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespUpdateNickName message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespUpdateNickName
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespUpdateNickName} RespUpdateNickName
     */


    RespUpdateNickName.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespUpdateNickName) return d;
      var m = new $root.farm.RespUpdateNickName();

      if (d.nick_name != null) {
        m.nick_name = String(d.nick_name);
      }

      return m;
    };
    /**
     * Creates a plain object from a RespUpdateNickName message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespUpdateNickName
     * @static
     * @param {farm.RespUpdateNickName} m RespUpdateNickName
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespUpdateNickName.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.nick_name = "";
      }

      if (m.nick_name != null && m.hasOwnProperty("nick_name")) {
        d.nick_name = m.nick_name;
      }

      return d;
    };
    /**
     * Converts this RespUpdateNickName to JSON.
     * @function toJSON
     * @memberof farm.RespUpdateNickName
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespUpdateNickName.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespUpdateNickName;
  }();

  farm.RespBarnInfo = function () {
    /**
     * Properties of a RespBarnInfo.
     * @memberof farm
     * @interface IRespBarnInfo
     * @property {number|Long|null} [id] RespBarnInfo id
     * @property {number|null} [total_capacity] RespBarnInfo total_capacity
     * @property {Array.<farm.IBarnCropItem>|null} [crop_items] RespBarnInfo crop_items
     */

    /**
     * Constructs a new RespBarnInfo.
     * @memberof farm
     * @classdesc Represents a RespBarnInfo.
     * @implements IRespBarnInfo
     * @constructor
     * @param {farm.IRespBarnInfo=} [p] Properties to set
     */
    function RespBarnInfo(p) {
      this.crop_items = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespBarnInfo id.
     * @member {number|Long} id
     * @memberof farm.RespBarnInfo
     * @instance
     */


    RespBarnInfo.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespBarnInfo total_capacity.
     * @member {number} total_capacity
     * @memberof farm.RespBarnInfo
     * @instance
     */

    RespBarnInfo.prototype.total_capacity = 0;
    /**
     * RespBarnInfo crop_items.
     * @member {Array.<farm.IBarnCropItem>} crop_items
     * @memberof farm.RespBarnInfo
     * @instance
     */

    RespBarnInfo.prototype.crop_items = $util.emptyArray;
    /**
     * Encodes the specified RespBarnInfo message. Does not implicitly {@link farm.RespBarnInfo.verify|verify} messages.
     * @function encode
     * @memberof farm.RespBarnInfo
     * @static
     * @param {farm.IRespBarnInfo} m RespBarnInfo message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespBarnInfo.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.total_capacity != null && Object.hasOwnProperty.call(m, "total_capacity")) w.uint32(16).int32(m.total_capacity);

      if (m.crop_items != null && m.crop_items.length) {
        for (var i = 0; i < m.crop_items.length; ++i) {
          $root.farm.BarnCropItem.encode(m.crop_items[i], w.uint32(26).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespBarnInfo message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespBarnInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespBarnInfo} RespBarnInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespBarnInfo.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespBarnInfo();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.total_capacity = r.int32();
            break;

          case 3:
            if (!(m.crop_items && m.crop_items.length)) m.crop_items = [];
            m.crop_items.push($root.farm.BarnCropItem.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespBarnInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespBarnInfo
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespBarnInfo} RespBarnInfo
     */


    RespBarnInfo.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespBarnInfo) return d;
      var m = new $root.farm.RespBarnInfo();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.total_capacity != null) {
        m.total_capacity = d.total_capacity | 0;
      }

      if (d.crop_items) {
        if (!Array.isArray(d.crop_items)) throw TypeError(".farm.RespBarnInfo.crop_items: array expected");
        m.crop_items = [];

        for (var i = 0; i < d.crop_items.length; ++i) {
          if (typeof d.crop_items[i] !== "object") throw TypeError(".farm.RespBarnInfo.crop_items: object expected");
          m.crop_items[i] = $root.farm.BarnCropItem.fromObject(d.crop_items[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespBarnInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespBarnInfo
     * @static
     * @param {farm.RespBarnInfo} m RespBarnInfo
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespBarnInfo.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.crop_items = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.total_capacity = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.total_capacity != null && m.hasOwnProperty("total_capacity")) {
        d.total_capacity = m.total_capacity;
      }

      if (m.crop_items && m.crop_items.length) {
        d.crop_items = [];

        for (var j = 0; j < m.crop_items.length; ++j) {
          d.crop_items[j] = $root.farm.BarnCropItem.toObject(m.crop_items[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespBarnInfo to JSON.
     * @function toJSON
     * @memberof farm.RespBarnInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespBarnInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespBarnInfo;
  }();

  farm.BarnCropItem = function () {
    /**
     * Properties of a BarnCropItem.
     * @memberof farm
     * @interface IBarnCropItem
     * @property {number|Long|null} [id] BarnCropItem id
     * @property {number|null} [configID] BarnCropItem configID
     * @property {number|null} [total_num] BarnCropItem total_num
     */

    /**
     * Constructs a new BarnCropItem.
     * @memberof farm
     * @classdesc Represents a BarnCropItem.
     * @implements IBarnCropItem
     * @constructor
     * @param {farm.IBarnCropItem=} [p] Properties to set
     */
    function BarnCropItem(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * BarnCropItem id.
     * @member {number|Long} id
     * @memberof farm.BarnCropItem
     * @instance
     */


    BarnCropItem.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * BarnCropItem configID.
     * @member {number} configID
     * @memberof farm.BarnCropItem
     * @instance
     */

    BarnCropItem.prototype.configID = 0;
    /**
     * BarnCropItem total_num.
     * @member {number} total_num
     * @memberof farm.BarnCropItem
     * @instance
     */

    BarnCropItem.prototype.total_num = 0;
    /**
     * Encodes the specified BarnCropItem message. Does not implicitly {@link farm.BarnCropItem.verify|verify} messages.
     * @function encode
     * @memberof farm.BarnCropItem
     * @static
     * @param {farm.IBarnCropItem} m BarnCropItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    BarnCropItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.configID != null && Object.hasOwnProperty.call(m, "configID")) w.uint32(16).int32(m.configID);
      if (m.total_num != null && Object.hasOwnProperty.call(m, "total_num")) w.uint32(24).int32(m.total_num);
      return w;
    };
    /**
     * Decodes a BarnCropItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.BarnCropItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.BarnCropItem} BarnCropItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    BarnCropItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.BarnCropItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.configID = r.int32();
            break;

          case 3:
            m.total_num = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a BarnCropItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.BarnCropItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.BarnCropItem} BarnCropItem
     */


    BarnCropItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.BarnCropItem) return d;
      var m = new $root.farm.BarnCropItem();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.configID != null) {
        m.configID = d.configID | 0;
      }

      if (d.total_num != null) {
        m.total_num = d.total_num | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a BarnCropItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.BarnCropItem
     * @static
     * @param {farm.BarnCropItem} m BarnCropItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    BarnCropItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.configID = 0;
        d.total_num = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.configID != null && m.hasOwnProperty("configID")) {
        d.configID = m.configID;
      }

      if (m.total_num != null && m.hasOwnProperty("total_num")) {
        d.total_num = m.total_num;
      }

      return d;
    };
    /**
     * Converts this BarnCropItem to JSON.
     * @function toJSON
     * @memberof farm.BarnCropItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    BarnCropItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return BarnCropItem;
  }();

  farm.ReqBarnSell = function () {
    /**
     * Properties of a ReqBarnSell.
     * @memberof farm
     * @interface IReqBarnSell
     * @property {number|Long|null} [id] ReqBarnSell id
     * @property {number|null} [num] ReqBarnSell num
     */

    /**
     * Constructs a new ReqBarnSell.
     * @memberof farm
     * @classdesc Represents a ReqBarnSell.
     * @implements IReqBarnSell
     * @constructor
     * @param {farm.IReqBarnSell=} [p] Properties to set
     */
    function ReqBarnSell(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqBarnSell id.
     * @member {number|Long} id
     * @memberof farm.ReqBarnSell
     * @instance
     */


    ReqBarnSell.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ReqBarnSell num.
     * @member {number} num
     * @memberof farm.ReqBarnSell
     * @instance
     */

    ReqBarnSell.prototype.num = 0;
    /**
     * Encodes the specified ReqBarnSell message. Does not implicitly {@link farm.ReqBarnSell.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqBarnSell
     * @static
     * @param {farm.IReqBarnSell} m ReqBarnSell message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqBarnSell.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.num != null && Object.hasOwnProperty.call(m, "num")) w.uint32(16).int32(m.num);
      return w;
    };
    /**
     * Decodes a ReqBarnSell message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqBarnSell
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqBarnSell} ReqBarnSell
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqBarnSell.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqBarnSell();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.num = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqBarnSell message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqBarnSell
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqBarnSell} ReqBarnSell
     */


    ReqBarnSell.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqBarnSell) return d;
      var m = new $root.farm.ReqBarnSell();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.num != null) {
        m.num = d.num | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqBarnSell message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqBarnSell
     * @static
     * @param {farm.ReqBarnSell} m ReqBarnSell
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqBarnSell.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.num = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.num != null && m.hasOwnProperty("num")) {
        d.num = m.num;
      }

      return d;
    };
    /**
     * Converts this ReqBarnSell to JSON.
     * @function toJSON
     * @memberof farm.ReqBarnSell
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqBarnSell.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqBarnSell;
  }();

  farm.RespBarnSell = function () {
    /**
     * Properties of a RespBarnSell.
     * @memberof farm
     * @interface IRespBarnSell
     * @property {number|Long|null} [id] RespBarnSell id
     * @property {number|null} [num] RespBarnSell num
     * @property {number|Long|null} [tk_gold] RespBarnSell tk_gold
     */

    /**
     * Constructs a new RespBarnSell.
     * @memberof farm
     * @classdesc Represents a RespBarnSell.
     * @implements IRespBarnSell
     * @constructor
     * @param {farm.IRespBarnSell=} [p] Properties to set
     */
    function RespBarnSell(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespBarnSell id.
     * @member {number|Long} id
     * @memberof farm.RespBarnSell
     * @instance
     */


    RespBarnSell.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespBarnSell num.
     * @member {number} num
     * @memberof farm.RespBarnSell
     * @instance
     */

    RespBarnSell.prototype.num = 0;
    /**
     * RespBarnSell tk_gold.
     * @member {number|Long} tk_gold
     * @memberof farm.RespBarnSell
     * @instance
     */

    RespBarnSell.prototype.tk_gold = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified RespBarnSell message. Does not implicitly {@link farm.RespBarnSell.verify|verify} messages.
     * @function encode
     * @memberof farm.RespBarnSell
     * @static
     * @param {farm.IRespBarnSell} m RespBarnSell message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespBarnSell.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.num != null && Object.hasOwnProperty.call(m, "num")) w.uint32(16).int32(m.num);
      if (m.tk_gold != null && Object.hasOwnProperty.call(m, "tk_gold")) w.uint32(24).int64(m.tk_gold);
      return w;
    };
    /**
     * Decodes a RespBarnSell message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespBarnSell
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespBarnSell} RespBarnSell
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespBarnSell.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespBarnSell();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.num = r.int32();
            break;

          case 3:
            m.tk_gold = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespBarnSell message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespBarnSell
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespBarnSell} RespBarnSell
     */


    RespBarnSell.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespBarnSell) return d;
      var m = new $root.farm.RespBarnSell();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.num != null) {
        m.num = d.num | 0;
      }

      if (d.tk_gold != null) {
        if ($util.Long) (m.tk_gold = $util.Long.fromValue(d.tk_gold)).unsigned = false;else if (typeof d.tk_gold === "string") m.tk_gold = parseInt(d.tk_gold, 10);else if (typeof d.tk_gold === "number") m.tk_gold = d.tk_gold;else if (typeof d.tk_gold === "object") m.tk_gold = new $util.LongBits(d.tk_gold.low >>> 0, d.tk_gold.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a RespBarnSell message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespBarnSell
     * @static
     * @param {farm.RespBarnSell} m RespBarnSell
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespBarnSell.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.num = 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.tk_gold = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.tk_gold = o.longs === String ? "0" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.num != null && m.hasOwnProperty("num")) {
        d.num = m.num;
      }

      if (m.tk_gold != null && m.hasOwnProperty("tk_gold")) {
        if (typeof m.tk_gold === "number") d.tk_gold = o.longs === String ? String(m.tk_gold) : m.tk_gold;else d.tk_gold = o.longs === String ? $util.Long.prototype.toString.call(m.tk_gold) : o.longs === Number ? new $util.LongBits(m.tk_gold.low >>> 0, m.tk_gold.high >>> 0).toNumber() : m.tk_gold;
      }

      return d;
    };
    /**
     * Converts this RespBarnSell to JSON.
     * @function toJSON
     * @memberof farm.RespBarnSell
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespBarnSell.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespBarnSell;
  }();

  farm.PropCfgItem = function () {
    /**
     * Properties of a PropCfgItem.
     * @memberof farm
     * @interface IPropCfgItem
     * @property {number|null} [id] PropCfgItem id
     * @property {string|null} [name] PropCfgItem name
     * @property {number|null} [display] PropCfgItem display
     * @property {number|null} [type] PropCfgItem type
     * @property {string|null} [desc] PropCfgItem desc
     * @property {number|null} [world] PropCfgItem world
     * @property {string|null} [icon_path] PropCfgItem icon_path
     * @property {number|null} [sale_price] PropCfgItem sale_price
     */

    /**
     * Constructs a new PropCfgItem.
     * @memberof farm
     * @classdesc Represents a PropCfgItem.
     * @implements IPropCfgItem
     * @constructor
     * @param {farm.IPropCfgItem=} [p] Properties to set
     */
    function PropCfgItem(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * PropCfgItem id.
     * @member {number} id
     * @memberof farm.PropCfgItem
     * @instance
     */


    PropCfgItem.prototype.id = 0;
    /**
     * PropCfgItem name.
     * @member {string} name
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.name = "";
    /**
     * PropCfgItem display.
     * @member {number} display
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.display = 0;
    /**
     * PropCfgItem type.
     * @member {number} type
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.type = 0;
    /**
     * PropCfgItem desc.
     * @member {string} desc
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.desc = "";
    /**
     * PropCfgItem world.
     * @member {number} world
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.world = 0;
    /**
     * PropCfgItem icon_path.
     * @member {string} icon_path
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.icon_path = "";
    /**
     * PropCfgItem sale_price.
     * @member {number} sale_price
     * @memberof farm.PropCfgItem
     * @instance
     */

    PropCfgItem.prototype.sale_price = 0;
    /**
     * Encodes the specified PropCfgItem message. Does not implicitly {@link farm.PropCfgItem.verify|verify} messages.
     * @function encode
     * @memberof farm.PropCfgItem
     * @static
     * @param {farm.IPropCfgItem} m PropCfgItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    PropCfgItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
      if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
      if (m.display != null && Object.hasOwnProperty.call(m, "display")) w.uint32(24).int32(m.display);
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(32).int32(m.type);
      if (m.desc != null && Object.hasOwnProperty.call(m, "desc")) w.uint32(42).string(m.desc);
      if (m.world != null && Object.hasOwnProperty.call(m, "world")) w.uint32(48).int32(m.world);
      if (m.icon_path != null && Object.hasOwnProperty.call(m, "icon_path")) w.uint32(58).string(m.icon_path);
      if (m.sale_price != null && Object.hasOwnProperty.call(m, "sale_price")) w.uint32(64).int32(m.sale_price);
      return w;
    };
    /**
     * Decodes a PropCfgItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.PropCfgItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.PropCfgItem} PropCfgItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    PropCfgItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.PropCfgItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int32();
            break;

          case 2:
            m.name = r.string();
            break;

          case 3:
            m.display = r.int32();
            break;

          case 4:
            m.type = r.int32();
            break;

          case 5:
            m.desc = r.string();
            break;

          case 6:
            m.world = r.int32();
            break;

          case 7:
            m.icon_path = r.string();
            break;

          case 8:
            m.sale_price = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a PropCfgItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.PropCfgItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.PropCfgItem} PropCfgItem
     */


    PropCfgItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.PropCfgItem) return d;
      var m = new $root.farm.PropCfgItem();

      if (d.id != null) {
        m.id = d.id | 0;
      }

      if (d.name != null) {
        m.name = String(d.name);
      }

      if (d.display != null) {
        m.display = d.display | 0;
      }

      if (d.type != null) {
        m.type = d.type | 0;
      }

      if (d.desc != null) {
        m.desc = String(d.desc);
      }

      if (d.world != null) {
        m.world = d.world | 0;
      }

      if (d.icon_path != null) {
        m.icon_path = String(d.icon_path);
      }

      if (d.sale_price != null) {
        m.sale_price = d.sale_price | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a PropCfgItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.PropCfgItem
     * @static
     * @param {farm.PropCfgItem} m PropCfgItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    PropCfgItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.id = 0;
        d.name = "";
        d.display = 0;
        d.type = 0;
        d.desc = "";
        d.world = 0;
        d.icon_path = "";
        d.sale_price = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        d.id = m.id;
      }

      if (m.name != null && m.hasOwnProperty("name")) {
        d.name = m.name;
      }

      if (m.display != null && m.hasOwnProperty("display")) {
        d.display = m.display;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = m.type;
      }

      if (m.desc != null && m.hasOwnProperty("desc")) {
        d.desc = m.desc;
      }

      if (m.world != null && m.hasOwnProperty("world")) {
        d.world = m.world;
      }

      if (m.icon_path != null && m.hasOwnProperty("icon_path")) {
        d.icon_path = m.icon_path;
      }

      if (m.sale_price != null && m.hasOwnProperty("sale_price")) {
        d.sale_price = m.sale_price;
      }

      return d;
    };
    /**
     * Converts this PropCfgItem to JSON.
     * @function toJSON
     * @memberof farm.PropCfgItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    PropCfgItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PropCfgItem;
  }();

  farm.ConditionItem = function () {
    /**
     * Properties of a ConditionItem.
     * @memberof farm
     * @interface IConditionItem
     * @property {number|null} [type] ConditionItem type
     * @property {Array.<number>|null} [value] ConditionItem value
     */

    /**
     * Constructs a new ConditionItem.
     * @memberof farm
     * @classdesc Represents a ConditionItem.
     * @implements IConditionItem
     * @constructor
     * @param {farm.IConditionItem=} [p] Properties to set
     */
    function ConditionItem(p) {
      this.value = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ConditionItem type.
     * @member {number} type
     * @memberof farm.ConditionItem
     * @instance
     */


    ConditionItem.prototype.type = 0;
    /**
     * ConditionItem value.
     * @member {Array.<number>} value
     * @memberof farm.ConditionItem
     * @instance
     */

    ConditionItem.prototype.value = $util.emptyArray;
    /**
     * Encodes the specified ConditionItem message. Does not implicitly {@link farm.ConditionItem.verify|verify} messages.
     * @function encode
     * @memberof farm.ConditionItem
     * @static
     * @param {farm.IConditionItem} m ConditionItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ConditionItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);

      if (m.value != null && m.value.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.value.length; ++i) {
          w.int32(m.value[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a ConditionItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ConditionItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ConditionItem} ConditionItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ConditionItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ConditionItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.type = r.int32();
            break;

          case 2:
            if (!(m.value && m.value.length)) m.value = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.value.push(r.int32());
              }
            } else m.value.push(r.int32());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ConditionItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ConditionItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ConditionItem} ConditionItem
     */


    ConditionItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ConditionItem) return d;
      var m = new $root.farm.ConditionItem();

      if (d.type != null) {
        m.type = d.type | 0;
      }

      if (d.value) {
        if (!Array.isArray(d.value)) throw TypeError(".farm.ConditionItem.value: array expected");
        m.value = [];

        for (var i = 0; i < d.value.length; ++i) {
          m.value[i] = d.value[i] | 0;
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a ConditionItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ConditionItem
     * @static
     * @param {farm.ConditionItem} m ConditionItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ConditionItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.value = [];
      }

      if (o.defaults) {
        d.type = 0;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = m.type;
      }

      if (m.value && m.value.length) {
        d.value = [];

        for (var j = 0; j < m.value.length; ++j) {
          d.value[j] = m.value[j];
        }
      }

      return d;
    };
    /**
     * Converts this ConditionItem to JSON.
     * @function toJSON
     * @memberof farm.ConditionItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ConditionItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ConditionItem;
  }();

  farm.Upgrade = function () {
    /**
     * Properties of an Upgrade.
     * @memberof farm
     * @interface IUpgrade
     * @property {number|null} [level] Upgrade level
     * @property {number|null} [build_dur] Upgrade build_dur
     * @property {Array.<farm.IConditionItem>|null} [build_costs] Upgrade build_costs
     * @property {Array.<farm.IConditionItem>|null} [build_condition] Upgrade build_condition
     * @property {Array.<number>|null} [upgrade_param] Upgrade upgrade_param
     * @property {string|null} [build_desc] Upgrade build_desc
     * @property {string|null} [prefab] Upgrade prefab
     */

    /**
     * Constructs a new Upgrade.
     * @memberof farm
     * @classdesc Represents an Upgrade.
     * @implements IUpgrade
     * @constructor
     * @param {farm.IUpgrade=} [p] Properties to set
     */
    function Upgrade(p) {
      this.build_costs = [];
      this.build_condition = [];
      this.upgrade_param = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Upgrade level.
     * @member {number} level
     * @memberof farm.Upgrade
     * @instance
     */


    Upgrade.prototype.level = 0;
    /**
     * Upgrade build_dur.
     * @member {number} build_dur
     * @memberof farm.Upgrade
     * @instance
     */

    Upgrade.prototype.build_dur = 0;
    /**
     * Upgrade build_costs.
     * @member {Array.<farm.IConditionItem>} build_costs
     * @memberof farm.Upgrade
     * @instance
     */

    Upgrade.prototype.build_costs = $util.emptyArray;
    /**
     * Upgrade build_condition.
     * @member {Array.<farm.IConditionItem>} build_condition
     * @memberof farm.Upgrade
     * @instance
     */

    Upgrade.prototype.build_condition = $util.emptyArray;
    /**
     * Upgrade upgrade_param.
     * @member {Array.<number>} upgrade_param
     * @memberof farm.Upgrade
     * @instance
     */

    Upgrade.prototype.upgrade_param = $util.emptyArray;
    /**
     * Upgrade build_desc.
     * @member {string} build_desc
     * @memberof farm.Upgrade
     * @instance
     */

    Upgrade.prototype.build_desc = "";
    /**
     * Upgrade prefab.
     * @member {string} prefab
     * @memberof farm.Upgrade
     * @instance
     */

    Upgrade.prototype.prefab = "";
    /**
     * Encodes the specified Upgrade message. Does not implicitly {@link farm.Upgrade.verify|verify} messages.
     * @function encode
     * @memberof farm.Upgrade
     * @static
     * @param {farm.IUpgrade} m Upgrade message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Upgrade.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.level != null && Object.hasOwnProperty.call(m, "level")) w.uint32(8).int32(m.level);
      if (m.build_dur != null && Object.hasOwnProperty.call(m, "build_dur")) w.uint32(16).int32(m.build_dur);

      if (m.build_costs != null && m.build_costs.length) {
        for (var i = 0; i < m.build_costs.length; ++i) {
          $root.farm.ConditionItem.encode(m.build_costs[i], w.uint32(26).fork()).ldelim();
        }
      }

      if (m.build_condition != null && m.build_condition.length) {
        for (var i = 0; i < m.build_condition.length; ++i) {
          $root.farm.ConditionItem.encode(m.build_condition[i], w.uint32(34).fork()).ldelim();
        }
      }

      if (m.upgrade_param != null && m.upgrade_param.length) {
        w.uint32(42).fork();

        for (var i = 0; i < m.upgrade_param.length; ++i) {
          w.int32(m.upgrade_param[i]);
        }

        w.ldelim();
      }

      if (m.build_desc != null && Object.hasOwnProperty.call(m, "build_desc")) w.uint32(50).string(m.build_desc);
      if (m.prefab != null && Object.hasOwnProperty.call(m, "prefab")) w.uint32(58).string(m.prefab);
      return w;
    };
    /**
     * Decodes an Upgrade message from the specified reader or buffer.
     * @function decode
     * @memberof farm.Upgrade
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.Upgrade} Upgrade
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Upgrade.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.Upgrade();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.level = r.int32();
            break;

          case 2:
            m.build_dur = r.int32();
            break;

          case 3:
            if (!(m.build_costs && m.build_costs.length)) m.build_costs = [];
            m.build_costs.push($root.farm.ConditionItem.decode(r, r.uint32()));
            break;

          case 4:
            if (!(m.build_condition && m.build_condition.length)) m.build_condition = [];
            m.build_condition.push($root.farm.ConditionItem.decode(r, r.uint32()));
            break;

          case 5:
            if (!(m.upgrade_param && m.upgrade_param.length)) m.upgrade_param = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.upgrade_param.push(r.int32());
              }
            } else m.upgrade_param.push(r.int32());

            break;

          case 6:
            m.build_desc = r.string();
            break;

          case 7:
            m.prefab = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an Upgrade message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.Upgrade
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.Upgrade} Upgrade
     */


    Upgrade.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.Upgrade) return d;
      var m = new $root.farm.Upgrade();

      if (d.level != null) {
        m.level = d.level | 0;
      }

      if (d.build_dur != null) {
        m.build_dur = d.build_dur | 0;
      }

      if (d.build_costs) {
        if (!Array.isArray(d.build_costs)) throw TypeError(".farm.Upgrade.build_costs: array expected");
        m.build_costs = [];

        for (var i = 0; i < d.build_costs.length; ++i) {
          if (typeof d.build_costs[i] !== "object") throw TypeError(".farm.Upgrade.build_costs: object expected");
          m.build_costs[i] = $root.farm.ConditionItem.fromObject(d.build_costs[i]);
        }
      }

      if (d.build_condition) {
        if (!Array.isArray(d.build_condition)) throw TypeError(".farm.Upgrade.build_condition: array expected");
        m.build_condition = [];

        for (var i = 0; i < d.build_condition.length; ++i) {
          if (typeof d.build_condition[i] !== "object") throw TypeError(".farm.Upgrade.build_condition: object expected");
          m.build_condition[i] = $root.farm.ConditionItem.fromObject(d.build_condition[i]);
        }
      }

      if (d.upgrade_param) {
        if (!Array.isArray(d.upgrade_param)) throw TypeError(".farm.Upgrade.upgrade_param: array expected");
        m.upgrade_param = [];

        for (var i = 0; i < d.upgrade_param.length; ++i) {
          m.upgrade_param[i] = d.upgrade_param[i] | 0;
        }
      }

      if (d.build_desc != null) {
        m.build_desc = String(d.build_desc);
      }

      if (d.prefab != null) {
        m.prefab = String(d.prefab);
      }

      return m;
    };
    /**
     * Creates a plain object from an Upgrade message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.Upgrade
     * @static
     * @param {farm.Upgrade} m Upgrade
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Upgrade.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.build_costs = [];
        d.build_condition = [];
        d.upgrade_param = [];
      }

      if (o.defaults) {
        d.level = 0;
        d.build_dur = 0;
        d.build_desc = "";
        d.prefab = "";
      }

      if (m.level != null && m.hasOwnProperty("level")) {
        d.level = m.level;
      }

      if (m.build_dur != null && m.hasOwnProperty("build_dur")) {
        d.build_dur = m.build_dur;
      }

      if (m.build_costs && m.build_costs.length) {
        d.build_costs = [];

        for (var j = 0; j < m.build_costs.length; ++j) {
          d.build_costs[j] = $root.farm.ConditionItem.toObject(m.build_costs[j], o);
        }
      }

      if (m.build_condition && m.build_condition.length) {
        d.build_condition = [];

        for (var j = 0; j < m.build_condition.length; ++j) {
          d.build_condition[j] = $root.farm.ConditionItem.toObject(m.build_condition[j], o);
        }
      }

      if (m.upgrade_param && m.upgrade_param.length) {
        d.upgrade_param = [];

        for (var j = 0; j < m.upgrade_param.length; ++j) {
          d.upgrade_param[j] = m.upgrade_param[j];
        }
      }

      if (m.build_desc != null && m.hasOwnProperty("build_desc")) {
        d.build_desc = m.build_desc;
      }

      if (m.prefab != null && m.hasOwnProperty("prefab")) {
        d.prefab = m.prefab;
      }

      return d;
    };
    /**
     * Converts this Upgrade to JSON.
     * @function toJSON
     * @memberof farm.Upgrade
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Upgrade.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Upgrade;
  }();

  farm.BuildCfgItem = function () {
    /**
     * Properties of a BuildCfgItem.
     * @memberof farm
     * @interface IBuildCfgItem
     * @property {number|null} [id] BuildCfgItem id
     * @property {string|null} [name] BuildCfgItem name
     * @property {number|null} [type] BuildCfgItem type
     * @property {Array.<number>|null} [floor_space] BuildCfgItem floor_space
     * @property {boolean|null} [rotateable] BuildCfgItem rotateable
     * @property {boolean|null} [moveable] BuildCfgItem moveable
     * @property {boolean|null} [recoverable] BuildCfgItem recoverable
     * @property {boolean|null} [only_one] BuildCfgItem only_one
     * @property {Array.<farm.IUpgrade>|null} [upgrades] BuildCfgItem upgrades
     * @property {Array.<farm.IPos>|null} [position] BuildCfgItem position
     */

    /**
     * Constructs a new BuildCfgItem.
     * @memberof farm
     * @classdesc Represents a BuildCfgItem.
     * @implements IBuildCfgItem
     * @constructor
     * @param {farm.IBuildCfgItem=} [p] Properties to set
     */
    function BuildCfgItem(p) {
      this.floor_space = [];
      this.upgrades = [];
      this.position = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * BuildCfgItem id.
     * @member {number} id
     * @memberof farm.BuildCfgItem
     * @instance
     */


    BuildCfgItem.prototype.id = 0;
    /**
     * BuildCfgItem name.
     * @member {string} name
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.name = "";
    /**
     * BuildCfgItem type.
     * @member {number} type
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.type = 0;
    /**
     * BuildCfgItem floor_space.
     * @member {Array.<number>} floor_space
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.floor_space = $util.emptyArray;
    /**
     * BuildCfgItem rotateable.
     * @member {boolean} rotateable
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.rotateable = false;
    /**
     * BuildCfgItem moveable.
     * @member {boolean} moveable
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.moveable = false;
    /**
     * BuildCfgItem recoverable.
     * @member {boolean} recoverable
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.recoverable = false;
    /**
     * BuildCfgItem only_one.
     * @member {boolean} only_one
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.only_one = false;
    /**
     * BuildCfgItem upgrades.
     * @member {Array.<farm.IUpgrade>} upgrades
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.upgrades = $util.emptyArray;
    /**
     * BuildCfgItem position.
     * @member {Array.<farm.IPos>} position
     * @memberof farm.BuildCfgItem
     * @instance
     */

    BuildCfgItem.prototype.position = $util.emptyArray;
    /**
     * Encodes the specified BuildCfgItem message. Does not implicitly {@link farm.BuildCfgItem.verify|verify} messages.
     * @function encode
     * @memberof farm.BuildCfgItem
     * @static
     * @param {farm.IBuildCfgItem} m BuildCfgItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    BuildCfgItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
      if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(24).int32(m.type);

      if (m.floor_space != null && m.floor_space.length) {
        w.uint32(34).fork();

        for (var i = 0; i < m.floor_space.length; ++i) {
          w.int32(m.floor_space[i]);
        }

        w.ldelim();
      }

      if (m.rotateable != null && Object.hasOwnProperty.call(m, "rotateable")) w.uint32(40).bool(m.rotateable);
      if (m.moveable != null && Object.hasOwnProperty.call(m, "moveable")) w.uint32(48).bool(m.moveable);
      if (m.recoverable != null && Object.hasOwnProperty.call(m, "recoverable")) w.uint32(56).bool(m.recoverable);
      if (m.only_one != null && Object.hasOwnProperty.call(m, "only_one")) w.uint32(64).bool(m.only_one);

      if (m.upgrades != null && m.upgrades.length) {
        for (var i = 0; i < m.upgrades.length; ++i) {
          $root.farm.Upgrade.encode(m.upgrades[i], w.uint32(74).fork()).ldelim();
        }
      }

      if (m.position != null && m.position.length) {
        for (var i = 0; i < m.position.length; ++i) {
          $root.farm.Pos.encode(m.position[i], w.uint32(82).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a BuildCfgItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.BuildCfgItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.BuildCfgItem} BuildCfgItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    BuildCfgItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.BuildCfgItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int32();
            break;

          case 2:
            m.name = r.string();
            break;

          case 3:
            m.type = r.int32();
            break;

          case 4:
            if (!(m.floor_space && m.floor_space.length)) m.floor_space = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.floor_space.push(r.int32());
              }
            } else m.floor_space.push(r.int32());

            break;

          case 5:
            m.rotateable = r.bool();
            break;

          case 6:
            m.moveable = r.bool();
            break;

          case 7:
            m.recoverable = r.bool();
            break;

          case 8:
            m.only_one = r.bool();
            break;

          case 9:
            if (!(m.upgrades && m.upgrades.length)) m.upgrades = [];
            m.upgrades.push($root.farm.Upgrade.decode(r, r.uint32()));
            break;

          case 10:
            if (!(m.position && m.position.length)) m.position = [];
            m.position.push($root.farm.Pos.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a BuildCfgItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.BuildCfgItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.BuildCfgItem} BuildCfgItem
     */


    BuildCfgItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.BuildCfgItem) return d;
      var m = new $root.farm.BuildCfgItem();

      if (d.id != null) {
        m.id = d.id | 0;
      }

      if (d.name != null) {
        m.name = String(d.name);
      }

      if (d.type != null) {
        m.type = d.type | 0;
      }

      if (d.floor_space) {
        if (!Array.isArray(d.floor_space)) throw TypeError(".farm.BuildCfgItem.floor_space: array expected");
        m.floor_space = [];

        for (var i = 0; i < d.floor_space.length; ++i) {
          m.floor_space[i] = d.floor_space[i] | 0;
        }
      }

      if (d.rotateable != null) {
        m.rotateable = Boolean(d.rotateable);
      }

      if (d.moveable != null) {
        m.moveable = Boolean(d.moveable);
      }

      if (d.recoverable != null) {
        m.recoverable = Boolean(d.recoverable);
      }

      if (d.only_one != null) {
        m.only_one = Boolean(d.only_one);
      }

      if (d.upgrades) {
        if (!Array.isArray(d.upgrades)) throw TypeError(".farm.BuildCfgItem.upgrades: array expected");
        m.upgrades = [];

        for (var i = 0; i < d.upgrades.length; ++i) {
          if (typeof d.upgrades[i] !== "object") throw TypeError(".farm.BuildCfgItem.upgrades: object expected");
          m.upgrades[i] = $root.farm.Upgrade.fromObject(d.upgrades[i]);
        }
      }

      if (d.position) {
        if (!Array.isArray(d.position)) throw TypeError(".farm.BuildCfgItem.position: array expected");
        m.position = [];

        for (var i = 0; i < d.position.length; ++i) {
          if (typeof d.position[i] !== "object") throw TypeError(".farm.BuildCfgItem.position: object expected");
          m.position[i] = $root.farm.Pos.fromObject(d.position[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a BuildCfgItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.BuildCfgItem
     * @static
     * @param {farm.BuildCfgItem} m BuildCfgItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    BuildCfgItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.floor_space = [];
        d.upgrades = [];
        d.position = [];
      }

      if (o.defaults) {
        d.id = 0;
        d.name = "";
        d.type = 0;
        d.rotateable = false;
        d.moveable = false;
        d.recoverable = false;
        d.only_one = false;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        d.id = m.id;
      }

      if (m.name != null && m.hasOwnProperty("name")) {
        d.name = m.name;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = m.type;
      }

      if (m.floor_space && m.floor_space.length) {
        d.floor_space = [];

        for (var j = 0; j < m.floor_space.length; ++j) {
          d.floor_space[j] = m.floor_space[j];
        }
      }

      if (m.rotateable != null && m.hasOwnProperty("rotateable")) {
        d.rotateable = m.rotateable;
      }

      if (m.moveable != null && m.hasOwnProperty("moveable")) {
        d.moveable = m.moveable;
      }

      if (m.recoverable != null && m.hasOwnProperty("recoverable")) {
        d.recoverable = m.recoverable;
      }

      if (m.only_one != null && m.hasOwnProperty("only_one")) {
        d.only_one = m.only_one;
      }

      if (m.upgrades && m.upgrades.length) {
        d.upgrades = [];

        for (var j = 0; j < m.upgrades.length; ++j) {
          d.upgrades[j] = $root.farm.Upgrade.toObject(m.upgrades[j], o);
        }
      }

      if (m.position && m.position.length) {
        d.position = [];

        for (var j = 0; j < m.position.length; ++j) {
          d.position[j] = $root.farm.Pos.toObject(m.position[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this BuildCfgItem to JSON.
     * @function toJSON
     * @memberof farm.BuildCfgItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    BuildCfgItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return BuildCfgItem;
  }();

  farm.UnlockCondition = function () {
    /**
     * Properties of an UnlockCondition.
     * @memberof farm
     * @interface IUnlockCondition
     * @property {number|null} [type] UnlockCondition type
     * @property {Array.<number>|null} [value] UnlockCondition value
     */

    /**
     * Constructs a new UnlockCondition.
     * @memberof farm
     * @classdesc Represents an UnlockCondition.
     * @implements IUnlockCondition
     * @constructor
     * @param {farm.IUnlockCondition=} [p] Properties to set
     */
    function UnlockCondition(p) {
      this.value = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * UnlockCondition type.
     * @member {number} type
     * @memberof farm.UnlockCondition
     * @instance
     */


    UnlockCondition.prototype.type = 0;
    /**
     * UnlockCondition value.
     * @member {Array.<number>} value
     * @memberof farm.UnlockCondition
     * @instance
     */

    UnlockCondition.prototype.value = $util.emptyArray;
    /**
     * Encodes the specified UnlockCondition message. Does not implicitly {@link farm.UnlockCondition.verify|verify} messages.
     * @function encode
     * @memberof farm.UnlockCondition
     * @static
     * @param {farm.IUnlockCondition} m UnlockCondition message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    UnlockCondition.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);

      if (m.value != null && m.value.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.value.length; ++i) {
          w.int32(m.value[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes an UnlockCondition message from the specified reader or buffer.
     * @function decode
     * @memberof farm.UnlockCondition
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.UnlockCondition} UnlockCondition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    UnlockCondition.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.UnlockCondition();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.type = r.int32();
            break;

          case 2:
            if (!(m.value && m.value.length)) m.value = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.value.push(r.int32());
              }
            } else m.value.push(r.int32());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an UnlockCondition message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.UnlockCondition
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.UnlockCondition} UnlockCondition
     */


    UnlockCondition.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.UnlockCondition) return d;
      var m = new $root.farm.UnlockCondition();

      if (d.type != null) {
        m.type = d.type | 0;
      }

      if (d.value) {
        if (!Array.isArray(d.value)) throw TypeError(".farm.UnlockCondition.value: array expected");
        m.value = [];

        for (var i = 0; i < d.value.length; ++i) {
          m.value[i] = d.value[i] | 0;
        }
      }

      return m;
    };
    /**
     * Creates a plain object from an UnlockCondition message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.UnlockCondition
     * @static
     * @param {farm.UnlockCondition} m UnlockCondition
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    UnlockCondition.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.value = [];
      }

      if (o.defaults) {
        d.type = 0;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = m.type;
      }

      if (m.value && m.value.length) {
        d.value = [];

        for (var j = 0; j < m.value.length; ++j) {
          d.value[j] = m.value[j];
        }
      }

      return d;
    };
    /**
     * Converts this UnlockCondition to JSON.
     * @function toJSON
     * @memberof farm.UnlockCondition
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    UnlockCondition.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return UnlockCondition;
  }();

  farm.CropCfgItem = function () {
    /**
     * Properties of a CropCfgItem.
     * @memberof farm
     * @interface ICropCfgItem
     * @property {number|null} [id] CropCfgItem id
     * @property {string|null} [name] CropCfgItem name
     * @property {number|null} [type] CropCfgItem type
     * @property {number|null} [grow_time] CropCfgItem grow_time
     * @property {Array.<farm.IUnlockCondition>|null} [unlock_condition] CropCfgItem unlock_condition
     */

    /**
     * Constructs a new CropCfgItem.
     * @memberof farm
     * @classdesc Represents a CropCfgItem.
     * @implements ICropCfgItem
     * @constructor
     * @param {farm.ICropCfgItem=} [p] Properties to set
     */
    function CropCfgItem(p) {
      this.unlock_condition = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * CropCfgItem id.
     * @member {number} id
     * @memberof farm.CropCfgItem
     * @instance
     */


    CropCfgItem.prototype.id = 0;
    /**
     * CropCfgItem name.
     * @member {string} name
     * @memberof farm.CropCfgItem
     * @instance
     */

    CropCfgItem.prototype.name = "";
    /**
     * CropCfgItem type.
     * @member {number} type
     * @memberof farm.CropCfgItem
     * @instance
     */

    CropCfgItem.prototype.type = 0;
    /**
     * CropCfgItem grow_time.
     * @member {number} grow_time
     * @memberof farm.CropCfgItem
     * @instance
     */

    CropCfgItem.prototype.grow_time = 0;
    /**
     * CropCfgItem unlock_condition.
     * @member {Array.<farm.IUnlockCondition>} unlock_condition
     * @memberof farm.CropCfgItem
     * @instance
     */

    CropCfgItem.prototype.unlock_condition = $util.emptyArray;
    /**
     * Encodes the specified CropCfgItem message. Does not implicitly {@link farm.CropCfgItem.verify|verify} messages.
     * @function encode
     * @memberof farm.CropCfgItem
     * @static
     * @param {farm.ICropCfgItem} m CropCfgItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    CropCfgItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
      if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(24).int32(m.type);
      if (m.grow_time != null && Object.hasOwnProperty.call(m, "grow_time")) w.uint32(32).int32(m.grow_time);

      if (m.unlock_condition != null && m.unlock_condition.length) {
        for (var i = 0; i < m.unlock_condition.length; ++i) {
          $root.farm.UnlockCondition.encode(m.unlock_condition[i], w.uint32(42).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a CropCfgItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.CropCfgItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.CropCfgItem} CropCfgItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    CropCfgItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.CropCfgItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int32();
            break;

          case 2:
            m.name = r.string();
            break;

          case 3:
            m.type = r.int32();
            break;

          case 4:
            m.grow_time = r.int32();
            break;

          case 5:
            if (!(m.unlock_condition && m.unlock_condition.length)) m.unlock_condition = [];
            m.unlock_condition.push($root.farm.UnlockCondition.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a CropCfgItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.CropCfgItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.CropCfgItem} CropCfgItem
     */


    CropCfgItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.CropCfgItem) return d;
      var m = new $root.farm.CropCfgItem();

      if (d.id != null) {
        m.id = d.id | 0;
      }

      if (d.name != null) {
        m.name = String(d.name);
      }

      if (d.type != null) {
        m.type = d.type | 0;
      }

      if (d.grow_time != null) {
        m.grow_time = d.grow_time | 0;
      }

      if (d.unlock_condition) {
        if (!Array.isArray(d.unlock_condition)) throw TypeError(".farm.CropCfgItem.unlock_condition: array expected");
        m.unlock_condition = [];

        for (var i = 0; i < d.unlock_condition.length; ++i) {
          if (typeof d.unlock_condition[i] !== "object") throw TypeError(".farm.CropCfgItem.unlock_condition: object expected");
          m.unlock_condition[i] = $root.farm.UnlockCondition.fromObject(d.unlock_condition[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a CropCfgItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.CropCfgItem
     * @static
     * @param {farm.CropCfgItem} m CropCfgItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    CropCfgItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.unlock_condition = [];
      }

      if (o.defaults) {
        d.id = 0;
        d.name = "";
        d.type = 0;
        d.grow_time = 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        d.id = m.id;
      }

      if (m.name != null && m.hasOwnProperty("name")) {
        d.name = m.name;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = m.type;
      }

      if (m.grow_time != null && m.hasOwnProperty("grow_time")) {
        d.grow_time = m.grow_time;
      }

      if (m.unlock_condition && m.unlock_condition.length) {
        d.unlock_condition = [];

        for (var j = 0; j < m.unlock_condition.length; ++j) {
          d.unlock_condition[j] = $root.farm.UnlockCondition.toObject(m.unlock_condition[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this CropCfgItem to JSON.
     * @function toJSON
     * @memberof farm.CropCfgItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    CropCfgItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CropCfgItem;
  }();

  farm.RespPlantCrops = function () {
    /**
     * Properties of a RespPlantCrops.
     * @memberof farm
     * @interface IRespPlantCrops
     * @property {Array.<farm.IPlantCrop>|null} [plant_crops] RespPlantCrops plant_crops
     */

    /**
     * Constructs a new RespPlantCrops.
     * @memberof farm
     * @classdesc Represents a RespPlantCrops.
     * @implements IRespPlantCrops
     * @constructor
     * @param {farm.IRespPlantCrops=} [p] Properties to set
     */
    function RespPlantCrops(p) {
      this.plant_crops = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespPlantCrops plant_crops.
     * @member {Array.<farm.IPlantCrop>} plant_crops
     * @memberof farm.RespPlantCrops
     * @instance
     */


    RespPlantCrops.prototype.plant_crops = $util.emptyArray;
    /**
     * Encodes the specified RespPlantCrops message. Does not implicitly {@link farm.RespPlantCrops.verify|verify} messages.
     * @function encode
     * @memberof farm.RespPlantCrops
     * @static
     * @param {farm.IRespPlantCrops} m RespPlantCrops message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespPlantCrops.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.plant_crops != null && m.plant_crops.length) {
        for (var i = 0; i < m.plant_crops.length; ++i) {
          $root.farm.PlantCrop.encode(m.plant_crops[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespPlantCrops message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespPlantCrops
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespPlantCrops} RespPlantCrops
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespPlantCrops.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespPlantCrops();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.plant_crops && m.plant_crops.length)) m.plant_crops = [];
            m.plant_crops.push($root.farm.PlantCrop.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespPlantCrops message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespPlantCrops
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespPlantCrops} RespPlantCrops
     */


    RespPlantCrops.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespPlantCrops) return d;
      var m = new $root.farm.RespPlantCrops();

      if (d.plant_crops) {
        if (!Array.isArray(d.plant_crops)) throw TypeError(".farm.RespPlantCrops.plant_crops: array expected");
        m.plant_crops = [];

        for (var i = 0; i < d.plant_crops.length; ++i) {
          if (typeof d.plant_crops[i] !== "object") throw TypeError(".farm.RespPlantCrops.plant_crops: object expected");
          m.plant_crops[i] = $root.farm.PlantCrop.fromObject(d.plant_crops[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespPlantCrops message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespPlantCrops
     * @static
     * @param {farm.RespPlantCrops} m RespPlantCrops
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespPlantCrops.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.plant_crops = [];
      }

      if (m.plant_crops && m.plant_crops.length) {
        d.plant_crops = [];

        for (var j = 0; j < m.plant_crops.length; ++j) {
          d.plant_crops[j] = $root.farm.PlantCrop.toObject(m.plant_crops[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespPlantCrops to JSON.
     * @function toJSON
     * @memberof farm.RespPlantCrops
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespPlantCrops.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespPlantCrops;
  }();

  farm.PlantCrop = function () {
    /**
     * Properties of a PlantCrop.
     * @memberof farm
     * @interface IPlantCrop
     * @property {number|Long|null} [id] PlantCrop id
     * @property {number|null} [config_id] PlantCrop config_id
     * @property {boolean|null} [is_unlock] PlantCrop is_unlock
     * @property {farm.CurrencyType|null} [currency_type] PlantCrop currency_type
     * @property {number|Long|null} [number] PlantCrop number
     */

    /**
     * Constructs a new PlantCrop.
     * @memberof farm
     * @classdesc Represents a PlantCrop.
     * @implements IPlantCrop
     * @constructor
     * @param {farm.IPlantCrop=} [p] Properties to set
     */
    function PlantCrop(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * PlantCrop id.
     * @member {number|Long} id
     * @memberof farm.PlantCrop
     * @instance
     */


    PlantCrop.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * PlantCrop config_id.
     * @member {number} config_id
     * @memberof farm.PlantCrop
     * @instance
     */

    PlantCrop.prototype.config_id = 0;
    /**
     * PlantCrop is_unlock.
     * @member {boolean} is_unlock
     * @memberof farm.PlantCrop
     * @instance
     */

    PlantCrop.prototype.is_unlock = false;
    /**
     * PlantCrop currency_type.
     * @member {farm.CurrencyType} currency_type
     * @memberof farm.PlantCrop
     * @instance
     */

    PlantCrop.prototype.currency_type = 0;
    /**
     * PlantCrop number.
     * @member {number|Long} number
     * @memberof farm.PlantCrop
     * @instance
     */

    PlantCrop.prototype.number = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified PlantCrop message. Does not implicitly {@link farm.PlantCrop.verify|verify} messages.
     * @function encode
     * @memberof farm.PlantCrop
     * @static
     * @param {farm.IPlantCrop} m PlantCrop message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    PlantCrop.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.config_id != null && Object.hasOwnProperty.call(m, "config_id")) w.uint32(16).int32(m.config_id);
      if (m.is_unlock != null && Object.hasOwnProperty.call(m, "is_unlock")) w.uint32(24).bool(m.is_unlock);
      if (m.currency_type != null && Object.hasOwnProperty.call(m, "currency_type")) w.uint32(32).int32(m.currency_type);
      if (m.number != null && Object.hasOwnProperty.call(m, "number")) w.uint32(40).int64(m.number);
      return w;
    };
    /**
     * Decodes a PlantCrop message from the specified reader or buffer.
     * @function decode
     * @memberof farm.PlantCrop
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.PlantCrop} PlantCrop
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    PlantCrop.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.PlantCrop();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.config_id = r.int32();
            break;

          case 3:
            m.is_unlock = r.bool();
            break;

          case 4:
            m.currency_type = r.int32();
            break;

          case 5:
            m.number = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a PlantCrop message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.PlantCrop
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.PlantCrop} PlantCrop
     */


    PlantCrop.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.PlantCrop) return d;
      var m = new $root.farm.PlantCrop();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.config_id != null) {
        m.config_id = d.config_id | 0;
      }

      if (d.is_unlock != null) {
        m.is_unlock = Boolean(d.is_unlock);
      }

      switch (d.currency_type) {
        case "CNothing":
        case 0:
          m.currency_type = 0;
          break;

        case "CGold":
        case 1:
          m.currency_type = 1;
          break;

        case "CCrystal":
        case 2:
          m.currency_type = 2;
          break;

        case "CLove":
        case 3:
          m.currency_type = 3;
          break;
      }

      if (d.number != null) {
        if ($util.Long) (m.number = $util.Long.fromValue(d.number)).unsigned = false;else if (typeof d.number === "string") m.number = parseInt(d.number, 10);else if (typeof d.number === "number") m.number = d.number;else if (typeof d.number === "object") m.number = new $util.LongBits(d.number.low >>> 0, d.number.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a PlantCrop message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.PlantCrop
     * @static
     * @param {farm.PlantCrop} m PlantCrop
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    PlantCrop.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.config_id = 0;
        d.is_unlock = false;
        d.currency_type = o.enums === String ? "CNothing" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.number = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.number = o.longs === String ? "0" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.config_id != null && m.hasOwnProperty("config_id")) {
        d.config_id = m.config_id;
      }

      if (m.is_unlock != null && m.hasOwnProperty("is_unlock")) {
        d.is_unlock = m.is_unlock;
      }

      if (m.currency_type != null && m.hasOwnProperty("currency_type")) {
        d.currency_type = o.enums === String ? $root.farm.CurrencyType[m.currency_type] : m.currency_type;
      }

      if (m.number != null && m.hasOwnProperty("number")) {
        if (typeof m.number === "number") d.number = o.longs === String ? String(m.number) : m.number;else d.number = o.longs === String ? $util.Long.prototype.toString.call(m.number) : o.longs === Number ? new $util.LongBits(m.number.low >>> 0, m.number.high >>> 0).toNumber() : m.number;
      }

      return d;
    };
    /**
     * Converts this PlantCrop to JSON.
     * @function toJSON
     * @memberof farm.PlantCrop
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    PlantCrop.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PlantCrop;
  }();

  farm.RespArableLandsState = function () {
    /**
     * Properties of a RespArableLandsState.
     * @memberof farm
     * @interface IRespArableLandsState
     * @property {Array.<farm.IArableLandState>|null} [arable_lands_state] RespArableLandsState arable_lands_state
     */

    /**
     * Constructs a new RespArableLandsState.
     * @memberof farm
     * @classdesc Represents a RespArableLandsState.
     * @implements IRespArableLandsState
     * @constructor
     * @param {farm.IRespArableLandsState=} [p] Properties to set
     */
    function RespArableLandsState(p) {
      this.arable_lands_state = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespArableLandsState arable_lands_state.
     * @member {Array.<farm.IArableLandState>} arable_lands_state
     * @memberof farm.RespArableLandsState
     * @instance
     */


    RespArableLandsState.prototype.arable_lands_state = $util.emptyArray;
    /**
     * Encodes the specified RespArableLandsState message. Does not implicitly {@link farm.RespArableLandsState.verify|verify} messages.
     * @function encode
     * @memberof farm.RespArableLandsState
     * @static
     * @param {farm.IRespArableLandsState} m RespArableLandsState message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespArableLandsState.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.arable_lands_state != null && m.arable_lands_state.length) {
        for (var i = 0; i < m.arable_lands_state.length; ++i) {
          $root.farm.ArableLandState.encode(m.arable_lands_state[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespArableLandsState message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespArableLandsState
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespArableLandsState} RespArableLandsState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespArableLandsState.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespArableLandsState();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.arable_lands_state && m.arable_lands_state.length)) m.arable_lands_state = [];
            m.arable_lands_state.push($root.farm.ArableLandState.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespArableLandsState message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespArableLandsState
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespArableLandsState} RespArableLandsState
     */


    RespArableLandsState.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespArableLandsState) return d;
      var m = new $root.farm.RespArableLandsState();

      if (d.arable_lands_state) {
        if (!Array.isArray(d.arable_lands_state)) throw TypeError(".farm.RespArableLandsState.arable_lands_state: array expected");
        m.arable_lands_state = [];

        for (var i = 0; i < d.arable_lands_state.length; ++i) {
          if (typeof d.arable_lands_state[i] !== "object") throw TypeError(".farm.RespArableLandsState.arable_lands_state: object expected");
          m.arable_lands_state[i] = $root.farm.ArableLandState.fromObject(d.arable_lands_state[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespArableLandsState message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespArableLandsState
     * @static
     * @param {farm.RespArableLandsState} m RespArableLandsState
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespArableLandsState.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.arable_lands_state = [];
      }

      if (m.arable_lands_state && m.arable_lands_state.length) {
        d.arable_lands_state = [];

        for (var j = 0; j < m.arable_lands_state.length; ++j) {
          d.arable_lands_state[j] = $root.farm.ArableLandState.toObject(m.arable_lands_state[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespArableLandsState to JSON.
     * @function toJSON
     * @memberof farm.RespArableLandsState
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespArableLandsState.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespArableLandsState;
  }();

  farm.ArableLandState = function () {
    /**
     * Properties of an ArableLandState.
     * @memberof farm
     * @interface IArableLandState
     * @property {number|Long|null} [building_id] ArableLandState building_id
     * @property {number|null} [crop_configID] ArableLandState crop_configID
     * @property {number|null} [time_left] ArableLandState time_left
     */

    /**
     * Constructs a new ArableLandState.
     * @memberof farm
     * @classdesc Represents an ArableLandState.
     * @implements IArableLandState
     * @constructor
     * @param {farm.IArableLandState=} [p] Properties to set
     */
    function ArableLandState(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ArableLandState building_id.
     * @member {number|Long} building_id
     * @memberof farm.ArableLandState
     * @instance
     */


    ArableLandState.prototype.building_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * ArableLandState crop_configID.
     * @member {number} crop_configID
     * @memberof farm.ArableLandState
     * @instance
     */

    ArableLandState.prototype.crop_configID = 0;
    /**
     * ArableLandState time_left.
     * @member {number} time_left
     * @memberof farm.ArableLandState
     * @instance
     */

    ArableLandState.prototype.time_left = 0;
    /**
     * Encodes the specified ArableLandState message. Does not implicitly {@link farm.ArableLandState.verify|verify} messages.
     * @function encode
     * @memberof farm.ArableLandState
     * @static
     * @param {farm.IArableLandState} m ArableLandState message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ArableLandState.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.building_id != null && Object.hasOwnProperty.call(m, "building_id")) w.uint32(8).int64(m.building_id);
      if (m.crop_configID != null && Object.hasOwnProperty.call(m, "crop_configID")) w.uint32(16).int32(m.crop_configID);
      if (m.time_left != null && Object.hasOwnProperty.call(m, "time_left")) w.uint32(32).int32(m.time_left);
      return w;
    };
    /**
     * Decodes an ArableLandState message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ArableLandState
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ArableLandState} ArableLandState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ArableLandState.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ArableLandState();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.building_id = r.int64();
            break;

          case 2:
            m.crop_configID = r.int32();
            break;

          case 4:
            m.time_left = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an ArableLandState message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ArableLandState
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ArableLandState} ArableLandState
     */


    ArableLandState.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ArableLandState) return d;
      var m = new $root.farm.ArableLandState();

      if (d.building_id != null) {
        if ($util.Long) (m.building_id = $util.Long.fromValue(d.building_id)).unsigned = false;else if (typeof d.building_id === "string") m.building_id = parseInt(d.building_id, 10);else if (typeof d.building_id === "number") m.building_id = d.building_id;else if (typeof d.building_id === "object") m.building_id = new $util.LongBits(d.building_id.low >>> 0, d.building_id.high >>> 0).toNumber();
      }

      if (d.crop_configID != null) {
        m.crop_configID = d.crop_configID | 0;
      }

      if (d.time_left != null) {
        m.time_left = d.time_left | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from an ArableLandState message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ArableLandState
     * @static
     * @param {farm.ArableLandState} m ArableLandState
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ArableLandState.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.building_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.building_id = o.longs === String ? "0" : 0;

        d.crop_configID = 0;
        d.time_left = 0;
      }

      if (m.building_id != null && m.hasOwnProperty("building_id")) {
        if (typeof m.building_id === "number") d.building_id = o.longs === String ? String(m.building_id) : m.building_id;else d.building_id = o.longs === String ? $util.Long.prototype.toString.call(m.building_id) : o.longs === Number ? new $util.LongBits(m.building_id.low >>> 0, m.building_id.high >>> 0).toNumber() : m.building_id;
      }

      if (m.crop_configID != null && m.hasOwnProperty("crop_configID")) {
        d.crop_configID = m.crop_configID;
      }

      if (m.time_left != null && m.hasOwnProperty("time_left")) {
        d.time_left = m.time_left;
      }

      return d;
    };
    /**
     * Converts this ArableLandState to JSON.
     * @function toJSON
     * @memberof farm.ArableLandState
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ArableLandState.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ArableLandState;
  }();

  farm.ReqCropOption = function () {
    /**
     * Properties of a ReqCropOption.
     * @memberof farm
     * @interface IReqCropOption
     * @property {Array.<number|Long>|null} [building_ids] ReqCropOption building_ids
     * @property {Array.<number>|null} [crop_cfgids] ReqCropOption crop_cfgids
     */

    /**
     * Constructs a new ReqCropOption.
     * @memberof farm
     * @classdesc Represents a ReqCropOption.
     * @implements IReqCropOption
     * @constructor
     * @param {farm.IReqCropOption=} [p] Properties to set
     */
    function ReqCropOption(p) {
      this.building_ids = [];
      this.crop_cfgids = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqCropOption building_ids.
     * @member {Array.<number|Long>} building_ids
     * @memberof farm.ReqCropOption
     * @instance
     */


    ReqCropOption.prototype.building_ids = $util.emptyArray;
    /**
     * ReqCropOption crop_cfgids.
     * @member {Array.<number>} crop_cfgids
     * @memberof farm.ReqCropOption
     * @instance
     */

    ReqCropOption.prototype.crop_cfgids = $util.emptyArray;
    /**
     * Encodes the specified ReqCropOption message. Does not implicitly {@link farm.ReqCropOption.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqCropOption
     * @static
     * @param {farm.IReqCropOption} m ReqCropOption message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqCropOption.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.building_ids != null && m.building_ids.length) {
        w.uint32(10).fork();

        for (var i = 0; i < m.building_ids.length; ++i) {
          w.int64(m.building_ids[i]);
        }

        w.ldelim();
      }

      if (m.crop_cfgids != null && m.crop_cfgids.length) {
        w.uint32(18).fork();

        for (var i = 0; i < m.crop_cfgids.length; ++i) {
          w.int32(m.crop_cfgids[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a ReqCropOption message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqCropOption
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqCropOption} ReqCropOption
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqCropOption.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqCropOption();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.building_ids && m.building_ids.length)) m.building_ids = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.building_ids.push(r.int64());
              }
            } else m.building_ids.push(r.int64());

            break;

          case 2:
            if (!(m.crop_cfgids && m.crop_cfgids.length)) m.crop_cfgids = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.crop_cfgids.push(r.int32());
              }
            } else m.crop_cfgids.push(r.int32());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqCropOption message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqCropOption
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqCropOption} ReqCropOption
     */


    ReqCropOption.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqCropOption) return d;
      var m = new $root.farm.ReqCropOption();

      if (d.building_ids) {
        if (!Array.isArray(d.building_ids)) throw TypeError(".farm.ReqCropOption.building_ids: array expected");
        m.building_ids = [];

        for (var i = 0; i < d.building_ids.length; ++i) {
          if ($util.Long) (m.building_ids[i] = $util.Long.fromValue(d.building_ids[i])).unsigned = false;else if (typeof d.building_ids[i] === "string") m.building_ids[i] = parseInt(d.building_ids[i], 10);else if (typeof d.building_ids[i] === "number") m.building_ids[i] = d.building_ids[i];else if (typeof d.building_ids[i] === "object") m.building_ids[i] = new $util.LongBits(d.building_ids[i].low >>> 0, d.building_ids[i].high >>> 0).toNumber();
        }
      }

      if (d.crop_cfgids) {
        if (!Array.isArray(d.crop_cfgids)) throw TypeError(".farm.ReqCropOption.crop_cfgids: array expected");
        m.crop_cfgids = [];

        for (var i = 0; i < d.crop_cfgids.length; ++i) {
          m.crop_cfgids[i] = d.crop_cfgids[i] | 0;
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqCropOption message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqCropOption
     * @static
     * @param {farm.ReqCropOption} m ReqCropOption
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqCropOption.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.building_ids = [];
        d.crop_cfgids = [];
      }

      if (m.building_ids && m.building_ids.length) {
        d.building_ids = [];

        for (var j = 0; j < m.building_ids.length; ++j) {
          if (typeof m.building_ids[j] === "number") d.building_ids[j] = o.longs === String ? String(m.building_ids[j]) : m.building_ids[j];else d.building_ids[j] = o.longs === String ? $util.Long.prototype.toString.call(m.building_ids[j]) : o.longs === Number ? new $util.LongBits(m.building_ids[j].low >>> 0, m.building_ids[j].high >>> 0).toNumber() : m.building_ids[j];
        }
      }

      if (m.crop_cfgids && m.crop_cfgids.length) {
        d.crop_cfgids = [];

        for (var j = 0; j < m.crop_cfgids.length; ++j) {
          d.crop_cfgids[j] = m.crop_cfgids[j];
        }
      }

      return d;
    };
    /**
     * Converts this ReqCropOption to JSON.
     * @function toJSON
     * @memberof farm.ReqCropOption
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqCropOption.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqCropOption;
  }();

  farm.ReqUnlockCrop = function () {
    /**
     * Properties of a ReqUnlockCrop.
     * @memberof farm
     * @interface IReqUnlockCrop
     * @property {number|null} [configID] ReqUnlockCrop configID
     */

    /**
     * Constructs a new ReqUnlockCrop.
     * @memberof farm
     * @classdesc Represents a ReqUnlockCrop.
     * @implements IReqUnlockCrop
     * @constructor
     * @param {farm.IReqUnlockCrop=} [p] Properties to set
     */
    function ReqUnlockCrop(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqUnlockCrop configID.
     * @member {number} configID
     * @memberof farm.ReqUnlockCrop
     * @instance
     */


    ReqUnlockCrop.prototype.configID = 0;
    /**
     * Encodes the specified ReqUnlockCrop message. Does not implicitly {@link farm.ReqUnlockCrop.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqUnlockCrop
     * @static
     * @param {farm.IReqUnlockCrop} m ReqUnlockCrop message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqUnlockCrop.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.configID != null && Object.hasOwnProperty.call(m, "configID")) w.uint32(8).int32(m.configID);
      return w;
    };
    /**
     * Decodes a ReqUnlockCrop message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqUnlockCrop
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqUnlockCrop} ReqUnlockCrop
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqUnlockCrop.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqUnlockCrop();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.configID = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqUnlockCrop message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqUnlockCrop
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqUnlockCrop} ReqUnlockCrop
     */


    ReqUnlockCrop.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqUnlockCrop) return d;
      var m = new $root.farm.ReqUnlockCrop();

      if (d.configID != null) {
        m.configID = d.configID | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqUnlockCrop message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqUnlockCrop
     * @static
     * @param {farm.ReqUnlockCrop} m ReqUnlockCrop
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqUnlockCrop.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.configID = 0;
      }

      if (m.configID != null && m.hasOwnProperty("configID")) {
        d.configID = m.configID;
      }

      return d;
    };
    /**
     * Converts this ReqUnlockCrop to JSON.
     * @function toJSON
     * @memberof farm.ReqUnlockCrop
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqUnlockCrop.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqUnlockCrop;
  }();

  farm.CurrencyLeft = function () {
    /**
     * Properties of a CurrencyLeft.
     * @memberof farm
     * @interface ICurrencyLeft
     * @property {number|Long|null} [tk_gold] CurrencyLeft tk_gold
     * @property {number|Long|null} [tk_crystal] CurrencyLeft tk_crystal
     */

    /**
     * Constructs a new CurrencyLeft.
     * @memberof farm
     * @classdesc Represents a CurrencyLeft.
     * @implements ICurrencyLeft
     * @constructor
     * @param {farm.ICurrencyLeft=} [p] Properties to set
     */
    function CurrencyLeft(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * CurrencyLeft tk_gold.
     * @member {number|Long} tk_gold
     * @memberof farm.CurrencyLeft
     * @instance
     */


    CurrencyLeft.prototype.tk_gold = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * CurrencyLeft tk_crystal.
     * @member {number|Long} tk_crystal
     * @memberof farm.CurrencyLeft
     * @instance
     */

    CurrencyLeft.prototype.tk_crystal = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified CurrencyLeft message. Does not implicitly {@link farm.CurrencyLeft.verify|verify} messages.
     * @function encode
     * @memberof farm.CurrencyLeft
     * @static
     * @param {farm.ICurrencyLeft} m CurrencyLeft message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    CurrencyLeft.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.tk_gold != null && Object.hasOwnProperty.call(m, "tk_gold")) w.uint32(8).int64(m.tk_gold);
      if (m.tk_crystal != null && Object.hasOwnProperty.call(m, "tk_crystal")) w.uint32(16).int64(m.tk_crystal);
      return w;
    };
    /**
     * Decodes a CurrencyLeft message from the specified reader or buffer.
     * @function decode
     * @memberof farm.CurrencyLeft
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.CurrencyLeft} CurrencyLeft
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    CurrencyLeft.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.CurrencyLeft();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.tk_gold = r.int64();
            break;

          case 2:
            m.tk_crystal = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a CurrencyLeft message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.CurrencyLeft
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.CurrencyLeft} CurrencyLeft
     */


    CurrencyLeft.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.CurrencyLeft) return d;
      var m = new $root.farm.CurrencyLeft();

      if (d.tk_gold != null) {
        if ($util.Long) (m.tk_gold = $util.Long.fromValue(d.tk_gold)).unsigned = false;else if (typeof d.tk_gold === "string") m.tk_gold = parseInt(d.tk_gold, 10);else if (typeof d.tk_gold === "number") m.tk_gold = d.tk_gold;else if (typeof d.tk_gold === "object") m.tk_gold = new $util.LongBits(d.tk_gold.low >>> 0, d.tk_gold.high >>> 0).toNumber();
      }

      if (d.tk_crystal != null) {
        if ($util.Long) (m.tk_crystal = $util.Long.fromValue(d.tk_crystal)).unsigned = false;else if (typeof d.tk_crystal === "string") m.tk_crystal = parseInt(d.tk_crystal, 10);else if (typeof d.tk_crystal === "number") m.tk_crystal = d.tk_crystal;else if (typeof d.tk_crystal === "object") m.tk_crystal = new $util.LongBits(d.tk_crystal.low >>> 0, d.tk_crystal.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a CurrencyLeft message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.CurrencyLeft
     * @static
     * @param {farm.CurrencyLeft} m CurrencyLeft
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    CurrencyLeft.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.tk_gold = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.tk_gold = o.longs === String ? "0" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.tk_crystal = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.tk_crystal = o.longs === String ? "0" : 0;
      }

      if (m.tk_gold != null && m.hasOwnProperty("tk_gold")) {
        if (typeof m.tk_gold === "number") d.tk_gold = o.longs === String ? String(m.tk_gold) : m.tk_gold;else d.tk_gold = o.longs === String ? $util.Long.prototype.toString.call(m.tk_gold) : o.longs === Number ? new $util.LongBits(m.tk_gold.low >>> 0, m.tk_gold.high >>> 0).toNumber() : m.tk_gold;
      }

      if (m.tk_crystal != null && m.hasOwnProperty("tk_crystal")) {
        if (typeof m.tk_crystal === "number") d.tk_crystal = o.longs === String ? String(m.tk_crystal) : m.tk_crystal;else d.tk_crystal = o.longs === String ? $util.Long.prototype.toString.call(m.tk_crystal) : o.longs === Number ? new $util.LongBits(m.tk_crystal.low >>> 0, m.tk_crystal.high >>> 0).toNumber() : m.tk_crystal;
      }

      return d;
    };
    /**
     * Converts this CurrencyLeft to JSON.
     * @function toJSON
     * @memberof farm.CurrencyLeft
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    CurrencyLeft.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return CurrencyLeft;
  }();

  farm.MessageWordBubbleChanged = function () {
    /**
     * Properties of a MessageWordBubbleChanged.
     * @memberof farm
     * @interface IMessageWordBubbleChanged
     * @property {Array.<farm.IWordBubble>|null} [word_bubbles] MessageWordBubbleChanged word_bubbles
     */

    /**
     * Constructs a new MessageWordBubbleChanged.
     * @memberof farm
     * @classdesc Represents a MessageWordBubbleChanged.
     * @implements IMessageWordBubbleChanged
     * @constructor
     * @param {farm.IMessageWordBubbleChanged=} [p] Properties to set
     */
    function MessageWordBubbleChanged(p) {
      this.word_bubbles = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessageWordBubbleChanged word_bubbles.
     * @member {Array.<farm.IWordBubble>} word_bubbles
     * @memberof farm.MessageWordBubbleChanged
     * @instance
     */


    MessageWordBubbleChanged.prototype.word_bubbles = $util.emptyArray;
    /**
     * Encodes the specified MessageWordBubbleChanged message. Does not implicitly {@link farm.MessageWordBubbleChanged.verify|verify} messages.
     * @function encode
     * @memberof farm.MessageWordBubbleChanged
     * @static
     * @param {farm.IMessageWordBubbleChanged} m MessageWordBubbleChanged message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessageWordBubbleChanged.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.word_bubbles != null && m.word_bubbles.length) {
        for (var i = 0; i < m.word_bubbles.length; ++i) {
          $root.farm.WordBubble.encode(m.word_bubbles[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a MessageWordBubbleChanged message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessageWordBubbleChanged
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessageWordBubbleChanged} MessageWordBubbleChanged
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessageWordBubbleChanged.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessageWordBubbleChanged();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.word_bubbles && m.word_bubbles.length)) m.word_bubbles = [];
            m.word_bubbles.push($root.farm.WordBubble.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessageWordBubbleChanged message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessageWordBubbleChanged
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessageWordBubbleChanged} MessageWordBubbleChanged
     */


    MessageWordBubbleChanged.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessageWordBubbleChanged) return d;
      var m = new $root.farm.MessageWordBubbleChanged();

      if (d.word_bubbles) {
        if (!Array.isArray(d.word_bubbles)) throw TypeError(".farm.MessageWordBubbleChanged.word_bubbles: array expected");
        m.word_bubbles = [];

        for (var i = 0; i < d.word_bubbles.length; ++i) {
          if (typeof d.word_bubbles[i] !== "object") throw TypeError(".farm.MessageWordBubbleChanged.word_bubbles: object expected");
          m.word_bubbles[i] = $root.farm.WordBubble.fromObject(d.word_bubbles[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a MessageWordBubbleChanged message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessageWordBubbleChanged
     * @static
     * @param {farm.MessageWordBubbleChanged} m MessageWordBubbleChanged
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessageWordBubbleChanged.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.word_bubbles = [];
      }

      if (m.word_bubbles && m.word_bubbles.length) {
        d.word_bubbles = [];

        for (var j = 0; j < m.word_bubbles.length; ++j) {
          d.word_bubbles[j] = $root.farm.WordBubble.toObject(m.word_bubbles[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this MessageWordBubbleChanged to JSON.
     * @function toJSON
     * @memberof farm.MessageWordBubbleChanged
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessageWordBubbleChanged.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessageWordBubbleChanged;
  }();

  farm.MessagePlayerInfo = function () {
    /**
     * Properties of a MessagePlayerInfo.
     * @memberof farm
     * @interface IMessagePlayerInfo
     * @property {string|null} [nick_name] MessagePlayerInfo nick_name
     * @property {string|null} [user_code] MessagePlayerInfo user_code
     * @property {number|null} [avatar_id] MessagePlayerInfo avatar_id
     * @property {number|null} [coin] MessagePlayerInfo coin
     * @property {number|null} [crystal] MessagePlayerInfo crystal
     * @property {number|null} [heart] MessagePlayerInfo heart
     * @property {string|null} [slogan] MessagePlayerInfo slogan
     * @property {boolean|null} [isMail] MessagePlayerInfo isMail
     */

    /**
     * Constructs a new MessagePlayerInfo.
     * @memberof farm
     * @classdesc Represents a MessagePlayerInfo.
     * @implements IMessagePlayerInfo
     * @constructor
     * @param {farm.IMessagePlayerInfo=} [p] Properties to set
     */
    function MessagePlayerInfo(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessagePlayerInfo nick_name.
     * @member {string} nick_name
     * @memberof farm.MessagePlayerInfo
     * @instance
     */


    MessagePlayerInfo.prototype.nick_name = "";
    /**
     * MessagePlayerInfo user_code.
     * @member {string} user_code
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.user_code = "";
    /**
     * MessagePlayerInfo avatar_id.
     * @member {number} avatar_id
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.avatar_id = 0;
    /**
     * MessagePlayerInfo coin.
     * @member {number} coin
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.coin = 0;
    /**
     * MessagePlayerInfo crystal.
     * @member {number} crystal
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.crystal = 0;
    /**
     * MessagePlayerInfo heart.
     * @member {number} heart
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.heart = 0;
    /**
     * MessagePlayerInfo slogan.
     * @member {string} slogan
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.slogan = "";
    /**
     * MessagePlayerInfo isMail.
     * @member {boolean} isMail
     * @memberof farm.MessagePlayerInfo
     * @instance
     */

    MessagePlayerInfo.prototype.isMail = false;
    /**
     * Encodes the specified MessagePlayerInfo message. Does not implicitly {@link farm.MessagePlayerInfo.verify|verify} messages.
     * @function encode
     * @memberof farm.MessagePlayerInfo
     * @static
     * @param {farm.IMessagePlayerInfo} m MessagePlayerInfo message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessagePlayerInfo.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.nick_name != null && Object.hasOwnProperty.call(m, "nick_name")) w.uint32(10).string(m.nick_name);
      if (m.user_code != null && Object.hasOwnProperty.call(m, "user_code")) w.uint32(18).string(m.user_code);
      if (m.avatar_id != null && Object.hasOwnProperty.call(m, "avatar_id")) w.uint32(24).int32(m.avatar_id);
      if (m.coin != null && Object.hasOwnProperty.call(m, "coin")) w.uint32(32).int32(m.coin);
      if (m.crystal != null && Object.hasOwnProperty.call(m, "crystal")) w.uint32(40).int32(m.crystal);
      if (m.heart != null && Object.hasOwnProperty.call(m, "heart")) w.uint32(48).int32(m.heart);
      if (m.slogan != null && Object.hasOwnProperty.call(m, "slogan")) w.uint32(58).string(m.slogan);
      if (m.isMail != null && Object.hasOwnProperty.call(m, "isMail")) w.uint32(64).bool(m.isMail);
      return w;
    };
    /**
     * Decodes a MessagePlayerInfo message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessagePlayerInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessagePlayerInfo} MessagePlayerInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessagePlayerInfo.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessagePlayerInfo();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.nick_name = r.string();
            break;

          case 2:
            m.user_code = r.string();
            break;

          case 3:
            m.avatar_id = r.int32();
            break;

          case 4:
            m.coin = r.int32();
            break;

          case 5:
            m.crystal = r.int32();
            break;

          case 6:
            m.heart = r.int32();
            break;

          case 7:
            m.slogan = r.string();
            break;

          case 8:
            m.isMail = r.bool();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessagePlayerInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessagePlayerInfo
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessagePlayerInfo} MessagePlayerInfo
     */


    MessagePlayerInfo.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessagePlayerInfo) return d;
      var m = new $root.farm.MessagePlayerInfo();

      if (d.nick_name != null) {
        m.nick_name = String(d.nick_name);
      }

      if (d.user_code != null) {
        m.user_code = String(d.user_code);
      }

      if (d.avatar_id != null) {
        m.avatar_id = d.avatar_id | 0;
      }

      if (d.coin != null) {
        m.coin = d.coin | 0;
      }

      if (d.crystal != null) {
        m.crystal = d.crystal | 0;
      }

      if (d.heart != null) {
        m.heart = d.heart | 0;
      }

      if (d.slogan != null) {
        m.slogan = String(d.slogan);
      }

      if (d.isMail != null) {
        m.isMail = Boolean(d.isMail);
      }

      return m;
    };
    /**
     * Creates a plain object from a MessagePlayerInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessagePlayerInfo
     * @static
     * @param {farm.MessagePlayerInfo} m MessagePlayerInfo
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessagePlayerInfo.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.nick_name = "";
        d.user_code = "";
        d.avatar_id = 0;
        d.coin = 0;
        d.crystal = 0;
        d.heart = 0;
        d.slogan = "";
        d.isMail = false;
      }

      if (m.nick_name != null && m.hasOwnProperty("nick_name")) {
        d.nick_name = m.nick_name;
      }

      if (m.user_code != null && m.hasOwnProperty("user_code")) {
        d.user_code = m.user_code;
      }

      if (m.avatar_id != null && m.hasOwnProperty("avatar_id")) {
        d.avatar_id = m.avatar_id;
      }

      if (m.coin != null && m.hasOwnProperty("coin")) {
        d.coin = m.coin;
      }

      if (m.crystal != null && m.hasOwnProperty("crystal")) {
        d.crystal = m.crystal;
      }

      if (m.heart != null && m.hasOwnProperty("heart")) {
        d.heart = m.heart;
      }

      if (m.slogan != null && m.hasOwnProperty("slogan")) {
        d.slogan = m.slogan;
      }

      if (m.isMail != null && m.hasOwnProperty("isMail")) {
        d.isMail = m.isMail;
      }

      return d;
    };
    /**
     * Converts this MessagePlayerInfo to JSON.
     * @function toJSON
     * @memberof farm.MessagePlayerInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessagePlayerInfo.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessagePlayerInfo;
  }();

  farm.WordBubble = function () {
    /**
     * Properties of a WordBubble.
     * @memberof farm
     * @interface IWordBubble
     * @property {number|null} [word_id] WordBubble word_id
     * @property {number|Long|null} [building_id] WordBubble building_id
     */

    /**
     * Constructs a new WordBubble.
     * @memberof farm
     * @classdesc Represents a WordBubble.
     * @implements IWordBubble
     * @constructor
     * @param {farm.IWordBubble=} [p] Properties to set
     */
    function WordBubble(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * WordBubble word_id.
     * @member {number} word_id
     * @memberof farm.WordBubble
     * @instance
     */


    WordBubble.prototype.word_id = 0;
    /**
     * WordBubble building_id.
     * @member {number|Long} building_id
     * @memberof farm.WordBubble
     * @instance
     */

    WordBubble.prototype.building_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified WordBubble message. Does not implicitly {@link farm.WordBubble.verify|verify} messages.
     * @function encode
     * @memberof farm.WordBubble
     * @static
     * @param {farm.IWordBubble} m WordBubble message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    WordBubble.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.word_id != null && Object.hasOwnProperty.call(m, "word_id")) w.uint32(8).int32(m.word_id);
      if (m.building_id != null && Object.hasOwnProperty.call(m, "building_id")) w.uint32(16).int64(m.building_id);
      return w;
    };
    /**
     * Decodes a WordBubble message from the specified reader or buffer.
     * @function decode
     * @memberof farm.WordBubble
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.WordBubble} WordBubble
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    WordBubble.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.WordBubble();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.word_id = r.int32();
            break;

          case 2:
            m.building_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a WordBubble message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.WordBubble
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.WordBubble} WordBubble
     */


    WordBubble.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.WordBubble) return d;
      var m = new $root.farm.WordBubble();

      if (d.word_id != null) {
        m.word_id = d.word_id | 0;
      }

      if (d.building_id != null) {
        if ($util.Long) (m.building_id = $util.Long.fromValue(d.building_id)).unsigned = false;else if (typeof d.building_id === "string") m.building_id = parseInt(d.building_id, 10);else if (typeof d.building_id === "number") m.building_id = d.building_id;else if (typeof d.building_id === "object") m.building_id = new $util.LongBits(d.building_id.low >>> 0, d.building_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a WordBubble message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.WordBubble
     * @static
     * @param {farm.WordBubble} m WordBubble
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    WordBubble.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.word_id = 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.building_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.building_id = o.longs === String ? "0" : 0;
      }

      if (m.word_id != null && m.hasOwnProperty("word_id")) {
        d.word_id = m.word_id;
      }

      if (m.building_id != null && m.hasOwnProperty("building_id")) {
        if (typeof m.building_id === "number") d.building_id = o.longs === String ? String(m.building_id) : m.building_id;else d.building_id = o.longs === String ? $util.Long.prototype.toString.call(m.building_id) : o.longs === Number ? new $util.LongBits(m.building_id.low >>> 0, m.building_id.high >>> 0).toNumber() : m.building_id;
      }

      return d;
    };
    /**
     * Converts this WordBubble to JSON.
     * @function toJSON
     * @memberof farm.WordBubble
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    WordBubble.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return WordBubble;
  }();

  farm.ReqWordBubbleEnd = function () {
    /**
     * Properties of a ReqWordBubbleEnd.
     * @memberof farm
     * @interface IReqWordBubbleEnd
     * @property {number|null} [word_id] ReqWordBubbleEnd word_id
     * @property {number|Long|null} [building_id] ReqWordBubbleEnd building_id
     */

    /**
     * Constructs a new ReqWordBubbleEnd.
     * @memberof farm
     * @classdesc Represents a ReqWordBubbleEnd.
     * @implements IReqWordBubbleEnd
     * @constructor
     * @param {farm.IReqWordBubbleEnd=} [p] Properties to set
     */
    function ReqWordBubbleEnd(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqWordBubbleEnd word_id.
     * @member {number} word_id
     * @memberof farm.ReqWordBubbleEnd
     * @instance
     */


    ReqWordBubbleEnd.prototype.word_id = 0;
    /**
     * ReqWordBubbleEnd building_id.
     * @member {number|Long} building_id
     * @memberof farm.ReqWordBubbleEnd
     * @instance
     */

    ReqWordBubbleEnd.prototype.building_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqWordBubbleEnd message. Does not implicitly {@link farm.ReqWordBubbleEnd.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqWordBubbleEnd
     * @static
     * @param {farm.IReqWordBubbleEnd} m ReqWordBubbleEnd message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqWordBubbleEnd.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.word_id != null && Object.hasOwnProperty.call(m, "word_id")) w.uint32(8).int32(m.word_id);
      if (m.building_id != null && Object.hasOwnProperty.call(m, "building_id")) w.uint32(16).int64(m.building_id);
      return w;
    };
    /**
     * Decodes a ReqWordBubbleEnd message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqWordBubbleEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqWordBubbleEnd} ReqWordBubbleEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqWordBubbleEnd.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqWordBubbleEnd();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.word_id = r.int32();
            break;

          case 2:
            m.building_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqWordBubbleEnd message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqWordBubbleEnd
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqWordBubbleEnd} ReqWordBubbleEnd
     */


    ReqWordBubbleEnd.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqWordBubbleEnd) return d;
      var m = new $root.farm.ReqWordBubbleEnd();

      if (d.word_id != null) {
        m.word_id = d.word_id | 0;
      }

      if (d.building_id != null) {
        if ($util.Long) (m.building_id = $util.Long.fromValue(d.building_id)).unsigned = false;else if (typeof d.building_id === "string") m.building_id = parseInt(d.building_id, 10);else if (typeof d.building_id === "number") m.building_id = d.building_id;else if (typeof d.building_id === "object") m.building_id = new $util.LongBits(d.building_id.low >>> 0, d.building_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqWordBubbleEnd message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqWordBubbleEnd
     * @static
     * @param {farm.ReqWordBubbleEnd} m ReqWordBubbleEnd
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqWordBubbleEnd.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.word_id = 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.building_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.building_id = o.longs === String ? "0" : 0;
      }

      if (m.word_id != null && m.hasOwnProperty("word_id")) {
        d.word_id = m.word_id;
      }

      if (m.building_id != null && m.hasOwnProperty("building_id")) {
        if (typeof m.building_id === "number") d.building_id = o.longs === String ? String(m.building_id) : m.building_id;else d.building_id = o.longs === String ? $util.Long.prototype.toString.call(m.building_id) : o.longs === Number ? new $util.LongBits(m.building_id.low >>> 0, m.building_id.high >>> 0).toNumber() : m.building_id;
      }

      return d;
    };
    /**
     * Converts this ReqWordBubbleEnd to JSON.
     * @function toJSON
     * @memberof farm.ReqWordBubbleEnd
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqWordBubbleEnd.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqWordBubbleEnd;
  }();

  farm.ReqUpdateBillboards = function () {
    /**
     * Properties of a ReqUpdateBillboards.
     * @memberof farm
     * @interface IReqUpdateBillboards
     * @property {string|null} [content] ReqUpdateBillboards content
     */

    /**
     * Constructs a new ReqUpdateBillboards.
     * @memberof farm
     * @classdesc Represents a ReqUpdateBillboards.
     * @implements IReqUpdateBillboards
     * @constructor
     * @param {farm.IReqUpdateBillboards=} [p] Properties to set
     */
    function ReqUpdateBillboards(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqUpdateBillboards content.
     * @member {string} content
     * @memberof farm.ReqUpdateBillboards
     * @instance
     */


    ReqUpdateBillboards.prototype.content = "";
    /**
     * Encodes the specified ReqUpdateBillboards message. Does not implicitly {@link farm.ReqUpdateBillboards.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqUpdateBillboards
     * @static
     * @param {farm.IReqUpdateBillboards} m ReqUpdateBillboards message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqUpdateBillboards.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.content != null && Object.hasOwnProperty.call(m, "content")) w.uint32(10).string(m.content);
      return w;
    };
    /**
     * Decodes a ReqUpdateBillboards message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqUpdateBillboards
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqUpdateBillboards} ReqUpdateBillboards
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqUpdateBillboards.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqUpdateBillboards();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.content = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqUpdateBillboards message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqUpdateBillboards
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqUpdateBillboards} ReqUpdateBillboards
     */


    ReqUpdateBillboards.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqUpdateBillboards) return d;
      var m = new $root.farm.ReqUpdateBillboards();

      if (d.content != null) {
        m.content = String(d.content);
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqUpdateBillboards message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqUpdateBillboards
     * @static
     * @param {farm.ReqUpdateBillboards} m ReqUpdateBillboards
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqUpdateBillboards.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.content = "";
      }

      if (m.content != null && m.hasOwnProperty("content")) {
        d.content = m.content;
      }

      return d;
    };
    /**
     * Converts this ReqUpdateBillboards to JSON.
     * @function toJSON
     * @memberof farm.ReqUpdateBillboards
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqUpdateBillboards.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqUpdateBillboards;
  }();

  farm.RespMailList = function () {
    /**
     * Properties of a RespMailList.
     * @memberof farm
     * @interface IRespMailList
     * @property {Array.<farm.IMailListItem>|null} [mails] RespMailList mails
     */

    /**
     * Constructs a new RespMailList.
     * @memberof farm
     * @classdesc Represents a RespMailList.
     * @implements IRespMailList
     * @constructor
     * @param {farm.IRespMailList=} [p] Properties to set
     */
    function RespMailList(p) {
      this.mails = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespMailList mails.
     * @member {Array.<farm.IMailListItem>} mails
     * @memberof farm.RespMailList
     * @instance
     */


    RespMailList.prototype.mails = $util.emptyArray;
    /**
     * Encodes the specified RespMailList message. Does not implicitly {@link farm.RespMailList.verify|verify} messages.
     * @function encode
     * @memberof farm.RespMailList
     * @static
     * @param {farm.IRespMailList} m RespMailList message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespMailList.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.mails != null && m.mails.length) {
        for (var i = 0; i < m.mails.length; ++i) {
          $root.farm.MailListItem.encode(m.mails[i], w.uint32(10).fork()).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespMailList message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespMailList
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespMailList} RespMailList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespMailList.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespMailList();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.mails && m.mails.length)) m.mails = [];
            m.mails.push($root.farm.MailListItem.decode(r, r.uint32()));
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespMailList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespMailList
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespMailList} RespMailList
     */


    RespMailList.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespMailList) return d;
      var m = new $root.farm.RespMailList();

      if (d.mails) {
        if (!Array.isArray(d.mails)) throw TypeError(".farm.RespMailList.mails: array expected");
        m.mails = [];

        for (var i = 0; i < d.mails.length; ++i) {
          if (typeof d.mails[i] !== "object") throw TypeError(".farm.RespMailList.mails: object expected");
          m.mails[i] = $root.farm.MailListItem.fromObject(d.mails[i]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespMailList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespMailList
     * @static
     * @param {farm.RespMailList} m RespMailList
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespMailList.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.mails = [];
      }

      if (m.mails && m.mails.length) {
        d.mails = [];

        for (var j = 0; j < m.mails.length; ++j) {
          d.mails[j] = $root.farm.MailListItem.toObject(m.mails[j], o);
        }
      }

      return d;
    };
    /**
     * Converts this RespMailList to JSON.
     * @function toJSON
     * @memberof farm.RespMailList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespMailList.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespMailList;
  }();

  farm.MailListItem = function () {
    /**
     * Properties of a MailListItem.
     * @memberof farm
     * @interface IMailListItem
     * @property {number|Long|null} [id] MailListItem id
     * @property {farm.MailType|null} [type] MailListItem type
     * @property {number|Long|null} [sender_uid] MailListItem sender_uid
     * @property {string|null} [title] MailListItem title
     * @property {farm.MailState|null} [status] MailListItem status
     */

    /**
     * Constructs a new MailListItem.
     * @memberof farm
     * @classdesc Represents a MailListItem.
     * @implements IMailListItem
     * @constructor
     * @param {farm.IMailListItem=} [p] Properties to set
     */
    function MailListItem(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MailListItem id.
     * @member {number|Long} id
     * @memberof farm.MailListItem
     * @instance
     */


    MailListItem.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * MailListItem type.
     * @member {farm.MailType} type
     * @memberof farm.MailListItem
     * @instance
     */

    MailListItem.prototype.type = 0;
    /**
     * MailListItem sender_uid.
     * @member {number|Long} sender_uid
     * @memberof farm.MailListItem
     * @instance
     */

    MailListItem.prototype.sender_uid = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * MailListItem title.
     * @member {string} title
     * @memberof farm.MailListItem
     * @instance
     */

    MailListItem.prototype.title = "";
    /**
     * MailListItem status.
     * @member {farm.MailState} status
     * @memberof farm.MailListItem
     * @instance
     */

    MailListItem.prototype.status = 0;
    /**
     * Encodes the specified MailListItem message. Does not implicitly {@link farm.MailListItem.verify|verify} messages.
     * @function encode
     * @memberof farm.MailListItem
     * @static
     * @param {farm.IMailListItem} m MailListItem message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MailListItem.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(16).int32(m.type);
      if (m.sender_uid != null && Object.hasOwnProperty.call(m, "sender_uid")) w.uint32(24).int64(m.sender_uid);
      if (m.title != null && Object.hasOwnProperty.call(m, "title")) w.uint32(34).string(m.title);
      if (m.status != null && Object.hasOwnProperty.call(m, "status")) w.uint32(40).int32(m.status);
      return w;
    };
    /**
     * Decodes a MailListItem message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MailListItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MailListItem} MailListItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MailListItem.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MailListItem();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.type = r.int32();
            break;

          case 3:
            m.sender_uid = r.int64();
            break;

          case 4:
            m.title = r.string();
            break;

          case 5:
            m.status = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MailListItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MailListItem
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MailListItem} MailListItem
     */


    MailListItem.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MailListItem) return d;
      var m = new $root.farm.MailListItem();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      switch (d.type) {
        case "SYS":
        case 0:
          m.type = 0;
          break;

        case "NPC":
        case 1:
          m.type = 1;
          break;

        case "Player":
        case 2:
          m.type = 2;
          break;
      }

      if (d.sender_uid != null) {
        if ($util.Long) (m.sender_uid = $util.Long.fromValue(d.sender_uid)).unsigned = false;else if (typeof d.sender_uid === "string") m.sender_uid = parseInt(d.sender_uid, 10);else if (typeof d.sender_uid === "number") m.sender_uid = d.sender_uid;else if (typeof d.sender_uid === "object") m.sender_uid = new $util.LongBits(d.sender_uid.low >>> 0, d.sender_uid.high >>> 0).toNumber();
      }

      if (d.title != null) {
        m.title = String(d.title);
      }

      switch (d.status) {
        case "No_Read":
        case 0:
          m.status = 0;
          break;

        case "Read":
        case 1:
          m.status = 1;
          break;
      }

      return m;
    };
    /**
     * Creates a plain object from a MailListItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MailListItem
     * @static
     * @param {farm.MailListItem} m MailListItem
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MailListItem.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.type = o.enums === String ? "SYS" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.sender_uid = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.sender_uid = o.longs === String ? "0" : 0;

        d.title = "";
        d.status = o.enums === String ? "No_Read" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = o.enums === String ? $root.farm.MailType[m.type] : m.type;
      }

      if (m.sender_uid != null && m.hasOwnProperty("sender_uid")) {
        if (typeof m.sender_uid === "number") d.sender_uid = o.longs === String ? String(m.sender_uid) : m.sender_uid;else d.sender_uid = o.longs === String ? $util.Long.prototype.toString.call(m.sender_uid) : o.longs === Number ? new $util.LongBits(m.sender_uid.low >>> 0, m.sender_uid.high >>> 0).toNumber() : m.sender_uid;
      }

      if (m.title != null && m.hasOwnProperty("title")) {
        d.title = m.title;
      }

      if (m.status != null && m.hasOwnProperty("status")) {
        d.status = o.enums === String ? $root.farm.MailState[m.status] : m.status;
      }

      return d;
    };
    /**
     * Converts this MailListItem to JSON.
     * @function toJSON
     * @memberof farm.MailListItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MailListItem.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MailListItem;
  }();

  farm.RespMailDetail = function () {
    /**
     * Properties of a RespMailDetail.
     * @memberof farm
     * @interface IRespMailDetail
     * @property {number|Long|null} [id] RespMailDetail id
     * @property {string|null} [content] RespMailDetail content
     * @property {Array.<farm.IAnnex>|null} [annexes] RespMailDetail annexes
     * @property {farm.MailTapType|null} [type] RespMailDetail type
     */

    /**
     * Constructs a new RespMailDetail.
     * @memberof farm
     * @classdesc Represents a RespMailDetail.
     * @implements IRespMailDetail
     * @constructor
     * @param {farm.IRespMailDetail=} [p] Properties to set
     */
    function RespMailDetail(p) {
      this.annexes = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespMailDetail id.
     * @member {number|Long} id
     * @memberof farm.RespMailDetail
     * @instance
     */


    RespMailDetail.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * RespMailDetail content.
     * @member {string} content
     * @memberof farm.RespMailDetail
     * @instance
     */

    RespMailDetail.prototype.content = "";
    /**
     * RespMailDetail annexes.
     * @member {Array.<farm.IAnnex>} annexes
     * @memberof farm.RespMailDetail
     * @instance
     */

    RespMailDetail.prototype.annexes = $util.emptyArray;
    /**
     * RespMailDetail type.
     * @member {farm.MailTapType} type
     * @memberof farm.RespMailDetail
     * @instance
     */

    RespMailDetail.prototype.type = 0;
    /**
     * Encodes the specified RespMailDetail message. Does not implicitly {@link farm.RespMailDetail.verify|verify} messages.
     * @function encode
     * @memberof farm.RespMailDetail
     * @static
     * @param {farm.IRespMailDetail} m RespMailDetail message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespMailDetail.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.content != null && Object.hasOwnProperty.call(m, "content")) w.uint32(18).string(m.content);

      if (m.annexes != null && m.annexes.length) {
        for (var i = 0; i < m.annexes.length; ++i) {
          $root.farm.Annex.encode(m.annexes[i], w.uint32(26).fork()).ldelim();
        }
      }

      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(32).int32(m.type);
      return w;
    };
    /**
     * Decodes a RespMailDetail message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespMailDetail
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespMailDetail} RespMailDetail
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespMailDetail.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespMailDetail();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.content = r.string();
            break;

          case 3:
            if (!(m.annexes && m.annexes.length)) m.annexes = [];
            m.annexes.push($root.farm.Annex.decode(r, r.uint32()));
            break;

          case 4:
            m.type = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespMailDetail message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespMailDetail
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespMailDetail} RespMailDetail
     */


    RespMailDetail.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespMailDetail) return d;
      var m = new $root.farm.RespMailDetail();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.content != null) {
        m.content = String(d.content);
      }

      if (d.annexes) {
        if (!Array.isArray(d.annexes)) throw TypeError(".farm.RespMailDetail.annexes: array expected");
        m.annexes = [];

        for (var i = 0; i < d.annexes.length; ++i) {
          if (typeof d.annexes[i] !== "object") throw TypeError(".farm.RespMailDetail.annexes: object expected");
          m.annexes[i] = $root.farm.Annex.fromObject(d.annexes[i]);
        }
      }

      switch (d.type) {
        case "Notification":
        case 0:
          m.type = 0;
          break;

        case "Annexes":
        case 1:
          m.type = 1;
          break;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespMailDetail message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespMailDetail
     * @static
     * @param {farm.RespMailDetail} m RespMailDetail
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespMailDetail.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.annexes = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.content = "";
        d.type = o.enums === String ? "Notification" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.content != null && m.hasOwnProperty("content")) {
        d.content = m.content;
      }

      if (m.annexes && m.annexes.length) {
        d.annexes = [];

        for (var j = 0; j < m.annexes.length; ++j) {
          d.annexes[j] = $root.farm.Annex.toObject(m.annexes[j], o);
        }
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = o.enums === String ? $root.farm.MailTapType[m.type] : m.type;
      }

      return d;
    };
    /**
     * Converts this RespMailDetail to JSON.
     * @function toJSON
     * @memberof farm.RespMailDetail
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespMailDetail.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespMailDetail;
  }();

  farm.Annex = function () {
    /**
     * Properties of an Annex.
     * @memberof farm
     * @interface IAnnex
     * @property {number|Long|null} [annex_id] Annex annex_id
     * @property {farm.AnnexState|null} [status] Annex status
     * @property {number|null} [num] Annex num
     */

    /**
     * Constructs a new Annex.
     * @memberof farm
     * @classdesc Represents an Annex.
     * @implements IAnnex
     * @constructor
     * @param {farm.IAnnex=} [p] Properties to set
     */
    function Annex(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Annex annex_id.
     * @member {number|Long} annex_id
     * @memberof farm.Annex
     * @instance
     */


    Annex.prototype.annex_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Annex status.
     * @member {farm.AnnexState} status
     * @memberof farm.Annex
     * @instance
     */

    Annex.prototype.status = 0;
    /**
     * Annex num.
     * @member {number} num
     * @memberof farm.Annex
     * @instance
     */

    Annex.prototype.num = 0;
    /**
     * Encodes the specified Annex message. Does not implicitly {@link farm.Annex.verify|verify} messages.
     * @function encode
     * @memberof farm.Annex
     * @static
     * @param {farm.IAnnex} m Annex message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Annex.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.annex_id != null && Object.hasOwnProperty.call(m, "annex_id")) w.uint32(8).int64(m.annex_id);
      if (m.status != null && Object.hasOwnProperty.call(m, "status")) w.uint32(16).int32(m.status);
      if (m.num != null && Object.hasOwnProperty.call(m, "num")) w.uint32(24).int32(m.num);
      return w;
    };
    /**
     * Decodes an Annex message from the specified reader or buffer.
     * @function decode
     * @memberof farm.Annex
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.Annex} Annex
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Annex.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.Annex();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.annex_id = r.int64();
            break;

          case 2:
            m.status = r.int32();
            break;

          case 3:
            m.num = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an Annex message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.Annex
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.Annex} Annex
     */


    Annex.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.Annex) return d;
      var m = new $root.farm.Annex();

      if (d.annex_id != null) {
        if ($util.Long) (m.annex_id = $util.Long.fromValue(d.annex_id)).unsigned = false;else if (typeof d.annex_id === "string") m.annex_id = parseInt(d.annex_id, 10);else if (typeof d.annex_id === "number") m.annex_id = d.annex_id;else if (typeof d.annex_id === "object") m.annex_id = new $util.LongBits(d.annex_id.low >>> 0, d.annex_id.high >>> 0).toNumber();
      }

      switch (d.status) {
        case "No_Receive":
        case 0:
          m.status = 0;
          break;

        case "Received":
        case 1:
          m.status = 1;
          break;
      }

      if (d.num != null) {
        m.num = d.num | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from an Annex message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.Annex
     * @static
     * @param {farm.Annex} m Annex
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Annex.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.annex_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.annex_id = o.longs === String ? "0" : 0;

        d.status = o.enums === String ? "No_Receive" : 0;
        d.num = 0;
      }

      if (m.annex_id != null && m.hasOwnProperty("annex_id")) {
        if (typeof m.annex_id === "number") d.annex_id = o.longs === String ? String(m.annex_id) : m.annex_id;else d.annex_id = o.longs === String ? $util.Long.prototype.toString.call(m.annex_id) : o.longs === Number ? new $util.LongBits(m.annex_id.low >>> 0, m.annex_id.high >>> 0).toNumber() : m.annex_id;
      }

      if (m.status != null && m.hasOwnProperty("status")) {
        d.status = o.enums === String ? $root.farm.AnnexState[m.status] : m.status;
      }

      if (m.num != null && m.hasOwnProperty("num")) {
        d.num = m.num;
      }

      return d;
    };
    /**
     * Converts this Annex to JSON.
     * @function toJSON
     * @memberof farm.Annex
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Annex.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Annex;
  }();

  farm.ReqReceiveAnnex = function () {
    /**
     * Properties of a ReqReceiveAnnex.
     * @memberof farm
     * @interface IReqReceiveAnnex
     * @property {Array.<number|Long>|null} [annexIDs] ReqReceiveAnnex annexIDs
     * @property {number|Long|null} [mail_id] ReqReceiveAnnex mail_id
     */

    /**
     * Constructs a new ReqReceiveAnnex.
     * @memberof farm
     * @classdesc Represents a ReqReceiveAnnex.
     * @implements IReqReceiveAnnex
     * @constructor
     * @param {farm.IReqReceiveAnnex=} [p] Properties to set
     */
    function ReqReceiveAnnex(p) {
      this.annexIDs = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqReceiveAnnex annexIDs.
     * @member {Array.<number|Long>} annexIDs
     * @memberof farm.ReqReceiveAnnex
     * @instance
     */


    ReqReceiveAnnex.prototype.annexIDs = $util.emptyArray;
    /**
     * ReqReceiveAnnex mail_id.
     * @member {number|Long} mail_id
     * @memberof farm.ReqReceiveAnnex
     * @instance
     */

    ReqReceiveAnnex.prototype.mail_id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Encodes the specified ReqReceiveAnnex message. Does not implicitly {@link farm.ReqReceiveAnnex.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqReceiveAnnex
     * @static
     * @param {farm.IReqReceiveAnnex} m ReqReceiveAnnex message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqReceiveAnnex.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.annexIDs != null && m.annexIDs.length) {
        w.uint32(10).fork();

        for (var i = 0; i < m.annexIDs.length; ++i) {
          w.int64(m.annexIDs[i]);
        }

        w.ldelim();
      }

      if (m.mail_id != null && Object.hasOwnProperty.call(m, "mail_id")) w.uint32(16).int64(m.mail_id);
      return w;
    };
    /**
     * Decodes a ReqReceiveAnnex message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqReceiveAnnex
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqReceiveAnnex} ReqReceiveAnnex
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqReceiveAnnex.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqReceiveAnnex();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.annexIDs && m.annexIDs.length)) m.annexIDs = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.annexIDs.push(r.int64());
              }
            } else m.annexIDs.push(r.int64());

            break;

          case 2:
            m.mail_id = r.int64();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqReceiveAnnex message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqReceiveAnnex
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqReceiveAnnex} ReqReceiveAnnex
     */


    ReqReceiveAnnex.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqReceiveAnnex) return d;
      var m = new $root.farm.ReqReceiveAnnex();

      if (d.annexIDs) {
        if (!Array.isArray(d.annexIDs)) throw TypeError(".farm.ReqReceiveAnnex.annexIDs: array expected");
        m.annexIDs = [];

        for (var i = 0; i < d.annexIDs.length; ++i) {
          if ($util.Long) (m.annexIDs[i] = $util.Long.fromValue(d.annexIDs[i])).unsigned = false;else if (typeof d.annexIDs[i] === "string") m.annexIDs[i] = parseInt(d.annexIDs[i], 10);else if (typeof d.annexIDs[i] === "number") m.annexIDs[i] = d.annexIDs[i];else if (typeof d.annexIDs[i] === "object") m.annexIDs[i] = new $util.LongBits(d.annexIDs[i].low >>> 0, d.annexIDs[i].high >>> 0).toNumber();
        }
      }

      if (d.mail_id != null) {
        if ($util.Long) (m.mail_id = $util.Long.fromValue(d.mail_id)).unsigned = false;else if (typeof d.mail_id === "string") m.mail_id = parseInt(d.mail_id, 10);else if (typeof d.mail_id === "number") m.mail_id = d.mail_id;else if (typeof d.mail_id === "object") m.mail_id = new $util.LongBits(d.mail_id.low >>> 0, d.mail_id.high >>> 0).toNumber();
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqReceiveAnnex message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqReceiveAnnex
     * @static
     * @param {farm.ReqReceiveAnnex} m ReqReceiveAnnex
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqReceiveAnnex.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.annexIDs = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.mail_id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.mail_id = o.longs === String ? "0" : 0;
      }

      if (m.annexIDs && m.annexIDs.length) {
        d.annexIDs = [];

        for (var j = 0; j < m.annexIDs.length; ++j) {
          if (typeof m.annexIDs[j] === "number") d.annexIDs[j] = o.longs === String ? String(m.annexIDs[j]) : m.annexIDs[j];else d.annexIDs[j] = o.longs === String ? $util.Long.prototype.toString.call(m.annexIDs[j]) : o.longs === Number ? new $util.LongBits(m.annexIDs[j].low >>> 0, m.annexIDs[j].high >>> 0).toNumber() : m.annexIDs[j];
        }
      }

      if (m.mail_id != null && m.hasOwnProperty("mail_id")) {
        if (typeof m.mail_id === "number") d.mail_id = o.longs === String ? String(m.mail_id) : m.mail_id;else d.mail_id = o.longs === String ? $util.Long.prototype.toString.call(m.mail_id) : o.longs === Number ? new $util.LongBits(m.mail_id.low >>> 0, m.mail_id.high >>> 0).toNumber() : m.mail_id;
      }

      return d;
    };
    /**
     * Converts this ReqReceiveAnnex to JSON.
     * @function toJSON
     * @memberof farm.ReqReceiveAnnex
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqReceiveAnnex.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqReceiveAnnex;
  }();
  /**
   * QuestState enum.
   * @name farm.QuestState
   * @enum {number}
   * @property {number} Pending=0 Pending value
   * @property {number} Unlocked=1 Unlocked value
   * @property {number} Inprogress=2 Inprogress value
   * @property {number} Complete=3 Complete value
   * @property {number} Cancel=4 Cancel value
   * @property {number} Done=5 Done value
   */


  farm.QuestState = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "Pending"] = 0;
    values[valuesById[1] = "Unlocked"] = 1;
    values[valuesById[2] = "Inprogress"] = 2;
    values[valuesById[3] = "Complete"] = 3;
    values[valuesById[4] = "Cancel"] = 4;
    values[valuesById[5] = "Done"] = 5;
    return values;
  }();
  /**
   * DialogStageType enum.
   * @name farm.DialogStageType
   * @enum {number}
   * @property {number} NPCDialog=0 NPCDialog value
   * @property {number} PhoneDialog=1 PhoneDialog value
   * @property {number} QuestBoardDialog=2 QuestBoardDialog value
   */


  farm.DialogStageType = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "NPCDialog"] = 0;
    values[valuesById[1] = "PhoneDialog"] = 1;
    values[valuesById[2] = "QuestBoardDialog"] = 2;
    return values;
  }();

  farm.MessagePhoneCall = function () {
    /**
     * Properties of a MessagePhoneCall.
     * @memberof farm
     * @interface IMessagePhoneCall
     * @property {number|null} [char_config_id] MessagePhoneCall char_config_id
     * @property {number|null} [dlg_stage_id] MessagePhoneCall dlg_stage_id
     */

    /**
     * Constructs a new MessagePhoneCall.
     * @memberof farm
     * @classdesc Represents a MessagePhoneCall.
     * @implements IMessagePhoneCall
     * @constructor
     * @param {farm.IMessagePhoneCall=} [p] Properties to set
     */
    function MessagePhoneCall(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessagePhoneCall char_config_id.
     * @member {number} char_config_id
     * @memberof farm.MessagePhoneCall
     * @instance
     */


    MessagePhoneCall.prototype.char_config_id = 0;
    /**
     * MessagePhoneCall dlg_stage_id.
     * @member {number} dlg_stage_id
     * @memberof farm.MessagePhoneCall
     * @instance
     */

    MessagePhoneCall.prototype.dlg_stage_id = 0;
    /**
     * Encodes the specified MessagePhoneCall message. Does not implicitly {@link farm.MessagePhoneCall.verify|verify} messages.
     * @function encode
     * @memberof farm.MessagePhoneCall
     * @static
     * @param {farm.IMessagePhoneCall} m MessagePhoneCall message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessagePhoneCall.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.char_config_id != null && Object.hasOwnProperty.call(m, "char_config_id")) w.uint32(8).int32(m.char_config_id);
      if (m.dlg_stage_id != null && Object.hasOwnProperty.call(m, "dlg_stage_id")) w.uint32(16).int32(m.dlg_stage_id);
      return w;
    };
    /**
     * Decodes a MessagePhoneCall message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessagePhoneCall
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessagePhoneCall} MessagePhoneCall
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessagePhoneCall.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessagePhoneCall();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.char_config_id = r.int32();
            break;

          case 2:
            m.dlg_stage_id = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessagePhoneCall message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessagePhoneCall
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessagePhoneCall} MessagePhoneCall
     */


    MessagePhoneCall.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessagePhoneCall) return d;
      var m = new $root.farm.MessagePhoneCall();

      if (d.char_config_id != null) {
        m.char_config_id = d.char_config_id | 0;
      }

      if (d.dlg_stage_id != null) {
        m.dlg_stage_id = d.dlg_stage_id | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a MessagePhoneCall message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessagePhoneCall
     * @static
     * @param {farm.MessagePhoneCall} m MessagePhoneCall
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessagePhoneCall.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.char_config_id = 0;
        d.dlg_stage_id = 0;
      }

      if (m.char_config_id != null && m.hasOwnProperty("char_config_id")) {
        d.char_config_id = m.char_config_id;
      }

      if (m.dlg_stage_id != null && m.hasOwnProperty("dlg_stage_id")) {
        d.dlg_stage_id = m.dlg_stage_id;
      }

      return d;
    };
    /**
     * Converts this MessagePhoneCall to JSON.
     * @function toJSON
     * @memberof farm.MessagePhoneCall
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessagePhoneCall.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessagePhoneCall;
  }();

  farm.QuestData = function () {
    /**
     * Properties of a QuestData.
     * @memberof farm
     * @interface IQuestData
     * @property {number|Long|null} [id] QuestData id
     * @property {number|null} [config_id] QuestData config_id
     * @property {farm.QuestState|null} [state] QuestData state
     * @property {number|Long|null} [left_dur] QuestData left_dur
     * @property {Array.<number>|null} [task_data] QuestData task_data
     */

    /**
     * Constructs a new QuestData.
     * @memberof farm
     * @classdesc Represents a QuestData.
     * @implements IQuestData
     * @constructor
     * @param {farm.IQuestData=} [p] Properties to set
     */
    function QuestData(p) {
      this.task_data = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * QuestData id.
     * @member {number|Long} id
     * @memberof farm.QuestData
     * @instance
     */


    QuestData.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * QuestData config_id.
     * @member {number} config_id
     * @memberof farm.QuestData
     * @instance
     */

    QuestData.prototype.config_id = 0;
    /**
     * QuestData state.
     * @member {farm.QuestState} state
     * @memberof farm.QuestData
     * @instance
     */

    QuestData.prototype.state = 0;
    /**
     * QuestData left_dur.
     * @member {number|Long} left_dur
     * @memberof farm.QuestData
     * @instance
     */

    QuestData.prototype.left_dur = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * QuestData task_data.
     * @member {Array.<number>} task_data
     * @memberof farm.QuestData
     * @instance
     */

    QuestData.prototype.task_data = $util.emptyArray;
    /**
     * Encodes the specified QuestData message. Does not implicitly {@link farm.QuestData.verify|verify} messages.
     * @function encode
     * @memberof farm.QuestData
     * @static
     * @param {farm.IQuestData} m QuestData message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    QuestData.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.config_id != null && Object.hasOwnProperty.call(m, "config_id")) w.uint32(16).int32(m.config_id);
      if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(24).int32(m.state);
      if (m.left_dur != null && Object.hasOwnProperty.call(m, "left_dur")) w.uint32(32).int64(m.left_dur);

      if (m.task_data != null && m.task_data.length) {
        w.uint32(42).fork();

        for (var i = 0; i < m.task_data.length; ++i) {
          w.int32(m.task_data[i]);
        }

        w.ldelim();
      }

      return w;
    };
    /**
     * Decodes a QuestData message from the specified reader or buffer.
     * @function decode
     * @memberof farm.QuestData
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.QuestData} QuestData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    QuestData.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.QuestData();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.config_id = r.int32();
            break;

          case 3:
            m.state = r.int32();
            break;

          case 4:
            m.left_dur = r.int64();
            break;

          case 5:
            if (!(m.task_data && m.task_data.length)) m.task_data = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.task_data.push(r.int32());
              }
            } else m.task_data.push(r.int32());

            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a QuestData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.QuestData
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.QuestData} QuestData
     */


    QuestData.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.QuestData) return d;
      var m = new $root.farm.QuestData();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      if (d.config_id != null) {
        m.config_id = d.config_id | 0;
      }

      switch (d.state) {
        case "Pending":
        case 0:
          m.state = 0;
          break;

        case "Unlocked":
        case 1:
          m.state = 1;
          break;

        case "Inprogress":
        case 2:
          m.state = 2;
          break;

        case "Complete":
        case 3:
          m.state = 3;
          break;

        case "Cancel":
        case 4:
          m.state = 4;
          break;

        case "Done":
        case 5:
          m.state = 5;
          break;
      }

      if (d.left_dur != null) {
        if ($util.Long) (m.left_dur = $util.Long.fromValue(d.left_dur)).unsigned = false;else if (typeof d.left_dur === "string") m.left_dur = parseInt(d.left_dur, 10);else if (typeof d.left_dur === "number") m.left_dur = d.left_dur;else if (typeof d.left_dur === "object") m.left_dur = new $util.LongBits(d.left_dur.low >>> 0, d.left_dur.high >>> 0).toNumber();
      }

      if (d.task_data) {
        if (!Array.isArray(d.task_data)) throw TypeError(".farm.QuestData.task_data: array expected");
        m.task_data = [];

        for (var i = 0; i < d.task_data.length; ++i) {
          m.task_data[i] = d.task_data[i] | 0;
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a QuestData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.QuestData
     * @static
     * @param {farm.QuestData} m QuestData
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    QuestData.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.task_data = [];
      }

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.config_id = 0;
        d.state = o.enums === String ? "Pending" : 0;

        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.left_dur = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.left_dur = o.longs === String ? "0" : 0;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.config_id != null && m.hasOwnProperty("config_id")) {
        d.config_id = m.config_id;
      }

      if (m.state != null && m.hasOwnProperty("state")) {
        d.state = o.enums === String ? $root.farm.QuestState[m.state] : m.state;
      }

      if (m.left_dur != null && m.hasOwnProperty("left_dur")) {
        if (typeof m.left_dur === "number") d.left_dur = o.longs === String ? String(m.left_dur) : m.left_dur;else d.left_dur = o.longs === String ? $util.Long.prototype.toString.call(m.left_dur) : o.longs === Number ? new $util.LongBits(m.left_dur.low >>> 0, m.left_dur.high >>> 0).toNumber() : m.left_dur;
      }

      if (m.task_data && m.task_data.length) {
        d.task_data = [];

        for (var j = 0; j < m.task_data.length; ++j) {
          d.task_data[j] = m.task_data[j];
        }
      }

      return d;
    };
    /**
     * Converts this QuestData to JSON.
     * @function toJSON
     * @memberof farm.QuestData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    QuestData.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return QuestData;
  }();

  farm.MessageQuestList = function () {
    /**
     * Properties of a MessageQuestList.
     * @memberof farm
     * @interface IMessageQuestList
     * @property {Array.<farm.IQuestData>|null} [quests] MessageQuestList quests
     * @property {number|null} [done_quest_count_today] MessageQuestList done_quest_count_today
     * @property {number|null} [extra_award_left_times] MessageQuestList extra_award_left_times
     * @property {number|null} [daily_circle_quest_next_cost] MessageQuestList daily_circle_quest_next_cost
     */

    /**
     * Constructs a new MessageQuestList.
     * @memberof farm
     * @classdesc Represents a MessageQuestList.
     * @implements IMessageQuestList
     * @constructor
     * @param {farm.IMessageQuestList=} [p] Properties to set
     */
    function MessageQuestList(p) {
      this.quests = [];
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessageQuestList quests.
     * @member {Array.<farm.IQuestData>} quests
     * @memberof farm.MessageQuestList
     * @instance
     */


    MessageQuestList.prototype.quests = $util.emptyArray;
    /**
     * MessageQuestList done_quest_count_today.
     * @member {number} done_quest_count_today
     * @memberof farm.MessageQuestList
     * @instance
     */

    MessageQuestList.prototype.done_quest_count_today = 0;
    /**
     * MessageQuestList extra_award_left_times.
     * @member {number} extra_award_left_times
     * @memberof farm.MessageQuestList
     * @instance
     */

    MessageQuestList.prototype.extra_award_left_times = 0;
    /**
     * MessageQuestList daily_circle_quest_next_cost.
     * @member {number} daily_circle_quest_next_cost
     * @memberof farm.MessageQuestList
     * @instance
     */

    MessageQuestList.prototype.daily_circle_quest_next_cost = 0;
    /**
     * Encodes the specified MessageQuestList message. Does not implicitly {@link farm.MessageQuestList.verify|verify} messages.
     * @function encode
     * @memberof farm.MessageQuestList
     * @static
     * @param {farm.IMessageQuestList} m MessageQuestList message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessageQuestList.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.quests != null && m.quests.length) {
        for (var i = 0; i < m.quests.length; ++i) {
          $root.farm.QuestData.encode(m.quests[i], w.uint32(10).fork()).ldelim();
        }
      }

      if (m.done_quest_count_today != null && Object.hasOwnProperty.call(m, "done_quest_count_today")) w.uint32(16).int32(m.done_quest_count_today);
      if (m.extra_award_left_times != null && Object.hasOwnProperty.call(m, "extra_award_left_times")) w.uint32(24).int32(m.extra_award_left_times);
      if (m.daily_circle_quest_next_cost != null && Object.hasOwnProperty.call(m, "daily_circle_quest_next_cost")) w.uint32(32).int32(m.daily_circle_quest_next_cost);
      return w;
    };
    /**
     * Decodes a MessageQuestList message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessageQuestList
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessageQuestList} MessageQuestList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessageQuestList.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessageQuestList();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            if (!(m.quests && m.quests.length)) m.quests = [];
            m.quests.push($root.farm.QuestData.decode(r, r.uint32()));
            break;

          case 2:
            m.done_quest_count_today = r.int32();
            break;

          case 3:
            m.extra_award_left_times = r.int32();
            break;

          case 4:
            m.daily_circle_quest_next_cost = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessageQuestList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessageQuestList
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessageQuestList} MessageQuestList
     */


    MessageQuestList.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessageQuestList) return d;
      var m = new $root.farm.MessageQuestList();

      if (d.quests) {
        if (!Array.isArray(d.quests)) throw TypeError(".farm.MessageQuestList.quests: array expected");
        m.quests = [];

        for (var i = 0; i < d.quests.length; ++i) {
          if (typeof d.quests[i] !== "object") throw TypeError(".farm.MessageQuestList.quests: object expected");
          m.quests[i] = $root.farm.QuestData.fromObject(d.quests[i]);
        }
      }

      if (d.done_quest_count_today != null) {
        m.done_quest_count_today = d.done_quest_count_today | 0;
      }

      if (d.extra_award_left_times != null) {
        m.extra_award_left_times = d.extra_award_left_times | 0;
      }

      if (d.daily_circle_quest_next_cost != null) {
        m.daily_circle_quest_next_cost = d.daily_circle_quest_next_cost | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a MessageQuestList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessageQuestList
     * @static
     * @param {farm.MessageQuestList} m MessageQuestList
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessageQuestList.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.quests = [];
      }

      if (o.defaults) {
        d.done_quest_count_today = 0;
        d.extra_award_left_times = 0;
        d.daily_circle_quest_next_cost = 0;
      }

      if (m.quests && m.quests.length) {
        d.quests = [];

        for (var j = 0; j < m.quests.length; ++j) {
          d.quests[j] = $root.farm.QuestData.toObject(m.quests[j], o);
        }
      }

      if (m.done_quest_count_today != null && m.hasOwnProperty("done_quest_count_today")) {
        d.done_quest_count_today = m.done_quest_count_today;
      }

      if (m.extra_award_left_times != null && m.hasOwnProperty("extra_award_left_times")) {
        d.extra_award_left_times = m.extra_award_left_times;
      }

      if (m.daily_circle_quest_next_cost != null && m.hasOwnProperty("daily_circle_quest_next_cost")) {
        d.daily_circle_quest_next_cost = m.daily_circle_quest_next_cost;
      }

      return d;
    };
    /**
     * Converts this MessageQuestList to JSON.
     * @function toJSON
     * @memberof farm.MessageQuestList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessageQuestList.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessageQuestList;
  }();

  farm.MessageQuestUpdate = function () {
    /**
     * Properties of a MessageQuestUpdate.
     * @memberof farm
     * @interface IMessageQuestUpdate
     * @property {farm.IQuestData|null} [quest] MessageQuestUpdate quest
     * @property {number|null} [heard_count] MessageQuestUpdate heard_count
     * @property {number|null} [done_quest_count_today] MessageQuestUpdate done_quest_count_today
     * @property {number|null} [extra_award_left_times] MessageQuestUpdate extra_award_left_times
     */

    /**
     * Constructs a new MessageQuestUpdate.
     * @memberof farm
     * @classdesc Represents a MessageQuestUpdate.
     * @implements IMessageQuestUpdate
     * @constructor
     * @param {farm.IMessageQuestUpdate=} [p] Properties to set
     */
    function MessageQuestUpdate(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * MessageQuestUpdate quest.
     * @member {farm.IQuestData|null|undefined} quest
     * @memberof farm.MessageQuestUpdate
     * @instance
     */


    MessageQuestUpdate.prototype.quest = null;
    /**
     * MessageQuestUpdate heard_count.
     * @member {number} heard_count
     * @memberof farm.MessageQuestUpdate
     * @instance
     */

    MessageQuestUpdate.prototype.heard_count = 0;
    /**
     * MessageQuestUpdate done_quest_count_today.
     * @member {number} done_quest_count_today
     * @memberof farm.MessageQuestUpdate
     * @instance
     */

    MessageQuestUpdate.prototype.done_quest_count_today = 0;
    /**
     * MessageQuestUpdate extra_award_left_times.
     * @member {number} extra_award_left_times
     * @memberof farm.MessageQuestUpdate
     * @instance
     */

    MessageQuestUpdate.prototype.extra_award_left_times = 0;
    /**
     * Encodes the specified MessageQuestUpdate message. Does not implicitly {@link farm.MessageQuestUpdate.verify|verify} messages.
     * @function encode
     * @memberof farm.MessageQuestUpdate
     * @static
     * @param {farm.IMessageQuestUpdate} m MessageQuestUpdate message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    MessageQuestUpdate.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.quest != null && Object.hasOwnProperty.call(m, "quest")) $root.farm.QuestData.encode(m.quest, w.uint32(10).fork()).ldelim();
      if (m.heard_count != null && Object.hasOwnProperty.call(m, "heard_count")) w.uint32(16).int32(m.heard_count);
      if (m.done_quest_count_today != null && Object.hasOwnProperty.call(m, "done_quest_count_today")) w.uint32(24).int32(m.done_quest_count_today);
      if (m.extra_award_left_times != null && Object.hasOwnProperty.call(m, "extra_award_left_times")) w.uint32(32).int32(m.extra_award_left_times);
      return w;
    };
    /**
     * Decodes a MessageQuestUpdate message from the specified reader or buffer.
     * @function decode
     * @memberof farm.MessageQuestUpdate
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.MessageQuestUpdate} MessageQuestUpdate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    MessageQuestUpdate.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.MessageQuestUpdate();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.quest = $root.farm.QuestData.decode(r, r.uint32());
            break;

          case 2:
            m.heard_count = r.int32();
            break;

          case 3:
            m.done_quest_count_today = r.int32();
            break;

          case 4:
            m.extra_award_left_times = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a MessageQuestUpdate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.MessageQuestUpdate
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.MessageQuestUpdate} MessageQuestUpdate
     */


    MessageQuestUpdate.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.MessageQuestUpdate) return d;
      var m = new $root.farm.MessageQuestUpdate();

      if (d.quest != null) {
        if (typeof d.quest !== "object") throw TypeError(".farm.MessageQuestUpdate.quest: object expected");
        m.quest = $root.farm.QuestData.fromObject(d.quest);
      }

      if (d.heard_count != null) {
        m.heard_count = d.heard_count | 0;
      }

      if (d.done_quest_count_today != null) {
        m.done_quest_count_today = d.done_quest_count_today | 0;
      }

      if (d.extra_award_left_times != null) {
        m.extra_award_left_times = d.extra_award_left_times | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a MessageQuestUpdate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.MessageQuestUpdate
     * @static
     * @param {farm.MessageQuestUpdate} m MessageQuestUpdate
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    MessageQuestUpdate.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.quest = null;
        d.heard_count = 0;
        d.done_quest_count_today = 0;
        d.extra_award_left_times = 0;
      }

      if (m.quest != null && m.hasOwnProperty("quest")) {
        d.quest = $root.farm.QuestData.toObject(m.quest, o);
      }

      if (m.heard_count != null && m.hasOwnProperty("heard_count")) {
        d.heard_count = m.heard_count;
      }

      if (m.done_quest_count_today != null && m.hasOwnProperty("done_quest_count_today")) {
        d.done_quest_count_today = m.done_quest_count_today;
      }

      if (m.extra_award_left_times != null && m.hasOwnProperty("extra_award_left_times")) {
        d.extra_award_left_times = m.extra_award_left_times;
      }

      return d;
    };
    /**
     * Converts this MessageQuestUpdate to JSON.
     * @function toJSON
     * @memberof farm.MessageQuestUpdate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    MessageQuestUpdate.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MessageQuestUpdate;
  }();

  farm.ReqQuestGainExtraAward = function () {
    /**
     * Properties of a ReqQuestGainExtraAward.
     * @memberof farm
     * @interface IReqQuestGainExtraAward
     * @property {number|null} [extend] ReqQuestGainExtraAward extend
     */

    /**
     * Constructs a new ReqQuestGainExtraAward.
     * @memberof farm
     * @classdesc Represents a ReqQuestGainExtraAward.
     * @implements IReqQuestGainExtraAward
     * @constructor
     * @param {farm.IReqQuestGainExtraAward=} [p] Properties to set
     */
    function ReqQuestGainExtraAward(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqQuestGainExtraAward extend.
     * @member {number} extend
     * @memberof farm.ReqQuestGainExtraAward
     * @instance
     */


    ReqQuestGainExtraAward.prototype.extend = 0;
    /**
     * Encodes the specified ReqQuestGainExtraAward message. Does not implicitly {@link farm.ReqQuestGainExtraAward.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqQuestGainExtraAward
     * @static
     * @param {farm.IReqQuestGainExtraAward} m ReqQuestGainExtraAward message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqQuestGainExtraAward.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.extend != null && Object.hasOwnProperty.call(m, "extend")) w.uint32(8).int32(m.extend);
      return w;
    };
    /**
     * Decodes a ReqQuestGainExtraAward message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqQuestGainExtraAward
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqQuestGainExtraAward} ReqQuestGainExtraAward
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqQuestGainExtraAward.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqQuestGainExtraAward();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.extend = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqQuestGainExtraAward message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqQuestGainExtraAward
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqQuestGainExtraAward} ReqQuestGainExtraAward
     */


    ReqQuestGainExtraAward.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqQuestGainExtraAward) return d;
      var m = new $root.farm.ReqQuestGainExtraAward();

      if (d.extend != null) {
        m.extend = d.extend | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqQuestGainExtraAward message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqQuestGainExtraAward
     * @static
     * @param {farm.ReqQuestGainExtraAward} m ReqQuestGainExtraAward
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqQuestGainExtraAward.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.extend = 0;
      }

      if (m.extend != null && m.hasOwnProperty("extend")) {
        d.extend = m.extend;
      }

      return d;
    };
    /**
     * Converts this ReqQuestGainExtraAward to JSON.
     * @function toJSON
     * @memberof farm.ReqQuestGainExtraAward
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqQuestGainExtraAward.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqQuestGainExtraAward;
  }();

  farm.RespQuestGainExtraAWard = function () {
    /**
     * Properties of a RespQuestGainExtraAWard.
     * @memberof farm
     * @interface IRespQuestGainExtraAWard
     * @property {number|null} [extra_award_left_times] RespQuestGainExtraAWard extra_award_left_times
     */

    /**
     * Constructs a new RespQuestGainExtraAWard.
     * @memberof farm
     * @classdesc Represents a RespQuestGainExtraAWard.
     * @implements IRespQuestGainExtraAWard
     * @constructor
     * @param {farm.IRespQuestGainExtraAWard=} [p] Properties to set
     */
    function RespQuestGainExtraAWard(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespQuestGainExtraAWard extra_award_left_times.
     * @member {number} extra_award_left_times
     * @memberof farm.RespQuestGainExtraAWard
     * @instance
     */


    RespQuestGainExtraAWard.prototype.extra_award_left_times = 0;
    /**
     * Encodes the specified RespQuestGainExtraAWard message. Does not implicitly {@link farm.RespQuestGainExtraAWard.verify|verify} messages.
     * @function encode
     * @memberof farm.RespQuestGainExtraAWard
     * @static
     * @param {farm.IRespQuestGainExtraAWard} m RespQuestGainExtraAWard message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespQuestGainExtraAWard.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.extra_award_left_times != null && Object.hasOwnProperty.call(m, "extra_award_left_times")) w.uint32(8).int32(m.extra_award_left_times);
      return w;
    };
    /**
     * Decodes a RespQuestGainExtraAWard message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespQuestGainExtraAWard
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespQuestGainExtraAWard} RespQuestGainExtraAWard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespQuestGainExtraAWard.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespQuestGainExtraAWard();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.extra_award_left_times = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespQuestGainExtraAWard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespQuestGainExtraAWard
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespQuestGainExtraAWard} RespQuestGainExtraAWard
     */


    RespQuestGainExtraAWard.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespQuestGainExtraAWard) return d;
      var m = new $root.farm.RespQuestGainExtraAWard();

      if (d.extra_award_left_times != null) {
        m.extra_award_left_times = d.extra_award_left_times | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespQuestGainExtraAWard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespQuestGainExtraAWard
     * @static
     * @param {farm.RespQuestGainExtraAWard} m RespQuestGainExtraAWard
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespQuestGainExtraAWard.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.extra_award_left_times = 0;
      }

      if (m.extra_award_left_times != null && m.hasOwnProperty("extra_award_left_times")) {
        d.extra_award_left_times = m.extra_award_left_times;
      }

      return d;
    };
    /**
     * Converts this RespQuestGainExtraAWard to JSON.
     * @function toJSON
     * @memberof farm.RespQuestGainExtraAWard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespQuestGainExtraAWard.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespQuestGainExtraAWard;
  }();

  farm.ReqQuestGainDailyCircleOne = function () {
    /**
     * Properties of a ReqQuestGainDailyCircleOne.
     * @memberof farm
     * @interface IReqQuestGainDailyCircleOne
     * @property {number|null} [extend] ReqQuestGainDailyCircleOne extend
     */

    /**
     * Constructs a new ReqQuestGainDailyCircleOne.
     * @memberof farm
     * @classdesc Represents a ReqQuestGainDailyCircleOne.
     * @implements IReqQuestGainDailyCircleOne
     * @constructor
     * @param {farm.IReqQuestGainDailyCircleOne=} [p] Properties to set
     */
    function ReqQuestGainDailyCircleOne(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqQuestGainDailyCircleOne extend.
     * @member {number} extend
     * @memberof farm.ReqQuestGainDailyCircleOne
     * @instance
     */


    ReqQuestGainDailyCircleOne.prototype.extend = 0;
    /**
     * Encodes the specified ReqQuestGainDailyCircleOne message. Does not implicitly {@link farm.ReqQuestGainDailyCircleOne.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqQuestGainDailyCircleOne
     * @static
     * @param {farm.IReqQuestGainDailyCircleOne} m ReqQuestGainDailyCircleOne message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqQuestGainDailyCircleOne.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.extend != null && Object.hasOwnProperty.call(m, "extend")) w.uint32(8).int32(m.extend);
      return w;
    };
    /**
     * Decodes a ReqQuestGainDailyCircleOne message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqQuestGainDailyCircleOne
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqQuestGainDailyCircleOne} ReqQuestGainDailyCircleOne
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqQuestGainDailyCircleOne.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqQuestGainDailyCircleOne();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.extend = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqQuestGainDailyCircleOne message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqQuestGainDailyCircleOne
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqQuestGainDailyCircleOne} ReqQuestGainDailyCircleOne
     */


    ReqQuestGainDailyCircleOne.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqQuestGainDailyCircleOne) return d;
      var m = new $root.farm.ReqQuestGainDailyCircleOne();

      if (d.extend != null) {
        m.extend = d.extend | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqQuestGainDailyCircleOne message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqQuestGainDailyCircleOne
     * @static
     * @param {farm.ReqQuestGainDailyCircleOne} m ReqQuestGainDailyCircleOne
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqQuestGainDailyCircleOne.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.extend = 0;
      }

      if (m.extend != null && m.hasOwnProperty("extend")) {
        d.extend = m.extend;
      }

      return d;
    };
    /**
     * Converts this ReqQuestGainDailyCircleOne to JSON.
     * @function toJSON
     * @memberof farm.ReqQuestGainDailyCircleOne
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqQuestGainDailyCircleOne.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqQuestGainDailyCircleOne;
  }();

  farm.RespQuestGainDailyCircleOne = function () {
    /**
     * Properties of a RespQuestGainDailyCircleOne.
     * @memberof farm
     * @interface IRespQuestGainDailyCircleOne
     * @property {number|null} [daily_circle_quest_next_cost] RespQuestGainDailyCircleOne daily_circle_quest_next_cost
     */

    /**
     * Constructs a new RespQuestGainDailyCircleOne.
     * @memberof farm
     * @classdesc Represents a RespQuestGainDailyCircleOne.
     * @implements IRespQuestGainDailyCircleOne
     * @constructor
     * @param {farm.IRespQuestGainDailyCircleOne=} [p] Properties to set
     */
    function RespQuestGainDailyCircleOne(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespQuestGainDailyCircleOne daily_circle_quest_next_cost.
     * @member {number} daily_circle_quest_next_cost
     * @memberof farm.RespQuestGainDailyCircleOne
     * @instance
     */


    RespQuestGainDailyCircleOne.prototype.daily_circle_quest_next_cost = 0;
    /**
     * Encodes the specified RespQuestGainDailyCircleOne message. Does not implicitly {@link farm.RespQuestGainDailyCircleOne.verify|verify} messages.
     * @function encode
     * @memberof farm.RespQuestGainDailyCircleOne
     * @static
     * @param {farm.IRespQuestGainDailyCircleOne} m RespQuestGainDailyCircleOne message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespQuestGainDailyCircleOne.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.daily_circle_quest_next_cost != null && Object.hasOwnProperty.call(m, "daily_circle_quest_next_cost")) w.uint32(8).int32(m.daily_circle_quest_next_cost);
      return w;
    };
    /**
     * Decodes a RespQuestGainDailyCircleOne message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespQuestGainDailyCircleOne
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespQuestGainDailyCircleOne} RespQuestGainDailyCircleOne
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespQuestGainDailyCircleOne.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespQuestGainDailyCircleOne();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.daily_circle_quest_next_cost = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespQuestGainDailyCircleOne message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespQuestGainDailyCircleOne
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespQuestGainDailyCircleOne} RespQuestGainDailyCircleOne
     */


    RespQuestGainDailyCircleOne.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespQuestGainDailyCircleOne) return d;
      var m = new $root.farm.RespQuestGainDailyCircleOne();

      if (d.daily_circle_quest_next_cost != null) {
        m.daily_circle_quest_next_cost = d.daily_circle_quest_next_cost | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespQuestGainDailyCircleOne message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespQuestGainDailyCircleOne
     * @static
     * @param {farm.RespQuestGainDailyCircleOne} m RespQuestGainDailyCircleOne
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespQuestGainDailyCircleOne.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.daily_circle_quest_next_cost = 0;
      }

      if (m.daily_circle_quest_next_cost != null && m.hasOwnProperty("daily_circle_quest_next_cost")) {
        d.daily_circle_quest_next_cost = m.daily_circle_quest_next_cost;
      }

      return d;
    };
    /**
     * Converts this RespQuestGainDailyCircleOne to JSON.
     * @function toJSON
     * @memberof farm.RespQuestGainDailyCircleOne
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespQuestGainDailyCircleOne.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespQuestGainDailyCircleOne;
  }();

  farm.ReqDlgStageDone = function () {
    /**
     * Properties of a ReqDlgStageDone.
     * @memberof farm
     * @interface IReqDlgStageDone
     * @property {number|null} [dlg_stage_id] ReqDlgStageDone dlg_stage_id
     * @property {number|null} [state] ReqDlgStageDone state
     * @property {Object.<string,string>|null} [metadata] ReqDlgStageDone metadata
     * @property {farm.DialogStageType|null} [stageType] ReqDlgStageDone stageType
     */

    /**
     * Constructs a new ReqDlgStageDone.
     * @memberof farm
     * @classdesc Represents a ReqDlgStageDone.
     * @implements IReqDlgStageDone
     * @constructor
     * @param {farm.IReqDlgStageDone=} [p] Properties to set
     */
    function ReqDlgStageDone(p) {
      this.metadata = {};
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqDlgStageDone dlg_stage_id.
     * @member {number} dlg_stage_id
     * @memberof farm.ReqDlgStageDone
     * @instance
     */


    ReqDlgStageDone.prototype.dlg_stage_id = 0;
    /**
     * ReqDlgStageDone state.
     * @member {number} state
     * @memberof farm.ReqDlgStageDone
     * @instance
     */

    ReqDlgStageDone.prototype.state = 0;
    /**
     * ReqDlgStageDone metadata.
     * @member {Object.<string,string>} metadata
     * @memberof farm.ReqDlgStageDone
     * @instance
     */

    ReqDlgStageDone.prototype.metadata = $util.emptyObject;
    /**
     * ReqDlgStageDone stageType.
     * @member {farm.DialogStageType} stageType
     * @memberof farm.ReqDlgStageDone
     * @instance
     */

    ReqDlgStageDone.prototype.stageType = 0;
    /**
     * Encodes the specified ReqDlgStageDone message. Does not implicitly {@link farm.ReqDlgStageDone.verify|verify} messages.
     * @function encode
     * @memberof farm.ReqDlgStageDone
     * @static
     * @param {farm.IReqDlgStageDone} m ReqDlgStageDone message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqDlgStageDone.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.dlg_stage_id != null && Object.hasOwnProperty.call(m, "dlg_stage_id")) w.uint32(8).int32(m.dlg_stage_id);
      if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(16).int32(m.state);

      if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
        for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
          w.uint32(26).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
        }
      }

      if (m.stageType != null && Object.hasOwnProperty.call(m, "stageType")) w.uint32(32).int32(m.stageType);
      return w;
    };
    /**
     * Decodes a ReqDlgStageDone message from the specified reader or buffer.
     * @function decode
     * @memberof farm.ReqDlgStageDone
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.ReqDlgStageDone} ReqDlgStageDone
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqDlgStageDone.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.ReqDlgStageDone(),
          k;

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.dlg_stage_id = r.int32();
            break;

          case 2:
            m.state = r.int32();
            break;

          case 3:
            r.skip().pos++;
            if (m.metadata === $util.emptyObject) m.metadata = {};
            k = r.string();
            r.pos++;
            m.metadata[k] = r.string();
            break;

          case 4:
            m.stageType = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqDlgStageDone message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.ReqDlgStageDone
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.ReqDlgStageDone} ReqDlgStageDone
     */


    ReqDlgStageDone.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.ReqDlgStageDone) return d;
      var m = new $root.farm.ReqDlgStageDone();

      if (d.dlg_stage_id != null) {
        m.dlg_stage_id = d.dlg_stage_id | 0;
      }

      if (d.state != null) {
        m.state = d.state | 0;
      }

      if (d.metadata) {
        if (typeof d.metadata !== "object") throw TypeError(".farm.ReqDlgStageDone.metadata: object expected");
        m.metadata = {};

        for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
          m.metadata[ks[i]] = String(d.metadata[ks[i]]);
        }
      }

      switch (d.stageType) {
        case "NPCDialog":
        case 0:
          m.stageType = 0;
          break;

        case "PhoneDialog":
        case 1:
          m.stageType = 1;
          break;

        case "QuestBoardDialog":
        case 2:
          m.stageType = 2;
          break;
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqDlgStageDone message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.ReqDlgStageDone
     * @static
     * @param {farm.ReqDlgStageDone} m ReqDlgStageDone
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqDlgStageDone.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.objects || o.defaults) {
        d.metadata = {};
      }

      if (o.defaults) {
        d.dlg_stage_id = 0;
        d.state = 0;
        d.stageType = o.enums === String ? "NPCDialog" : 0;
      }

      if (m.dlg_stage_id != null && m.hasOwnProperty("dlg_stage_id")) {
        d.dlg_stage_id = m.dlg_stage_id;
      }

      if (m.state != null && m.hasOwnProperty("state")) {
        d.state = m.state;
      }

      var ks2;

      if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
        d.metadata = {};

        for (var j = 0; j < ks2.length; ++j) {
          d.metadata[ks2[j]] = m.metadata[ks2[j]];
        }
      }

      if (m.stageType != null && m.hasOwnProperty("stageType")) {
        d.stageType = o.enums === String ? $root.farm.DialogStageType[m.stageType] : m.stageType;
      }

      return d;
    };
    /**
     * Converts this ReqDlgStageDone to JSON.
     * @function toJSON
     * @memberof farm.ReqDlgStageDone
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqDlgStageDone.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqDlgStageDone;
  }();

  farm.RespDlgStageDone = function () {
    /**
     * Properties of a RespDlgStageDone.
     * @memberof farm
     * @interface IRespDlgStageDone
     * @property {number|null} [dlg_stage_id] RespDlgStageDone dlg_stage_id
     */

    /**
     * Constructs a new RespDlgStageDone.
     * @memberof farm
     * @classdesc Represents a RespDlgStageDone.
     * @implements IRespDlgStageDone
     * @constructor
     * @param {farm.IRespDlgStageDone=} [p] Properties to set
     */
    function RespDlgStageDone(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespDlgStageDone dlg_stage_id.
     * @member {number} dlg_stage_id
     * @memberof farm.RespDlgStageDone
     * @instance
     */


    RespDlgStageDone.prototype.dlg_stage_id = 0;
    /**
     * Encodes the specified RespDlgStageDone message. Does not implicitly {@link farm.RespDlgStageDone.verify|verify} messages.
     * @function encode
     * @memberof farm.RespDlgStageDone
     * @static
     * @param {farm.IRespDlgStageDone} m RespDlgStageDone message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespDlgStageDone.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.dlg_stage_id != null && Object.hasOwnProperty.call(m, "dlg_stage_id")) w.uint32(8).int32(m.dlg_stage_id);
      return w;
    };
    /**
     * Decodes a RespDlgStageDone message from the specified reader or buffer.
     * @function decode
     * @memberof farm.RespDlgStageDone
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {farm.RespDlgStageDone} RespDlgStageDone
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespDlgStageDone.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.farm.RespDlgStageDone();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.dlg_stage_id = r.int32();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespDlgStageDone message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof farm.RespDlgStageDone
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {farm.RespDlgStageDone} RespDlgStageDone
     */


    RespDlgStageDone.fromObject = function fromObject(d) {
      if (d instanceof $root.farm.RespDlgStageDone) return d;
      var m = new $root.farm.RespDlgStageDone();

      if (d.dlg_stage_id != null) {
        m.dlg_stage_id = d.dlg_stage_id | 0;
      }

      return m;
    };
    /**
     * Creates a plain object from a RespDlgStageDone message. Also converts values to other types if specified.
     * @function toObject
     * @memberof farm.RespDlgStageDone
     * @static
     * @param {farm.RespDlgStageDone} m RespDlgStageDone
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespDlgStageDone.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.dlg_stage_id = 0;
      }

      if (m.dlg_stage_id != null && m.hasOwnProperty("dlg_stage_id")) {
        d.dlg_stage_id = m.dlg_stage_id;
      }

      return d;
    };
    /**
     * Converts this RespDlgStageDone to JSON.
     * @function toJSON
     * @memberof farm.RespDlgStageDone
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespDlgStageDone.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespDlgStageDone;
  }();

  return farm;
}();

$root.message = function () {
  /**
   * Namespace message.
   * @exports message
   * @namespace
   */
  var message = {};

  message.EventBasic = function () {
    /**
     * Properties of an EventBasic.
     * @memberof message
     * @interface IEventBasic
     * @property {Object.<string,string>|null} [metadata] EventBasic metadata
     */

    /**
     * Constructs a new EventBasic.
     * @memberof message
     * @classdesc Represents an EventBasic.
     * @implements IEventBasic
     * @constructor
     * @param {message.IEventBasic=} [p] Properties to set
     */
    function EventBasic(p) {
      this.metadata = {};
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * EventBasic metadata.
     * @member {Object.<string,string>} metadata
     * @memberof message.EventBasic
     * @instance
     */


    EventBasic.prototype.metadata = $util.emptyObject;
    /**
     * Encodes the specified EventBasic message. Does not implicitly {@link message.EventBasic.verify|verify} messages.
     * @function encode
     * @memberof message.EventBasic
     * @static
     * @param {message.IEventBasic} m EventBasic message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    EventBasic.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.metadata != null && Object.hasOwnProperty.call(m, "metadata")) {
        for (var ks = Object.keys(m.metadata), i = 0; i < ks.length; ++i) {
          w.uint32(10).fork().uint32(10).string(ks[i]).uint32(18).string(m.metadata[ks[i]]).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes an EventBasic message from the specified reader or buffer.
     * @function decode
     * @memberof message.EventBasic
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.EventBasic} EventBasic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    EventBasic.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.EventBasic(),
          k;

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            r.skip().pos++;
            if (m.metadata === $util.emptyObject) m.metadata = {};
            k = r.string();
            r.pos++;
            m.metadata[k] = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates an EventBasic message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.EventBasic
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.EventBasic} EventBasic
     */


    EventBasic.fromObject = function fromObject(d) {
      if (d instanceof $root.message.EventBasic) return d;
      var m = new $root.message.EventBasic();

      if (d.metadata) {
        if (typeof d.metadata !== "object") throw TypeError(".message.EventBasic.metadata: object expected");
        m.metadata = {};

        for (var ks = Object.keys(d.metadata), i = 0; i < ks.length; ++i) {
          m.metadata[ks[i]] = String(d.metadata[ks[i]]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from an EventBasic message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.EventBasic
     * @static
     * @param {message.EventBasic} m EventBasic
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    EventBasic.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.objects || o.defaults) {
        d.metadata = {};
      }

      var ks2;

      if (m.metadata && (ks2 = Object.keys(m.metadata)).length) {
        d.metadata = {};

        for (var j = 0; j < ks2.length; ++j) {
          d.metadata[ks2[j]] = m.metadata[ks2[j]];
        }
      }

      return d;
    };
    /**
     * Converts this EventBasic to JSON.
     * @function toJSON
     * @memberof message.EventBasic
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    EventBasic.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return EventBasic;
  }();

  message.RequestBasic = function () {
    /**
     * Properties of a RequestBasic.
     * @memberof message
     * @interface IRequestBasic
     * @property {Object.<string,string>|null} [params] RequestBasic params
     */

    /**
     * Constructs a new RequestBasic.
     * @memberof message
     * @classdesc Represents a RequestBasic.
     * @implements IRequestBasic
     * @constructor
     * @param {message.IRequestBasic=} [p] Properties to set
     */
    function RequestBasic(p) {
      this.params = {};
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RequestBasic params.
     * @member {Object.<string,string>} params
     * @memberof message.RequestBasic
     * @instance
     */


    RequestBasic.prototype.params = $util.emptyObject;
    /**
     * Encodes the specified RequestBasic message. Does not implicitly {@link message.RequestBasic.verify|verify} messages.
     * @function encode
     * @memberof message.RequestBasic
     * @static
     * @param {message.IRequestBasic} m RequestBasic message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RequestBasic.encode = function encode(m, w) {
      if (!w) w = $Writer.create();

      if (m.params != null && Object.hasOwnProperty.call(m, "params")) {
        for (var ks = Object.keys(m.params), i = 0; i < ks.length; ++i) {
          w.uint32(10).fork().uint32(10).string(ks[i]).uint32(18).string(m.params[ks[i]]).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RequestBasic message from the specified reader or buffer.
     * @function decode
     * @memberof message.RequestBasic
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.RequestBasic} RequestBasic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RequestBasic.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.RequestBasic(),
          k;

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            r.skip().pos++;
            if (m.params === $util.emptyObject) m.params = {};
            k = r.string();
            r.pos++;
            m.params[k] = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RequestBasic message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.RequestBasic
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.RequestBasic} RequestBasic
     */


    RequestBasic.fromObject = function fromObject(d) {
      if (d instanceof $root.message.RequestBasic) return d;
      var m = new $root.message.RequestBasic();

      if (d.params) {
        if (typeof d.params !== "object") throw TypeError(".message.RequestBasic.params: object expected");
        m.params = {};

        for (var ks = Object.keys(d.params), i = 0; i < ks.length; ++i) {
          m.params[ks[i]] = String(d.params[ks[i]]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RequestBasic message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.RequestBasic
     * @static
     * @param {message.RequestBasic} m RequestBasic
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RequestBasic.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.objects || o.defaults) {
        d.params = {};
      }

      var ks2;

      if (m.params && (ks2 = Object.keys(m.params)).length) {
        d.params = {};

        for (var j = 0; j < ks2.length; ++j) {
          d.params[ks2[j]] = m.params[ks2[j]];
        }
      }

      return d;
    };
    /**
     * Converts this RequestBasic to JSON.
     * @function toJSON
     * @memberof message.RequestBasic
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RequestBasic.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RequestBasic;
  }();

  message.Message = function () {
    /**
     * Properties of a Message.
     * @memberof message
     * @interface IMessage
     * @property {number|Long|null} [id] Message id
     * @property {message.Message.Type|null} [type] Message type
     * @property {string|null} [version] Message version
     * @property {string|null} [jwt_token] Message jwt_token
     * @property {google.protobuf.IAny|null} [dat] Message dat
     * @property {google.protobuf.ITimestamp|null} [timestamp] Message timestamp
     */

    /**
     * Constructs a new Message.
     * @memberof message
     * @classdesc Represents a Message.
     * @implements IMessage
     * @constructor
     * @param {message.IMessage=} [p] Properties to set
     */
    function Message(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Message id.
     * @member {number|Long} id
     * @memberof message.Message
     * @instance
     */


    Message.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
    /**
     * Message type.
     * @member {message.Message.Type} type
     * @memberof message.Message
     * @instance
     */

    Message.prototype.type = 0;
    /**
     * Message version.
     * @member {string} version
     * @memberof message.Message
     * @instance
     */

    Message.prototype.version = "";
    /**
     * Message jwt_token.
     * @member {string} jwt_token
     * @memberof message.Message
     * @instance
     */

    Message.prototype.jwt_token = "";
    /**
     * Message dat.
     * @member {google.protobuf.IAny|null|undefined} dat
     * @memberof message.Message
     * @instance
     */

    Message.prototype.dat = null;
    /**
     * Message timestamp.
     * @member {google.protobuf.ITimestamp|null|undefined} timestamp
     * @memberof message.Message
     * @instance
     */

    Message.prototype.timestamp = null;
    /**
     * Encodes the specified Message message. Does not implicitly {@link message.Message.verify|verify} messages.
     * @function encode
     * @memberof message.Message
     * @static
     * @param {message.IMessage} m Message message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Message.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
      if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(16).int32(m.type);
      if (m.version != null && Object.hasOwnProperty.call(m, "version")) w.uint32(26).string(m.version);
      if (m.jwt_token != null && Object.hasOwnProperty.call(m, "jwt_token")) w.uint32(34).string(m.jwt_token);
      if (m.dat != null && Object.hasOwnProperty.call(m, "dat")) $root.google.protobuf.Any.encode(m.dat, w.uint32(42).fork()).ldelim();
      if (m.timestamp != null && Object.hasOwnProperty.call(m, "timestamp")) $root.google.protobuf.Timestamp.encode(m.timestamp, w.uint32(50).fork()).ldelim();
      return w;
    };
    /**
     * Decodes a Message message from the specified reader or buffer.
     * @function decode
     * @memberof message.Message
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.Message} Message
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Message.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.Message();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.id = r.int64();
            break;

          case 2:
            m.type = r.int32();
            break;

          case 3:
            m.version = r.string();
            break;

          case 4:
            m.jwt_token = r.string();
            break;

          case 5:
            m.dat = $root.google.protobuf.Any.decode(r, r.uint32());
            break;

          case 6:
            m.timestamp = $root.google.protobuf.Timestamp.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a Message message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.Message
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.Message} Message
     */


    Message.fromObject = function fromObject(d) {
      if (d instanceof $root.message.Message) return d;
      var m = new $root.message.Message();

      if (d.id != null) {
        if ($util.Long) (m.id = $util.Long.fromValue(d.id)).unsigned = false;else if (typeof d.id === "string") m.id = parseInt(d.id, 10);else if (typeof d.id === "number") m.id = d.id;else if (typeof d.id === "object") m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber();
      }

      switch (d.type) {
        case "EVENT_BASIC":
        case 0:
          m.type = 0;
          break;

        case "NOTIFY_BASIC":
        case 100000:
          m.type = 100000;
          break;

        case "STREAM_BASIC":
        case 200000:
          m.type = 200000;
          break;
      }

      if (d.version != null) {
        m.version = String(d.version);
      }

      if (d.jwt_token != null) {
        m.jwt_token = String(d.jwt_token);
      }

      if (d.dat != null) {
        if (typeof d.dat !== "object") throw TypeError(".message.Message.dat: object expected");
        m.dat = $root.google.protobuf.Any.fromObject(d.dat);
      }

      if (d.timestamp != null) {
        if (typeof d.timestamp !== "object") throw TypeError(".message.Message.timestamp: object expected");
        m.timestamp = $root.google.protobuf.Timestamp.fromObject(d.timestamp);
      }

      return m;
    };
    /**
     * Creates a plain object from a Message message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.Message
     * @static
     * @param {message.Message} m Message
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Message.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        if ($util.Long) {
          var n = new $util.Long(0, 0, false);
          d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
        } else d.id = o.longs === String ? "0" : 0;

        d.type = o.enums === String ? "EVENT_BASIC" : 0;
        d.version = "";
        d.jwt_token = "";
        d.dat = null;
        d.timestamp = null;
      }

      if (m.id != null && m.hasOwnProperty("id")) {
        if (typeof m.id === "number") d.id = o.longs === String ? String(m.id) : m.id;else d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber() : m.id;
      }

      if (m.type != null && m.hasOwnProperty("type")) {
        d.type = o.enums === String ? $root.message.Message.Type[m.type] : m.type;
      }

      if (m.version != null && m.hasOwnProperty("version")) {
        d.version = m.version;
      }

      if (m.jwt_token != null && m.hasOwnProperty("jwt_token")) {
        d.jwt_token = m.jwt_token;
      }

      if (m.dat != null && m.hasOwnProperty("dat")) {
        d.dat = $root.google.protobuf.Any.toObject(m.dat, o);
      }

      if (m.timestamp != null && m.hasOwnProperty("timestamp")) {
        d.timestamp = $root.google.protobuf.Timestamp.toObject(m.timestamp, o);
      }

      return d;
    };
    /**
     * Converts this Message to JSON.
     * @function toJSON
     * @memberof message.Message
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Message.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };
    /**
     * Type enum.
     * @name message.Message.Type
     * @enum {number}
     * @property {number} EVENT_BASIC=0 EVENT_BASIC value
     * @property {number} NOTIFY_BASIC=100000 NOTIFY_BASIC value
     * @property {number} STREAM_BASIC=200000 STREAM_BASIC value
     */


    Message.Type = function () {
      var valuesById = {},
          values = Object.create(valuesById);
      values[valuesById[0] = "EVENT_BASIC"] = 0;
      values[valuesById[100000] = "NOTIFY_BASIC"] = 100000;
      values[valuesById[200000] = "STREAM_BASIC"] = 200000;
      return values;
    }();

    return Message;
  }();

  message.Request = function () {
    /**
     * Properties of a Request.
     * @memberof message
     * @interface IRequest
     * @property {string|null} [version] Request version
     * @property {string|null} [jwt_token] Request jwt_token
     * @property {google.protobuf.IAny|null} [dat] Request dat
     */

    /**
     * Constructs a new Request.
     * @memberof message
     * @classdesc Represents a Request.
     * @implements IRequest
     * @constructor
     * @param {message.IRequest=} [p] Properties to set
     */
    function Request(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Request version.
     * @member {string} version
     * @memberof message.Request
     * @instance
     */


    Request.prototype.version = "";
    /**
     * Request jwt_token.
     * @member {string} jwt_token
     * @memberof message.Request
     * @instance
     */

    Request.prototype.jwt_token = "";
    /**
     * Request dat.
     * @member {google.protobuf.IAny|null|undefined} dat
     * @memberof message.Request
     * @instance
     */

    Request.prototype.dat = null;
    /**
     * Encodes the specified Request message. Does not implicitly {@link message.Request.verify|verify} messages.
     * @function encode
     * @memberof message.Request
     * @static
     * @param {message.IRequest} m Request message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Request.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.version != null && Object.hasOwnProperty.call(m, "version")) w.uint32(10).string(m.version);
      if (m.jwt_token != null && Object.hasOwnProperty.call(m, "jwt_token")) w.uint32(18).string(m.jwt_token);
      if (m.dat != null && Object.hasOwnProperty.call(m, "dat")) $root.google.protobuf.Any.encode(m.dat, w.uint32(26).fork()).ldelim();
      return w;
    };
    /**
     * Decodes a Request message from the specified reader or buffer.
     * @function decode
     * @memberof message.Request
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.Request} Request
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Request.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.Request();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.version = r.string();
            break;

          case 2:
            m.jwt_token = r.string();
            break;

          case 3:
            m.dat = $root.google.protobuf.Any.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a Request message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.Request
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.Request} Request
     */


    Request.fromObject = function fromObject(d) {
      if (d instanceof $root.message.Request) return d;
      var m = new $root.message.Request();

      if (d.version != null) {
        m.version = String(d.version);
      }

      if (d.jwt_token != null) {
        m.jwt_token = String(d.jwt_token);
      }

      if (d.dat != null) {
        if (typeof d.dat !== "object") throw TypeError(".message.Request.dat: object expected");
        m.dat = $root.google.protobuf.Any.fromObject(d.dat);
      }

      return m;
    };
    /**
     * Creates a plain object from a Request message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.Request
     * @static
     * @param {message.Request} m Request
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Request.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.version = "";
        d.jwt_token = "";
        d.dat = null;
      }

      if (m.version != null && m.hasOwnProperty("version")) {
        d.version = m.version;
      }

      if (m.jwt_token != null && m.hasOwnProperty("jwt_token")) {
        d.jwt_token = m.jwt_token;
      }

      if (m.dat != null && m.hasOwnProperty("dat")) {
        d.dat = $root.google.protobuf.Any.toObject(m.dat, o);
      }

      return d;
    };
    /**
     * Converts this Request to JSON.
     * @function toJSON
     * @memberof message.Request
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Request.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Request;
  }();

  message.Response = function () {
    /**
     * Properties of a Response.
     * @memberof message
     * @interface IResponse
     * @property {number|null} [err] Response err
     * @property {string|null} [message] Response message
     * @property {string|null} [trace_id] Response trace_id
     * @property {google.protobuf.IAny|null} [dat] Response dat
     */

    /**
     * Constructs a new Response.
     * @memberof message
     * @classdesc Represents a Response.
     * @implements IResponse
     * @constructor
     * @param {message.IResponse=} [p] Properties to set
     */
    function Response(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Response err.
     * @member {number} err
     * @memberof message.Response
     * @instance
     */


    Response.prototype.err = 0;
    /**
     * Response message.
     * @member {string} message
     * @memberof message.Response
     * @instance
     */

    Response.prototype.message = "";
    /**
     * Response trace_id.
     * @member {string} trace_id
     * @memberof message.Response
     * @instance
     */

    Response.prototype.trace_id = "";
    /**
     * Response dat.
     * @member {google.protobuf.IAny|null|undefined} dat
     * @memberof message.Response
     * @instance
     */

    Response.prototype.dat = null;
    /**
     * Encodes the specified Response message. Does not implicitly {@link message.Response.verify|verify} messages.
     * @function encode
     * @memberof message.Response
     * @static
     * @param {message.IResponse} m Response message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    Response.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.err != null && Object.hasOwnProperty.call(m, "err")) w.uint32(8).int32(m.err);
      if (m.message != null && Object.hasOwnProperty.call(m, "message")) w.uint32(18).string(m.message);
      if (m.trace_id != null && Object.hasOwnProperty.call(m, "trace_id")) w.uint32(26).string(m.trace_id);
      if (m.dat != null && Object.hasOwnProperty.call(m, "dat")) $root.google.protobuf.Any.encode(m.dat, w.uint32(34).fork()).ldelim();
      return w;
    };
    /**
     * Decodes a Response message from the specified reader or buffer.
     * @function decode
     * @memberof message.Response
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.Response} Response
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    Response.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.Response();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.err = r.int32();
            break;

          case 2:
            m.message = r.string();
            break;

          case 3:
            m.trace_id = r.string();
            break;

          case 4:
            m.dat = $root.google.protobuf.Any.decode(r, r.uint32());
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a Response message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.Response
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.Response} Response
     */


    Response.fromObject = function fromObject(d) {
      if (d instanceof $root.message.Response) return d;
      var m = new $root.message.Response();

      if (d.err != null) {
        m.err = d.err | 0;
      }

      if (d.message != null) {
        m.message = String(d.message);
      }

      if (d.trace_id != null) {
        m.trace_id = String(d.trace_id);
      }

      if (d.dat != null) {
        if (typeof d.dat !== "object") throw TypeError(".message.Response.dat: object expected");
        m.dat = $root.google.protobuf.Any.fromObject(d.dat);
      }

      return m;
    };
    /**
     * Creates a plain object from a Response message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.Response
     * @static
     * @param {message.Response} m Response
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    Response.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.err = 0;
        d.message = "";
        d.trace_id = "";
        d.dat = null;
      }

      if (m.err != null && m.hasOwnProperty("err")) {
        d.err = m.err;
      }

      if (m.message != null && m.hasOwnProperty("message")) {
        d.message = m.message;
      }

      if (m.trace_id != null && m.hasOwnProperty("trace_id")) {
        d.trace_id = m.trace_id;
      }

      if (m.dat != null && m.hasOwnProperty("dat")) {
        d.dat = $root.google.protobuf.Any.toObject(m.dat, o);
      }

      return d;
    };
    /**
     * Converts this Response to JSON.
     * @function toJSON
     * @memberof message.Response
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    Response.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return Response;
  }();

  message.NotifyBasic = function () {
    /**
     * Properties of a NotifyBasic.
     * @memberof message
     * @interface INotifyBasic
     */

    /**
     * Constructs a new NotifyBasic.
     * @memberof message
     * @classdesc Represents a NotifyBasic.
     * @implements INotifyBasic
     * @constructor
     * @param {message.INotifyBasic=} [p] Properties to set
     */
    function NotifyBasic(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * Encodes the specified NotifyBasic message. Does not implicitly {@link message.NotifyBasic.verify|verify} messages.
     * @function encode
     * @memberof message.NotifyBasic
     * @static
     * @param {message.INotifyBasic} m NotifyBasic message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */


    NotifyBasic.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      return w;
    };
    /**
     * Decodes a NotifyBasic message from the specified reader or buffer.
     * @function decode
     * @memberof message.NotifyBasic
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.NotifyBasic} NotifyBasic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    NotifyBasic.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.NotifyBasic();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a NotifyBasic message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.NotifyBasic
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.NotifyBasic} NotifyBasic
     */


    NotifyBasic.fromObject = function fromObject(d) {
      if (d instanceof $root.message.NotifyBasic) return d;
      return new $root.message.NotifyBasic();
    };
    /**
     * Creates a plain object from a NotifyBasic message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.NotifyBasic
     * @static
     * @param {message.NotifyBasic} m NotifyBasic
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    NotifyBasic.toObject = function toObject() {
      return {};
    };
    /**
     * Converts this NotifyBasic to JSON.
     * @function toJSON
     * @memberof message.NotifyBasic
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    NotifyBasic.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return NotifyBasic;
  }();

  message.ReqCustomTest = function () {
    /**
     * Properties of a ReqCustomTest.
     * @memberof message
     * @interface IReqCustomTest
     * @property {number|null} [intValue] ReqCustomTest intValue
     * @property {string|null} [strValue] ReqCustomTest strValue
     * @property {Array.<boolean>|null} [boolValue] ReqCustomTest boolValue
     * @property {Object.<string,string>|null} [mapValue] ReqCustomTest mapValue
     */

    /**
     * Constructs a new ReqCustomTest.
     * @memberof message
     * @classdesc Represents a ReqCustomTest.
     * @implements IReqCustomTest
     * @constructor
     * @param {message.IReqCustomTest=} [p] Properties to set
     */
    function ReqCustomTest(p) {
      this.boolValue = [];
      this.mapValue = {};
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * ReqCustomTest intValue.
     * @member {number} intValue
     * @memberof message.ReqCustomTest
     * @instance
     */


    ReqCustomTest.prototype.intValue = 0;
    /**
     * ReqCustomTest strValue.
     * @member {string} strValue
     * @memberof message.ReqCustomTest
     * @instance
     */

    ReqCustomTest.prototype.strValue = "";
    /**
     * ReqCustomTest boolValue.
     * @member {Array.<boolean>} boolValue
     * @memberof message.ReqCustomTest
     * @instance
     */

    ReqCustomTest.prototype.boolValue = $util.emptyArray;
    /**
     * ReqCustomTest mapValue.
     * @member {Object.<string,string>} mapValue
     * @memberof message.ReqCustomTest
     * @instance
     */

    ReqCustomTest.prototype.mapValue = $util.emptyObject;
    /**
     * Encodes the specified ReqCustomTest message. Does not implicitly {@link message.ReqCustomTest.verify|verify} messages.
     * @function encode
     * @memberof message.ReqCustomTest
     * @static
     * @param {message.IReqCustomTest} m ReqCustomTest message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    ReqCustomTest.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.intValue != null && Object.hasOwnProperty.call(m, "intValue")) w.uint32(8).int32(m.intValue);
      if (m.strValue != null && Object.hasOwnProperty.call(m, "strValue")) w.uint32(18).string(m.strValue);

      if (m.boolValue != null && m.boolValue.length) {
        w.uint32(26).fork();

        for (var i = 0; i < m.boolValue.length; ++i) {
          w.bool(m.boolValue[i]);
        }

        w.ldelim();
      }

      if (m.mapValue != null && Object.hasOwnProperty.call(m, "mapValue")) {
        for (var ks = Object.keys(m.mapValue), i = 0; i < ks.length; ++i) {
          w.uint32(34).fork().uint32(8).int32(ks[i]).uint32(18).string(m.mapValue[ks[i]]).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a ReqCustomTest message from the specified reader or buffer.
     * @function decode
     * @memberof message.ReqCustomTest
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.ReqCustomTest} ReqCustomTest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    ReqCustomTest.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.ReqCustomTest(),
          k;

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.intValue = r.int32();
            break;

          case 2:
            m.strValue = r.string();
            break;

          case 3:
            if (!(m.boolValue && m.boolValue.length)) m.boolValue = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.boolValue.push(r.bool());
              }
            } else m.boolValue.push(r.bool());

            break;

          case 4:
            r.skip().pos++;
            if (m.mapValue === $util.emptyObject) m.mapValue = {};
            k = r.int32();
            r.pos++;
            m.mapValue[k] = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a ReqCustomTest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.ReqCustomTest
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.ReqCustomTest} ReqCustomTest
     */


    ReqCustomTest.fromObject = function fromObject(d) {
      if (d instanceof $root.message.ReqCustomTest) return d;
      var m = new $root.message.ReqCustomTest();

      if (d.intValue != null) {
        m.intValue = d.intValue | 0;
      }

      if (d.strValue != null) {
        m.strValue = String(d.strValue);
      }

      if (d.boolValue) {
        if (!Array.isArray(d.boolValue)) throw TypeError(".message.ReqCustomTest.boolValue: array expected");
        m.boolValue = [];

        for (var i = 0; i < d.boolValue.length; ++i) {
          m.boolValue[i] = Boolean(d.boolValue[i]);
        }
      }

      if (d.mapValue) {
        if (typeof d.mapValue !== "object") throw TypeError(".message.ReqCustomTest.mapValue: object expected");
        m.mapValue = {};

        for (var ks = Object.keys(d.mapValue), i = 0; i < ks.length; ++i) {
          m.mapValue[ks[i]] = String(d.mapValue[ks[i]]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a ReqCustomTest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.ReqCustomTest
     * @static
     * @param {message.ReqCustomTest} m ReqCustomTest
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    ReqCustomTest.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.boolValue = [];
      }

      if (o.objects || o.defaults) {
        d.mapValue = {};
      }

      if (o.defaults) {
        d.intValue = 0;
        d.strValue = "";
      }

      if (m.intValue != null && m.hasOwnProperty("intValue")) {
        d.intValue = m.intValue;
      }

      if (m.strValue != null && m.hasOwnProperty("strValue")) {
        d.strValue = m.strValue;
      }

      if (m.boolValue && m.boolValue.length) {
        d.boolValue = [];

        for (var j = 0; j < m.boolValue.length; ++j) {
          d.boolValue[j] = m.boolValue[j];
        }
      }

      var ks2;

      if (m.mapValue && (ks2 = Object.keys(m.mapValue)).length) {
        d.mapValue = {};

        for (var j = 0; j < ks2.length; ++j) {
          d.mapValue[ks2[j]] = m.mapValue[ks2[j]];
        }
      }

      return d;
    };
    /**
     * Converts this ReqCustomTest to JSON.
     * @function toJSON
     * @memberof message.ReqCustomTest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    ReqCustomTest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return ReqCustomTest;
  }();

  message.RespCustomTest = function () {
    /**
     * Properties of a RespCustomTest.
     * @memberof message
     * @interface IRespCustomTest
     * @property {number|null} [intValue] RespCustomTest intValue
     * @property {string|null} [strValue] RespCustomTest strValue
     * @property {Array.<boolean>|null} [boolValue] RespCustomTest boolValue
     * @property {Object.<string,string>|null} [mapValue] RespCustomTest mapValue
     */

    /**
     * Constructs a new RespCustomTest.
     * @memberof message
     * @classdesc Represents a RespCustomTest.
     * @implements IRespCustomTest
     * @constructor
     * @param {message.IRespCustomTest=} [p] Properties to set
     */
    function RespCustomTest(p) {
      this.boolValue = [];
      this.mapValue = {};
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * RespCustomTest intValue.
     * @member {number} intValue
     * @memberof message.RespCustomTest
     * @instance
     */


    RespCustomTest.prototype.intValue = 0;
    /**
     * RespCustomTest strValue.
     * @member {string} strValue
     * @memberof message.RespCustomTest
     * @instance
     */

    RespCustomTest.prototype.strValue = "";
    /**
     * RespCustomTest boolValue.
     * @member {Array.<boolean>} boolValue
     * @memberof message.RespCustomTest
     * @instance
     */

    RespCustomTest.prototype.boolValue = $util.emptyArray;
    /**
     * RespCustomTest mapValue.
     * @member {Object.<string,string>} mapValue
     * @memberof message.RespCustomTest
     * @instance
     */

    RespCustomTest.prototype.mapValue = $util.emptyObject;
    /**
     * Encodes the specified RespCustomTest message. Does not implicitly {@link message.RespCustomTest.verify|verify} messages.
     * @function encode
     * @memberof message.RespCustomTest
     * @static
     * @param {message.IRespCustomTest} m RespCustomTest message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    RespCustomTest.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.intValue != null && Object.hasOwnProperty.call(m, "intValue")) w.uint32(8).int32(m.intValue);
      if (m.strValue != null && Object.hasOwnProperty.call(m, "strValue")) w.uint32(18).string(m.strValue);

      if (m.boolValue != null && m.boolValue.length) {
        w.uint32(26).fork();

        for (var i = 0; i < m.boolValue.length; ++i) {
          w.bool(m.boolValue[i]);
        }

        w.ldelim();
      }

      if (m.mapValue != null && Object.hasOwnProperty.call(m, "mapValue")) {
        for (var ks = Object.keys(m.mapValue), i = 0; i < ks.length; ++i) {
          w.uint32(34).fork().uint32(8).int32(ks[i]).uint32(18).string(m.mapValue[ks[i]]).ldelim();
        }
      }

      return w;
    };
    /**
     * Decodes a RespCustomTest message from the specified reader or buffer.
     * @function decode
     * @memberof message.RespCustomTest
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.RespCustomTest} RespCustomTest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    RespCustomTest.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.RespCustomTest(),
          k;

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.intValue = r.int32();
            break;

          case 2:
            m.strValue = r.string();
            break;

          case 3:
            if (!(m.boolValue && m.boolValue.length)) m.boolValue = [];

            if ((t & 7) === 2) {
              var c2 = r.uint32() + r.pos;

              while (r.pos < c2) {
                m.boolValue.push(r.bool());
              }
            } else m.boolValue.push(r.bool());

            break;

          case 4:
            r.skip().pos++;
            if (m.mapValue === $util.emptyObject) m.mapValue = {};
            k = r.int32();
            r.pos++;
            m.mapValue[k] = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a RespCustomTest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.RespCustomTest
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.RespCustomTest} RespCustomTest
     */


    RespCustomTest.fromObject = function fromObject(d) {
      if (d instanceof $root.message.RespCustomTest) return d;
      var m = new $root.message.RespCustomTest();

      if (d.intValue != null) {
        m.intValue = d.intValue | 0;
      }

      if (d.strValue != null) {
        m.strValue = String(d.strValue);
      }

      if (d.boolValue) {
        if (!Array.isArray(d.boolValue)) throw TypeError(".message.RespCustomTest.boolValue: array expected");
        m.boolValue = [];

        for (var i = 0; i < d.boolValue.length; ++i) {
          m.boolValue[i] = Boolean(d.boolValue[i]);
        }
      }

      if (d.mapValue) {
        if (typeof d.mapValue !== "object") throw TypeError(".message.RespCustomTest.mapValue: object expected");
        m.mapValue = {};

        for (var ks = Object.keys(d.mapValue), i = 0; i < ks.length; ++i) {
          m.mapValue[ks[i]] = String(d.mapValue[ks[i]]);
        }
      }

      return m;
    };
    /**
     * Creates a plain object from a RespCustomTest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.RespCustomTest
     * @static
     * @param {message.RespCustomTest} m RespCustomTest
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    RespCustomTest.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.arrays || o.defaults) {
        d.boolValue = [];
      }

      if (o.objects || o.defaults) {
        d.mapValue = {};
      }

      if (o.defaults) {
        d.intValue = 0;
        d.strValue = "";
      }

      if (m.intValue != null && m.hasOwnProperty("intValue")) {
        d.intValue = m.intValue;
      }

      if (m.strValue != null && m.hasOwnProperty("strValue")) {
        d.strValue = m.strValue;
      }

      if (m.boolValue && m.boolValue.length) {
        d.boolValue = [];

        for (var j = 0; j < m.boolValue.length; ++j) {
          d.boolValue[j] = m.boolValue[j];
        }
      }

      var ks2;

      if (m.mapValue && (ks2 = Object.keys(m.mapValue)).length) {
        d.mapValue = {};

        for (var j = 0; j < ks2.length; ++j) {
          d.mapValue[ks2[j]] = m.mapValue[ks2[j]];
        }
      }

      return d;
    };
    /**
     * Converts this RespCustomTest to JSON.
     * @function toJSON
     * @memberof message.RespCustomTest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    RespCustomTest.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return RespCustomTest;
  }();

  message.SimpleStruct = function () {
    /**
     * Properties of a SimpleStruct.
     * @memberof message
     * @interface ISimpleStruct
     * @property {number|null} [intValue] SimpleStruct intValue
     * @property {boolean|null} [boolValue] SimpleStruct boolValue
     * @property {string|null} [strValue] SimpleStruct strValue
     */

    /**
     * Constructs a new SimpleStruct.
     * @memberof message
     * @classdesc Represents a SimpleStruct.
     * @implements ISimpleStruct
     * @constructor
     * @param {message.ISimpleStruct=} [p] Properties to set
     */
    function SimpleStruct(p) {
      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
        if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
      }
    }
    /**
     * SimpleStruct intValue.
     * @member {number} intValue
     * @memberof message.SimpleStruct
     * @instance
     */


    SimpleStruct.prototype.intValue = 0;
    /**
     * SimpleStruct boolValue.
     * @member {boolean} boolValue
     * @memberof message.SimpleStruct
     * @instance
     */

    SimpleStruct.prototype.boolValue = false;
    /**
     * SimpleStruct strValue.
     * @member {string} strValue
     * @memberof message.SimpleStruct
     * @instance
     */

    SimpleStruct.prototype.strValue = "";
    /**
     * Encodes the specified SimpleStruct message. Does not implicitly {@link message.SimpleStruct.verify|verify} messages.
     * @function encode
     * @memberof message.SimpleStruct
     * @static
     * @param {message.ISimpleStruct} m SimpleStruct message or plain object to encode
     * @param {$protobuf.Writer} [w] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */

    SimpleStruct.encode = function encode(m, w) {
      if (!w) w = $Writer.create();
      if (m.intValue != null && Object.hasOwnProperty.call(m, "intValue")) w.uint32(8).int32(m.intValue);
      if (m.boolValue != null && Object.hasOwnProperty.call(m, "boolValue")) w.uint32(16).bool(m.boolValue);
      if (m.strValue != null && Object.hasOwnProperty.call(m, "strValue")) w.uint32(26).string(m.strValue);
      return w;
    };
    /**
     * Decodes a SimpleStruct message from the specified reader or buffer.
     * @function decode
     * @memberof message.SimpleStruct
     * @static
     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
     * @param {number} [l] Message length if known beforehand
     * @returns {message.SimpleStruct} SimpleStruct
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */


    SimpleStruct.decode = function decode(r, l) {
      if (!(r instanceof $Reader)) r = $Reader.create(r);
      var c = l === undefined ? r.len : r.pos + l,
          m = new $root.message.SimpleStruct();

      while (r.pos < c) {
        var t = r.uint32();

        switch (t >>> 3) {
          case 1:
            m.intValue = r.int32();
            break;

          case 2:
            m.boolValue = r.bool();
            break;

          case 3:
            m.strValue = r.string();
            break;

          default:
            r.skipType(t & 7);
            break;
        }
      }

      return m;
    };
    /**
     * Creates a SimpleStruct message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof message.SimpleStruct
     * @static
     * @param {Object.<string,*>} d Plain object
     * @returns {message.SimpleStruct} SimpleStruct
     */


    SimpleStruct.fromObject = function fromObject(d) {
      if (d instanceof $root.message.SimpleStruct) return d;
      var m = new $root.message.SimpleStruct();

      if (d.intValue != null) {
        m.intValue = d.intValue | 0;
      }

      if (d.boolValue != null) {
        m.boolValue = Boolean(d.boolValue);
      }

      if (d.strValue != null) {
        m.strValue = String(d.strValue);
      }

      return m;
    };
    /**
     * Creates a plain object from a SimpleStruct message. Also converts values to other types if specified.
     * @function toObject
     * @memberof message.SimpleStruct
     * @static
     * @param {message.SimpleStruct} m SimpleStruct
     * @param {$protobuf.IConversionOptions} [o] Conversion options
     * @returns {Object.<string,*>} Plain object
     */


    SimpleStruct.toObject = function toObject(m, o) {
      if (!o) o = {};
      var d = {};

      if (o.defaults) {
        d.intValue = 0;
        d.boolValue = false;
        d.strValue = "";
      }

      if (m.intValue != null && m.hasOwnProperty("intValue")) {
        d.intValue = m.intValue;
      }

      if (m.boolValue != null && m.hasOwnProperty("boolValue")) {
        d.boolValue = m.boolValue;
      }

      if (m.strValue != null && m.hasOwnProperty("strValue")) {
        d.strValue = m.strValue;
      }

      return d;
    };
    /**
     * Converts this SimpleStruct to JSON.
     * @function toJSON
     * @memberof message.SimpleStruct
     * @instance
     * @returns {Object.<string,*>} JSON object
     */


    SimpleStruct.prototype.toJSON = function toJSON() {
      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return SimpleStruct;
  }();

  return message;
}();

$root.google = function () {
  /**
   * Namespace google.
   * @exports google
   * @namespace
   */
  var google = {};

  google.protobuf = function () {
    /**
     * Namespace protobuf.
     * @memberof google
     * @namespace
     */
    var protobuf = {};

    protobuf.Any = function () {
      /**
       * Properties of an Any.
       * @memberof google.protobuf
       * @interface IAny
       * @property {string|null} [type_url] Any type_url
       * @property {Uint8Array|null} [value] Any value
       */

      /**
       * Constructs a new Any.
       * @memberof google.protobuf
       * @classdesc Represents an Any.
       * @implements IAny
       * @constructor
       * @param {google.protobuf.IAny=} [p] Properties to set
       */
      function Any(p) {
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * Any type_url.
       * @member {string} type_url
       * @memberof google.protobuf.Any
       * @instance
       */


      Any.prototype.type_url = "";
      /**
       * Any value.
       * @member {Uint8Array} value
       * @memberof google.protobuf.Any
       * @instance
       */

      Any.prototype.value = $util.newBuffer([]);
      /**
       * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
       * @function encode
       * @memberof google.protobuf.Any
       * @static
       * @param {google.protobuf.IAny} m Any message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      Any.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.type_url != null && Object.hasOwnProperty.call(m, "type_url")) w.uint32(10).string(m.type_url);
        if (m.value != null && Object.hasOwnProperty.call(m, "value")) w.uint32(18).bytes(m.value);
        return w;
      };
      /**
       * Decodes an Any message from the specified reader or buffer.
       * @function decode
       * @memberof google.protobuf.Any
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {google.protobuf.Any} Any
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      Any.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.google.protobuf.Any();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              m.type_url = r.string();
              break;

            case 2:
              m.value = r.bytes();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates an Any message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof google.protobuf.Any
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {google.protobuf.Any} Any
       */


      Any.fromObject = function fromObject(d) {
        if (d instanceof $root.google.protobuf.Any) return d;
        var m = new $root.google.protobuf.Any();

        if (d.type_url != null) {
          m.type_url = String(d.type_url);
        }

        if (d.value != null) {
          if (typeof d.value === "string") $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);else if (d.value.length) m.value = d.value;
        }

        return m;
      };
      /**
       * Creates a plain object from an Any message. Also converts values to other types if specified.
       * @function toObject
       * @memberof google.protobuf.Any
       * @static
       * @param {google.protobuf.Any} m Any
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      Any.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.defaults) {
          d.type_url = "";
          if (o.bytes === String) d.value = "";else {
            d.value = [];
            if (o.bytes !== Array) d.value = $util.newBuffer(d.value);
          }
        }

        if (m.type_url != null && m.hasOwnProperty("type_url")) {
          d.type_url = m.type_url;
        }

        if (m.value != null && m.hasOwnProperty("value")) {
          d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
        }

        return d;
      };
      /**
       * Converts this Any to JSON.
       * @function toJSON
       * @memberof google.protobuf.Any
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      Any.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return Any;
    }();

    protobuf.Timestamp = function () {
      /**
       * Properties of a Timestamp.
       * @memberof google.protobuf
       * @interface ITimestamp
       * @property {number|Long|null} [seconds] Timestamp seconds
       * @property {number|null} [nanos] Timestamp nanos
       */

      /**
       * Constructs a new Timestamp.
       * @memberof google.protobuf
       * @classdesc Represents a Timestamp.
       * @implements ITimestamp
       * @constructor
       * @param {google.protobuf.ITimestamp=} [p] Properties to set
       */
      function Timestamp(p) {
        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {
          if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
        }
      }
      /**
       * Timestamp seconds.
       * @member {number|Long} seconds
       * @memberof google.protobuf.Timestamp
       * @instance
       */


      Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
      /**
       * Timestamp nanos.
       * @member {number} nanos
       * @memberof google.protobuf.Timestamp
       * @instance
       */

      Timestamp.prototype.nanos = 0;
      /**
       * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
       * @function encode
       * @memberof google.protobuf.Timestamp
       * @static
       * @param {google.protobuf.ITimestamp} m Timestamp message or plain object to encode
       * @param {$protobuf.Writer} [w] Writer to encode to
       * @returns {$protobuf.Writer} Writer
       */

      Timestamp.encode = function encode(m, w) {
        if (!w) w = $Writer.create();
        if (m.seconds != null && Object.hasOwnProperty.call(m, "seconds")) w.uint32(8).int64(m.seconds);
        if (m.nanos != null && Object.hasOwnProperty.call(m, "nanos")) w.uint32(16).int32(m.nanos);
        return w;
      };
      /**
       * Decodes a Timestamp message from the specified reader or buffer.
       * @function decode
       * @memberof google.protobuf.Timestamp
       * @static
       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
       * @param {number} [l] Message length if known beforehand
       * @returns {google.protobuf.Timestamp} Timestamp
       * @throws {Error} If the payload is not a reader or valid buffer
       * @throws {$protobuf.util.ProtocolError} If required fields are missing
       */


      Timestamp.decode = function decode(r, l) {
        if (!(r instanceof $Reader)) r = $Reader.create(r);
        var c = l === undefined ? r.len : r.pos + l,
            m = new $root.google.protobuf.Timestamp();

        while (r.pos < c) {
          var t = r.uint32();

          switch (t >>> 3) {
            case 1:
              m.seconds = r.int64();
              break;

            case 2:
              m.nanos = r.int32();
              break;

            default:
              r.skipType(t & 7);
              break;
          }
        }

        return m;
      };
      /**
       * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
       * @function fromObject
       * @memberof google.protobuf.Timestamp
       * @static
       * @param {Object.<string,*>} d Plain object
       * @returns {google.protobuf.Timestamp} Timestamp
       */


      Timestamp.fromObject = function fromObject(d) {
        if (d instanceof $root.google.protobuf.Timestamp) return d;
        var m = new $root.google.protobuf.Timestamp();

        if (d.seconds != null) {
          if ($util.Long) (m.seconds = $util.Long.fromValue(d.seconds)).unsigned = false;else if (typeof d.seconds === "string") m.seconds = parseInt(d.seconds, 10);else if (typeof d.seconds === "number") m.seconds = d.seconds;else if (typeof d.seconds === "object") m.seconds = new $util.LongBits(d.seconds.low >>> 0, d.seconds.high >>> 0).toNumber();
        }

        if (d.nanos != null) {
          m.nanos = d.nanos | 0;
        }

        return m;
      };
      /**
       * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
       * @function toObject
       * @memberof google.protobuf.Timestamp
       * @static
       * @param {google.protobuf.Timestamp} m Timestamp
       * @param {$protobuf.IConversionOptions} [o] Conversion options
       * @returns {Object.<string,*>} Plain object
       */


      Timestamp.toObject = function toObject(m, o) {
        if (!o) o = {};
        var d = {};

        if (o.defaults) {
          if ($util.Long) {
            var n = new $util.Long(0, 0, false);
            d.seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
          } else d.seconds = o.longs === String ? "0" : 0;

          d.nanos = 0;
        }

        if (m.seconds != null && m.hasOwnProperty("seconds")) {
          if (typeof m.seconds === "number") d.seconds = o.longs === String ? String(m.seconds) : m.seconds;else d.seconds = o.longs === String ? $util.Long.prototype.toString.call(m.seconds) : o.longs === Number ? new $util.LongBits(m.seconds.low >>> 0, m.seconds.high >>> 0).toNumber() : m.seconds;
        }

        if (m.nanos != null && m.hasOwnProperty("nanos")) {
          d.nanos = m.nanos;
        }

        return d;
      };
      /**
       * Converts this Timestamp to JSON.
       * @function toJSON
       * @memberof google.protobuf.Timestamp
       * @instance
       * @returns {Object.<string,*>} JSON object
       */


      Timestamp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
      };

      return Timestamp;
    }();

    return protobuf;
  }();

  return google;
}();

$root.error = function () {
  /**
   * Namespace error.
   * @exports error
   * @namespace
   */
  var error = {};
  /**
   * Type enum.
   * @name error.Type
   * @enum {number}
   * @property {number} NONE=0 NONE value
   */

  error.Type = function () {
    var valuesById = {},
        values = Object.create(valuesById);
    values[valuesById[0] = "NONE"] = 0;
    return values;
  }();

  return error;
}();

module.exports = $root;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHQvdG9vbHMvcGJQcm90by9idW5kbGUuanMiXSwibmFtZXMiOlsiJHByb3RvYnVmIiwicHJvdG9idWYiLCIkUmVhZGVyIiwiUmVhZGVyIiwiJFdyaXRlciIsIldyaXRlciIsIiR1dGlsIiwidXRpbCIsIiRyb290Iiwicm9vdHMiLCJqdWJpYW4iLCJtb2RlbCIsIlN0cmluZ1JlcXVlc3QiLCJwIiwia3MiLCJPYmplY3QiLCJrZXlzIiwiaSIsImxlbmd0aCIsInByb3RvdHlwZSIsInN0cl92YWx1ZSIsImVuY29kZSIsIm0iLCJ3IiwiY3JlYXRlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwidWludDMyIiwic3RyaW5nIiwiZGVjb2RlIiwiciIsImwiLCJjIiwidW5kZWZpbmVkIiwibGVuIiwicG9zIiwidCIsInNraXBUeXBlIiwiZnJvbU9iamVjdCIsImQiLCJTdHJpbmciLCJ0b09iamVjdCIsIm8iLCJkZWZhdWx0cyIsInRvSlNPTiIsImNvbnN0cnVjdG9yIiwidG9KU09OT3B0aW9ucyIsIk1ldGFEYXRhUmVxdWVzdCIsIm1ldGFkYXRhIiwiZW1wdHlPYmplY3QiLCJmb3JrIiwibGRlbGltIiwiayIsInNraXAiLCJUeXBlRXJyb3IiLCJvYmplY3RzIiwia3MyIiwiaiIsIk1ldGFEYXRhUmVzcG9uc2UiLCJQYWdlUmVxdWVzdCIsInBhcmFtcyIsIm9wdGlvbnMiLCJRdWVyeU9wdGlvbnMiLCJSZXN1bHRSZXNwb25zZSIsInJlc3VsdCIsImludDMyIiwiUmVxdWVzdEJ5VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJSZXF1ZXN0QnlJZHMiLCJpZHMiLCJlbXB0eUFycmF5IiwicHVzaCIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5cyIsInBhZ2UiLCJjb3VudCIsIm1heF9pZCIsIkxvbmciLCJmcm9tQml0cyIsInNpbmNlX2lkIiwiaW50NjQiLCJmcm9tVmFsdWUiLCJ1bnNpZ25lZCIsInBhcnNlSW50IiwiTG9uZ0JpdHMiLCJsb3ciLCJoaWdoIiwidG9OdW1iZXIiLCJuIiwibG9uZ3MiLCJ0b1N0cmluZyIsIk51bWJlciIsImdvbG90dGVyeSIsInNydiIsInJvb20iLCJSb29tVHlwZSIsInZhbHVlc0J5SWQiLCJ2YWx1ZXMiLCJSb29tIiwibm9kZXMiLCJpZCIsInNlcnZlcl9pZCIsIlRhYmxlSW5mbyIsInRyYW5zYWN0aW9uX2lkIiwiSm9pblJvb20iLCJyb29tX25vIiwicm9vbV90eXBlIiwiZW51bXMiLCJvYXV0aDIiLCJUb2tlbiIsInNjb3BlcyIsInRva2VuX3R5cGUiLCJyZWZyZXNoX3Rva2VuIiwiZXhwaXJlc19hdCIsInByb2ZpbGUiLCJQcm9maWxlIiwidXNlcm5hbWUiLCJuaWNrbmFtZSIsInByb3ZpbmNlIiwiY2l0eSIsImxvY2F0aW9uIiwibG9jYXRpb25faWQiLCJkZXNjcmlwdGlvbiIsInByb2ZpbGVfaW1hZ2VfdXJsIiwiZ2VuZGVyIiwiY3JlYXRlX3RpbWUiLCJ1cGRhdGVkIiwiZ2VvX2VuYWJsZWQiLCJyb2xlIiwiaG9tZXBhZ2UiLCJncm91cCIsImJvb2wiLCJPcmdhbml6YXRpb24iLCJCb29sZWFuIiwiUm9sZVR5cGUiLCJyaWdodHMiLCJ0eXBlIiwic2FsZXNfc2hvcF9pZCIsIm93bmVyX2lkIiwib3duZXJfbmFtZSIsImxpc2Vuc2VfaWQiLCJwaG9uZSIsImJyaWVmX25hbWUiLCJxcmNvZGVfdXJsIiwic2hhcmVfdXJsIiwiYWRkcmVzcyIsImxhdCIsImxvbiIsImMyIiwianNvbiIsImlzRmluaXRlIiwiUmlnaHRUeXBlIiwiUHJvZmlsZVJlc3BvbnNlIiwicHJvZmlsZXMiLCJPcmdhbml6YXRpb25SZXNwb25zZSIsImdyb3VwcyIsImZhcm0iLCJSZXFHYW1lV29yZHMiLCJ1c2VyX2lkIiwibW9kZSIsIm1vZGVfcGFyYW0iLCJnYW1lX3R5cGUiLCJSZXNwR2FtZVdvcmRzIiwiaXRlbV9pZHMiLCJtdXN0X2xlYXJuIiwiZ2FtZV9jb25maWciLCJHYW1lVHlwZUNvbmZpZyIsInN0YWdlX3BhcmFtcyIsInN0YXJfZXZhbHVhdGlvbiIsImdhbWVfZHVyYXRpb24iLCJ0aW1lX292ZXIiLCJ0aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uIiwidW5za2lsbGZ1bGxfZGVkdWN0aW9uIiwiUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MiLCJtYXRfaWQiLCJ1bml0X2lkIiwiUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzIiwiZ2FtZXNfcHJvZ3Jlc3MiLCJHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIiwic3RhciIsImhpc3RvcnlfbWF4X3Njb3JlIiwic3RhdGUiLCJSZXFNYXRMZWFybmluZ1Byb2dyZXNzIiwiUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3MiLCJtYXRfc3RhciIsImdyYWRlc19zdGFyIiwidW5pdHNfc3RhciIsIlJlcVN0dWR5VXBsb2FkIiwic3R1ZHlfcmVzdWx0IiwiaXNfc2tpcCIsIlN0dWR5UmVzdWx0IiwiUmVzcFN0dWR5VXBsb2FkIiwicmVzX2xpc3QiLCJSZXMiLCJpdGVtX2lkIiwicmVzX3R5cGUiLCJyZXNfbnVtIiwiUmVxR2FtZVVwbG9hZCIsImdhbWVfcmVzdWx0Iiwic3RhcnRfdGltZSIsImVuZF90aW1lIiwiR2FtZVJlc3VsdCIsIlJlc3BHYW1lVXBsb2FkIiwidGtmaWdodF9tZXNzYWdlIiwidGFzdF9jb21wbGV0ZWQiLCJnYW1lX3JlY29yZCIsIm1vZGVfcmVzdWx0IiwicGxheV9udW0iLCJHYW1lUmVjb3JkIiwiTW9kZVJlc3VsdCIsImNhdGNoX251bSIsInJlYWN0X3RpbWUiLCJpc19jcml0Iiwid3Jvbmdfd29yZHMiLCJ1bnNraWxsZnVsX3dvcmRzIiwic2tpbGxmdWxfd29yZHMiLCJzdXBlcnNraWxsZnVsX3dvcmRzIiwic2NvcmUiLCJzdGFyX3Byb2dyZXNzIiwiY2hlY2tpbl9pZCIsImNoZWNraW5fc3RhdGUiLCJsZXNzb25fc3RhdGUiLCJuaWNrTmFtZSIsImxlc3Nvbk5hbWUiLCJ6ZXJvTGVmdFRpbWUiLCJjaGVja2luUHVzaFJlbWFyayIsIkV4cGlyZWRVc2VyTGltaXRDb25maWciLCJjYW5fcGxheV91bml0X2lkcyIsImxpbWl0X3Jlc19jb3VudCIsImNhbl91c2VfY2hlY2tpbiIsImNhbl91c2Vfc3BlYyIsIkdhbWVUeXBlIiwiV29yZEl0ZW1JbmZvIiwiZ3JhZGVfaWQiLCJ1bml0X2luZGV4IiwiY24iLCJlbiIsIkdyYWRlTGVhcm5pbmdQcm9ncmVzcyIsIkdyYWRlSUQiLCJTdGFyIiwiVW5pdExlYXJuaW5nUHJvZ3Jlc3MiLCJHYW1lc0xlYXJuaW5nUHJvZ3Jlc3MiLCJVbml0SUQiLCJHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MiLCJsb25nVG9IYXNoIiwiSGlzdG9yeU1heFNjb3JlIiwiUmVxTWF0ZXJpYWxzIiwiUmVzcE1hdGVyaWFscyIsIk1hdHMiLCJNYXRlcmlhbEl0ZW0iLCJtYXRfbmFtZSIsIlJlcVVwZGF0ZU1hdCIsInVpZF9pZCIsIlJlc3BVcGRhdGVNYXQiLCJsYXN0X3N0dWR5IiwiUG9zIiwieCIsInkiLCJCdWlsZGluZ1N0YXRlVHlwZSIsIkNyb3BTdGF0ZVR5cGUiLCJBcmFibGVMYW5kU3RhdGVUeXBlIiwiTWFpbFR5cGUiLCJNYWlsU3RhdGUiLCJNYWlsVGFwVHlwZSIsIkFubmV4U3RhdGUiLCJDdXJyZW5jeVR5cGUiLCJVbmxvY2tDb25kaXRpb25UeXBlIiwiQnVpbGRpbmdJdGVtIiwiY29uZmlnSUQiLCJsZXZlbCIsInJvdGF0ZWQiLCJsZWZ0RHVyIiwiUmVxQnVpbGRpbmdMaXN0IiwiUmVzcEJ1aWxkaW5nTGlzdCIsImJ1aWxkaW5ncyIsIlJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0IiwiUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0IiwiYnVpbGRpbmdDb25maWdJZHMiLCJSZXFCdWlsZCIsIlJlcUJ5SWQiLCJNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQiLCJNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQiLCJjb2luIiwiY3J5c3RhbCIsImhlYXJ0IiwiUmVxRWRpdEJ1aWxkaW5nIiwiUmVzcFJlY292ZXJ5IiwidGtDcnlzdGFsTGVmdCIsIlJlc3BDb21wbGV0ZUltbSIsIlJlcU5vQm9keVBhcmFtIiwiUmVzcE5vQm9keVBhcmFtIiwiUmVzcE1hbm9ySGVhcnRJbmZvIiwibmlrZV9uYW1lIiwidXNlcl9jb2RlIiwidGtfZ29sZCIsInRrX2xvdmUiLCJ0a19jcnlzdGFsIiwiYXZhdGFyX2lkIiwiTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0iLCJSZXNwVXNlckF2YXRhcnMiLCJhdmF0YXJJZHMiLCJSZXFVcGRhdGVBdmF0YXIiLCJSZXNwVXBkYXRlQXZhdGFyIiwiUmVxVXBkYXRlTmlja05hbWUiLCJuaWNrX25hbWUiLCJSZXNwVXBkYXRlTmlja05hbWUiLCJSZXNwQmFybkluZm8iLCJjcm9wX2l0ZW1zIiwidG90YWxfY2FwYWNpdHkiLCJCYXJuQ3JvcEl0ZW0iLCJ0b3RhbF9udW0iLCJSZXFCYXJuU2VsbCIsIm51bSIsIlJlc3BCYXJuU2VsbCIsIlByb3BDZmdJdGVtIiwibmFtZSIsImRpc3BsYXkiLCJkZXNjIiwid29ybGQiLCJpY29uX3BhdGgiLCJzYWxlX3ByaWNlIiwiQ29uZGl0aW9uSXRlbSIsInZhbHVlIiwiVXBncmFkZSIsImJ1aWxkX2Nvc3RzIiwiYnVpbGRfY29uZGl0aW9uIiwidXBncmFkZV9wYXJhbSIsImJ1aWxkX2R1ciIsImJ1aWxkX2Rlc2MiLCJwcmVmYWIiLCJCdWlsZENmZ0l0ZW0iLCJmbG9vcl9zcGFjZSIsInVwZ3JhZGVzIiwicG9zaXRpb24iLCJyb3RhdGVhYmxlIiwibW92ZWFibGUiLCJyZWNvdmVyYWJsZSIsIm9ubHlfb25lIiwiVW5sb2NrQ29uZGl0aW9uIiwiQ3JvcENmZ0l0ZW0iLCJ1bmxvY2tfY29uZGl0aW9uIiwiZ3Jvd190aW1lIiwiUmVzcFBsYW50Q3JvcHMiLCJwbGFudF9jcm9wcyIsIlBsYW50Q3JvcCIsImNvbmZpZ19pZCIsImlzX3VubG9jayIsImN1cnJlbmN5X3R5cGUiLCJudW1iZXIiLCJSZXNwQXJhYmxlTGFuZHNTdGF0ZSIsImFyYWJsZV9sYW5kc19zdGF0ZSIsIkFyYWJsZUxhbmRTdGF0ZSIsImJ1aWxkaW5nX2lkIiwiY3JvcF9jb25maWdJRCIsInRpbWVfbGVmdCIsIlJlcUNyb3BPcHRpb24iLCJidWlsZGluZ19pZHMiLCJjcm9wX2NmZ2lkcyIsIlJlcVVubG9ja0Nyb3AiLCJDdXJyZW5jeUxlZnQiLCJNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQiLCJ3b3JkX2J1YmJsZXMiLCJXb3JkQnViYmxlIiwiTWVzc2FnZVBsYXllckluZm8iLCJzbG9nYW4iLCJpc01haWwiLCJ3b3JkX2lkIiwiUmVxV29yZEJ1YmJsZUVuZCIsIlJlcVVwZGF0ZUJpbGxib2FyZHMiLCJjb250ZW50IiwiUmVzcE1haWxMaXN0IiwibWFpbHMiLCJNYWlsTGlzdEl0ZW0iLCJzZW5kZXJfdWlkIiwidGl0bGUiLCJzdGF0dXMiLCJSZXNwTWFpbERldGFpbCIsImFubmV4ZXMiLCJBbm5leCIsImFubmV4X2lkIiwiUmVxUmVjZWl2ZUFubmV4IiwiYW5uZXhJRHMiLCJtYWlsX2lkIiwiUXVlc3RTdGF0ZSIsIkRpYWxvZ1N0YWdlVHlwZSIsIk1lc3NhZ2VQaG9uZUNhbGwiLCJjaGFyX2NvbmZpZ19pZCIsImRsZ19zdGFnZV9pZCIsIlF1ZXN0RGF0YSIsInRhc2tfZGF0YSIsImxlZnRfZHVyIiwiTWVzc2FnZVF1ZXN0TGlzdCIsInF1ZXN0cyIsImRvbmVfcXVlc3RfY291bnRfdG9kYXkiLCJleHRyYV9hd2FyZF9sZWZ0X3RpbWVzIiwiZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCIsIk1lc3NhZ2VRdWVzdFVwZGF0ZSIsInF1ZXN0IiwiaGVhcmRfY291bnQiLCJSZXFRdWVzdEdhaW5FeHRyYUF3YXJkIiwiZXh0ZW5kIiwiUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQiLCJSZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSIsIlJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSIsIlJlcURsZ1N0YWdlRG9uZSIsInN0YWdlVHlwZSIsIlJlc3BEbGdTdGFnZURvbmUiLCJtZXNzYWdlIiwiRXZlbnRCYXNpYyIsIlJlcXVlc3RCYXNpYyIsIk1lc3NhZ2UiLCJ2ZXJzaW9uIiwiand0X3Rva2VuIiwiZGF0IiwidGltZXN0YW1wIiwiZ29vZ2xlIiwiQW55IiwiVGltZXN0YW1wIiwiVHlwZSIsIlJlcXVlc3QiLCJSZXNwb25zZSIsImVyciIsInRyYWNlX2lkIiwiTm90aWZ5QmFzaWMiLCJSZXFDdXN0b21UZXN0IiwiYm9vbFZhbHVlIiwibWFwVmFsdWUiLCJpbnRWYWx1ZSIsInN0clZhbHVlIiwiUmVzcEN1c3RvbVRlc3QiLCJTaW1wbGVTdHJ1Y3QiLCJ0eXBlX3VybCIsIm5ld0J1ZmZlciIsImJ5dGVzIiwiYmFzZTY0Iiwic2xpY2UiLCJzZWNvbmRzIiwibmFub3MiLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7O0FBRUEsSUFBSUEsU0FBUyxHQUFHQyxRQUFoQixFQUVBOztBQUNBLElBQUlDLE9BQU8sR0FBR0YsU0FBUyxDQUFDRyxNQUF4QjtBQUFBLElBQWdDQyxPQUFPLEdBQUdKLFNBQVMsQ0FBQ0ssTUFBcEQ7QUFBQSxJQUE0REMsS0FBSyxHQUFHTixTQUFTLENBQUNPLElBQTlFLEVBRUE7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHUixTQUFTLENBQUNTLEtBQVYsQ0FBZ0IsU0FBaEIsTUFBK0JULFNBQVMsQ0FBQ1MsS0FBVixDQUFnQixTQUFoQixJQUE2QixFQUE1RCxDQUFaOztBQUVBRCxLQUFLLENBQUNFLE1BQU4sR0FBZ0IsWUFBVztBQUV2Qjs7Ozs7QUFLQSxNQUFJQSxNQUFNLEdBQUcsRUFBYjs7QUFFQUEsRUFBQUEsTUFBTSxDQUFDQyxLQUFQLEdBQWdCLFlBQVc7QUFFdkI7Ozs7O0FBS0EsUUFBSUEsS0FBSyxHQUFHLEVBQVo7O0FBRUFBLElBQUFBLEtBQUssQ0FBQ0MsYUFBTixHQUF1QixZQUFXO0FBRTlCOzs7Ozs7O0FBT0E7Ozs7Ozs7O0FBUUEsZUFBU0EsYUFBVCxDQUF1QkMsQ0FBdkIsRUFBMEI7QUFDdEIsWUFBSUEsQ0FBSixFQUNJLEtBQUssSUFBSUMsRUFB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LEdBSlksRUFBYjs7QUFNQSxTQUFPcVYsS0FBUDtBQUNILENBdEJhLEVBQWQ7O0FBd0JBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqYixLQUFqQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQtZGlzYWJsZSBibG9jay1zY29wZWQtdmFyLCBpZC1sZW5ndGgsIG5vLWNvbnRyb2wtcmVnZXgsIG5vLW1hZ2ljLW51bWJlcnMsIG5vLXByb3RvdHlwZS1idWlsdGlucywgbm8tcmVkZWNsYXJlLCBuby1zaGFkb3csIG5vLXZhciwgc29ydC12YXJzKi9cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJHByb3RvYnVmID0gcHJvdG9idWY7XG5cbi8vIENvbW1vbiBhbGlhc2VzXG52YXIgJFJlYWRlciA9ICRwcm90b2J1Zi5SZWFkZXIsICRXcml0ZXIgPSAkcHJvdG9idWYuV3JpdGVyLCAkdXRpbCA9ICRwcm90b2J1Zi51dGlsO1xuXG4vLyBFeHBvcnRlZCByb290IG5hbWVzcGFjZVxudmFyICRyb290ID0gJHByb3RvYnVmLnJvb3RzW1wiZGVmYXVsdFwiXSB8fCAoJHByb3RvYnVmLnJvb3RzW1wiZGVmYXVsdFwiXSA9IHt9KTtcblxuJHJvb3QuanViaWFuID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogTmFtZXNwYWNlIGp1Ymlhbi5cbiAgICAgKiBAZXhwb3J0cyBqdWJpYW5cbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICovXG4gICAgdmFyIGp1YmlhbiA9IHt9O1xuXG4gICAganViaWFuLm1vZGVsID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOYW1lc3BhY2UgbW9kZWwuXG4gICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW5cbiAgICAgICAgICogQG5hbWVzcGFjZVxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIG1vZGVsID0ge307XG5cbiAgICAgICAgbW9kZWwuU3RyaW5nUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgU3RyaW5nUmVxdWVzdC5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSVN0cmluZ1JlcXVlc3RcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtzdHJfdmFsdWVdIFN0cmluZ1JlcXVlc3Qgc3RyX3ZhbHVlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFN0cmluZ1JlcXVlc3QuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsXG4gICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBTdHJpbmdSZXF1ZXN0LlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSVN0cmluZ1JlcXVlc3RcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVN0cmluZ1JlcXVlc3Q9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gU3RyaW5nUmVxdWVzdChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0cmluZ1JlcXVlc3Qgc3RyX3ZhbHVlLlxuICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzdHJfdmFsdWVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuU3RyaW5nUmVxdWVzdFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFN0cmluZ1JlcXVlc3QucHJvdG90eXBlLnN0cl92YWx1ZSA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFN0cmluZ1JlcXVlc3QgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsganViaWFuLm1vZGVsLlN0cmluZ1JlcXVlc3QudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlN0cmluZ1JlcXVlc3RcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLklTdHJpbmdSZXF1ZXN0fSBtIFN0cmluZ1JlcXVlc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFN0cmluZ1JlcXVlc3QuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtLnN0cl92YWx1ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic3RyX3ZhbHVlXCIpKVxuICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0uc3RyX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFN0cmluZ1JlcXVlc3QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuU3RyaW5nUmVxdWVzdFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLm1vZGVsLlN0cmluZ1JlcXVlc3R9IFN0cmluZ1JlcXVlc3RcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgU3RyaW5nUmVxdWVzdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuanViaWFuLm1vZGVsLlN0cmluZ1JlcXVlc3QoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc3RyX3ZhbHVlID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIFN0cmluZ1JlcXVlc3QgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuU3RyaW5nUmVxdWVzdFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuU3RyaW5nUmVxdWVzdH0gU3RyaW5nUmVxdWVzdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBTdHJpbmdSZXF1ZXN0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lmp1Ymlhbi5tb2RlbC5TdHJpbmdSZXF1ZXN0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuU3RyaW5nUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIGlmIChkLnN0cl92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG0uc3RyX3ZhbHVlID0gU3RyaW5nKGQuc3RyX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFN0cmluZ1JlcXVlc3QgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlN0cmluZ1JlcXVlc3RcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLlN0cmluZ1JlcXVlc3R9IG0gU3RyaW5nUmVxdWVzdFxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBTdHJpbmdSZXF1ZXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5zdHJfdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS5zdHJfdmFsdWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic3RyX3ZhbHVlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuc3RyX3ZhbHVlID0gbS5zdHJfdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFN0cmluZ1JlcXVlc3QgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuU3RyaW5nUmVxdWVzdFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFN0cmluZ1JlcXVlc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBTdHJpbmdSZXF1ZXN0O1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIG1vZGVsLk1ldGFEYXRhUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTWV0YURhdGFSZXF1ZXN0LlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbFxuICAgICAgICAgICAgICogQGludGVyZmFjZSBJTWV0YURhdGFSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLHN0cmluZz58bnVsbH0gW21ldGFkYXRhXSBNZXRhRGF0YVJlcXVlc3QgbWV0YWRhdGFcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWV0YURhdGFSZXF1ZXN0LlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbFxuICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgTWV0YURhdGFSZXF1ZXN0LlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSU1ldGFEYXRhUmVxdWVzdFxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5JTWV0YURhdGFSZXF1ZXN0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIE1ldGFEYXRhUmVxdWVzdChwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNZXRhRGF0YVJlcXVlc3QgbWV0YWRhdGEuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBtZXRhZGF0YVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBNZXRhRGF0YVJlcXVlc3QucHJvdG90eXBlLm1ldGFkYXRhID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIE1ldGFEYXRhUmVxdWVzdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLklNZXRhRGF0YVJlcXVlc3R9IG0gTWV0YURhdGFSZXF1ZXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBNZXRhRGF0YVJlcXVlc3QuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtZXRhZGF0YVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuZm9yaygpLnVpbnQzMigxMCkuc3RyaW5nKGtzW2ldKS51aW50MzIoMTgpLnN0cmluZyhtLm1ldGFkYXRhW2tzW2ldXSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBNZXRhRGF0YVJlcXVlc3QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0fSBNZXRhRGF0YVJlcXVlc3RcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgTWV0YURhdGFSZXF1ZXN0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0KCksIGs7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIucG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tdID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIE1ldGFEYXRhUmVxdWVzdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLm1vZGVsLk1ldGFEYXRhUmVxdWVzdH0gTWV0YURhdGFSZXF1ZXN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIE1ldGFEYXRhUmVxdWVzdC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5qdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLm1ldGFkYXRhICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlcXVlc3QubWV0YWRhdGE6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKGQubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tzW2ldXSA9IFN0cmluZyhkLm1ldGFkYXRhW2tzW2ldXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIE1ldGFEYXRhUmVxdWVzdCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlcXVlc3R9IG0gTWV0YURhdGFSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIE1ldGFEYXRhUmVxdWVzdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvLm9iamVjdHMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBkLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBrczI7XG4gICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgJiYgKGtzMiA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtzMi5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YVtrczJbal1dID0gbS5tZXRhZGF0YVtrczJbal1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1ldGFEYXRhUmVxdWVzdCB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBNZXRhRGF0YVJlcXVlc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBNZXRhRGF0YVJlcXVlc3Q7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgbW9kZWwuTWV0YURhdGFSZXNwb25zZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTWV0YURhdGFSZXNwb25zZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSU1ldGFEYXRhUmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPnxudWxsfSBbbWV0YWRhdGFdIE1ldGFEYXRhUmVzcG9uc2UgbWV0YWRhdGFcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWV0YURhdGFSZXNwb25zZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE1ldGFEYXRhUmVzcG9uc2UuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJTWV0YURhdGFSZXNwb25zZVxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5JTWV0YURhdGFSZXNwb25zZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBNZXRhRGF0YVJlc3BvbnNlKHApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE1ldGFEYXRhUmVzcG9uc2UgbWV0YWRhdGEuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBtZXRhZGF0YVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgTWV0YURhdGFSZXNwb25zZS5wcm90b3R5cGUubWV0YWRhdGEgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTWV0YURhdGFSZXNwb25zZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXNwb25zZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXNwb25zZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSU1ldGFEYXRhUmVzcG9uc2V9IG0gTWV0YURhdGFSZXNwb25zZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgTWV0YURhdGFSZXNwb25zZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm1ldGFkYXRhXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMobS5tZXRhZGF0YSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5mb3JrKCkudWludDMyKDEwKS5zdHJpbmcoa3NbaV0pLnVpbnQzMigxOCkuc3RyaW5nKG0ubWV0YWRhdGFba3NbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIE1ldGFEYXRhUmVzcG9uc2UgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXNwb25zZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLm1vZGVsLk1ldGFEYXRhUmVzcG9uc2V9IE1ldGFEYXRhUmVzcG9uc2VcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgTWV0YURhdGFSZXNwb25zZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuanViaWFuLm1vZGVsLk1ldGFEYXRhUmVzcG9uc2UoKSwgaztcbiAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgci5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubWV0YWRhdGFba10gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgTWV0YURhdGFSZXNwb25zZSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlfSBNZXRhRGF0YVJlc3BvbnNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIE1ldGFEYXRhUmVzcG9uc2UuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLm1vZGVsLk1ldGFEYXRhUmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lmp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLm1ldGFkYXRhICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlLm1ldGFkYXRhOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0ubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhkLm1ldGFkYXRhKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YVtrc1tpXV0gPSBTdHJpbmcoZC5tZXRhZGF0YVtrc1tpXV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNZXRhRGF0YVJlc3BvbnNlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5NZXRhRGF0YVJlc3BvbnNlfSBtIE1ldGFEYXRhUmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgTWV0YURhdGFSZXNwb25zZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvLm9iamVjdHMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBkLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBrczI7XG4gICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgJiYgKGtzMiA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtzMi5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YVtrczJbal1dID0gbS5tZXRhZGF0YVtrczJbal1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1ldGFEYXRhUmVzcG9uc2UgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuTWV0YURhdGFSZXNwb25zZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIE1ldGFEYXRhUmVzcG9uc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBNZXRhRGF0YVJlc3BvbnNlO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIG1vZGVsLlBhZ2VSZXF1ZXN0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBQYWdlUmVxdWVzdC5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSVBhZ2VSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLHN0cmluZz58bnVsbH0gW3BhcmFtc10gUGFnZVJlcXVlc3QgcGFyYW1zXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge2p1Ymlhbi5tb2RlbC5JUXVlcnlPcHRpb25zfG51bGx9IFtvcHRpb25zXSBQYWdlUmVxdWVzdCBvcHRpb25zXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFBhZ2VSZXF1ZXN0LlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbFxuICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUGFnZVJlcXVlc3QuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJUGFnZVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVBhZ2VSZXF1ZXN0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIFBhZ2VSZXF1ZXN0KHApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQYWdlUmVxdWVzdCBwYXJhbXMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBwYXJhbXNcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUGFnZVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYWdlUmVxdWVzdC5wcm90b3R5cGUucGFyYW1zID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUGFnZVJlcXVlc3Qgb3B0aW9ucy5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge2p1Ymlhbi5tb2RlbC5JUXVlcnlPcHRpb25zfG51bGx8dW5kZWZpbmVkfSBvcHRpb25zXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlBhZ2VSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUGFnZVJlcXVlc3QucHJvdG90eXBlLm9wdGlvbnMgPSBudWxsO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBQYWdlUmVxdWVzdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBqdWJpYW4ubW9kZWwuUGFnZVJlcXVlc3QudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlBhZ2VSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5JUGFnZVJlcXVlc3R9IG0gUGFnZVJlcXVlc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFBhZ2VSZXF1ZXN0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobS5wYXJhbXMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInBhcmFtc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0ucGFyYW1zKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTApLmZvcmsoKS51aW50MzIoMTApLnN0cmluZyhrc1tpXSkudWludDMyKDE4KS5zdHJpbmcobS5wYXJhbXNba3NbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS5vcHRpb25zICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJvcHRpb25zXCIpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5qdWJpYW4ubW9kZWwuUXVlcnlPcHRpb25zLmVuY29kZShtLm9wdGlvbnMsIHcudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgUGFnZVJlcXVlc3QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUGFnZVJlcXVlc3RcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5tb2RlbC5QYWdlUmVxdWVzdH0gUGFnZVJlcXVlc3RcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUGFnZVJlcXVlc3QuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lmp1Ymlhbi5tb2RlbC5QYWdlUmVxdWVzdCgpLCBrO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwKCkucG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5wYXJhbXMgPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucGFyYW1zID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIucG9zKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBtLnBhcmFtc1trXSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgbS5vcHRpb25zID0gJHJvb3QuanViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9ucy5kZWNvZGUociwgci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBQYWdlUmVxdWVzdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5QYWdlUmVxdWVzdFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuUGFnZVJlcXVlc3R9IFBhZ2VSZXF1ZXN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFBhZ2VSZXF1ZXN0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lmp1Ymlhbi5tb2RlbC5QYWdlUmVxdWVzdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuanViaWFuLm1vZGVsLlBhZ2VSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGQucGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5wYXJhbXMgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuanViaWFuLm1vZGVsLlBhZ2VSZXF1ZXN0LnBhcmFtczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLnBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKGQucGFyYW1zKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbS5wYXJhbXNba3NbaV1dID0gU3RyaW5nKGQucGFyYW1zW2tzW2ldXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGQub3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5vcHRpb25zICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmp1Ymlhbi5tb2RlbC5QYWdlUmVxdWVzdC5vcHRpb25zOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0ub3B0aW9ucyA9ICRyb290Lmp1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnMuZnJvbU9iamVjdChkLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUGFnZVJlcXVlc3QgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlBhZ2VSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5QYWdlUmVxdWVzdH0gbSBQYWdlUmVxdWVzdFxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYWdlUmVxdWVzdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvLm9iamVjdHMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBkLnBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBkLm9wdGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIga3MyO1xuICAgICAgICAgICAgICAgIGlmIChtLnBhcmFtcyAmJiAoa3MyID0gT2JqZWN0LmtleXMobS5wYXJhbXMpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5wYXJhbXMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrczIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucGFyYW1zW2tzMltqXV0gPSBtLnBhcmFtc1trczJbal1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtLm9wdGlvbnMgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwib3B0aW9uc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICBkLm9wdGlvbnMgPSAkcm9vdC5qdWJpYW4ubW9kZWwuUXVlcnlPcHRpb25zLnRvT2JqZWN0KG0ub3B0aW9ucywgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFBhZ2VSZXF1ZXN0IHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlBhZ2VSZXF1ZXN0XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUGFnZVJlcXVlc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBQYWdlUmVxdWVzdDtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBtb2RlbC5SZXN1bHRSZXNwb25zZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzdWx0UmVzcG9uc2UuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXN1bHRSZXNwb25zZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3Jlc3VsdF0gUmVzdWx0UmVzcG9uc2UgcmVzdWx0XG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3VsdFJlc3BvbnNlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbFxuICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzdWx0UmVzcG9uc2UuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzdWx0UmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVJlc3VsdFJlc3BvbnNlPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIFJlc3VsdFJlc3BvbnNlKHApIHtcbiAgICAgICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmVzdWx0UmVzcG9uc2UgcmVzdWx0LlxuICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSByZXN1bHRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUmVzdWx0UmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXN1bHRSZXNwb25zZS5wcm90b3R5cGUucmVzdWx0ID0gMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVzdWx0UmVzcG9uc2UgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsganViaWFuLm1vZGVsLlJlc3VsdFJlc3BvbnNlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5SZXN1bHRSZXNwb25zZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVJlc3VsdFJlc3BvbnNlfSBtIFJlc3VsdFJlc3BvbnNlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXN1bHRSZXNwb25zZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG0ucmVzdWx0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXN1bHRcIikpXG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0ucmVzdWx0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFJlc3VsdFJlc3BvbnNlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlc3VsdFJlc3BvbnNlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuUmVzdWx0UmVzcG9uc2V9IFJlc3VsdFJlc3BvbnNlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3VsdFJlc3BvbnNlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuUmVzdWx0UmVzcG9uc2UoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucmVzdWx0ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgUmVzdWx0UmVzcG9uc2UgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUmVzdWx0UmVzcG9uc2VcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLm1vZGVsLlJlc3VsdFJlc3BvbnNlfSBSZXN1bHRSZXNwb25zZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXN1bHRSZXNwb25zZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5qdWJpYW4ubW9kZWwuUmVzdWx0UmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lmp1Ymlhbi5tb2RlbC5SZXN1bHRSZXNwb25zZSgpO1xuICAgICAgICAgICAgICAgIGlmIChkLnJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG0ucmVzdWx0ID0gZC5yZXN1bHQgfCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzdWx0UmVzcG9uc2UgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlc3VsdFJlc3BvbnNlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5SZXN1bHRSZXNwb25zZX0gbSBSZXN1bHRSZXNwb25zZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXN1bHRSZXNwb25zZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzdWx0ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0ucmVzdWx0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInJlc3VsdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBkLnJlc3VsdCA9IG0ucmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXN1bHRSZXNwb25zZSB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5SZXN1bHRSZXNwb25zZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3VsdFJlc3BvbnNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0UmVzcG9uc2U7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgbW9kZWwuUmVxdWVzdEJ5VG9rZW4gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcXVlc3RCeVRva2VuLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbFxuICAgICAgICAgICAgICogQGludGVyZmFjZSBJUmVxdWVzdEJ5VG9rZW5cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFthY2Nlc3NfdG9rZW5dIFJlcXVlc3RCeVRva2VuIGFjY2Vzc190b2tlblxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXF1ZXN0QnlUb2tlbi5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcXVlc3RCeVRva2VuLlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSVJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLklSZXF1ZXN0QnlUb2tlbj19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBSZXF1ZXN0QnlUb2tlbihwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlcXVlc3RCeVRva2VuIGFjY2Vzc190b2tlbi5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gYWNjZXNzX3Rva2VuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5VG9rZW4ucHJvdG90eXBlLmFjY2Vzc190b2tlbiA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcXVlc3RCeVRva2VuIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlUb2tlbi52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUmVxdWVzdEJ5VG9rZW5cbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLklSZXF1ZXN0QnlUb2tlbn0gbSBSZXF1ZXN0QnlUb2tlbiBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5VG9rZW4uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtLmFjY2Vzc190b2tlbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiYWNjZXNzX3Rva2VuXCIpKVxuICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0uYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFJlcXVlc3RCeVRva2VuIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuUmVxdWVzdEJ5VG9rZW59IFJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlcXVlc3RCeVRva2VuLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuUmVxdWVzdEJ5VG9rZW4oKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYWNjZXNzX3Rva2VuID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIFJlcXVlc3RCeVRva2VuIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlUb2tlbn0gUmVxdWVzdEJ5VG9rZW5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5VG9rZW4uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLm1vZGVsLlJlcXVlc3RCeVRva2VuKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuUmVxdWVzdEJ5VG9rZW4oKTtcbiAgICAgICAgICAgICAgICBpZiAoZC5hY2Nlc3NfdG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtLmFjY2Vzc190b2tlbiA9IFN0cmluZyhkLmFjY2Vzc190b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXF1ZXN0QnlUb2tlbiBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUmVxdWVzdEJ5VG9rZW5cbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLlJlcXVlc3RCeVRva2VufSBtIFJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlcXVlc3RCeVRva2VuLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5hY2Nlc3NfdG9rZW4gPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS5hY2Nlc3NfdG9rZW4gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiYWNjZXNzX3Rva2VuXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuYWNjZXNzX3Rva2VuID0gbS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcXVlc3RCeVRva2VuIHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeVRva2VuXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5VG9rZW4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0QnlUb2tlbjtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBtb2RlbC5SZXF1ZXN0QnlJZHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcXVlc3RCeUlkcy5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcXVlc3RCeUlkc1xuICAgICAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48c3RyaW5nPnxudWxsfSBbaWRzXSBSZXF1ZXN0QnlJZHMgaWRzXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcXVlc3RCeUlkcy5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWxcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcXVlc3RCeUlkcy5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXF1ZXN0QnlJZHNcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVJlcXVlc3RCeUlkcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBSZXF1ZXN0QnlJZHMocCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWRzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlcXVlc3RCeUlkcyBpZHMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48c3RyaW5nPn0gaWRzXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeUlkc1xuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlcXVlc3RCeUlkcy5wcm90b3R5cGUuaWRzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxdWVzdEJ5SWRzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlJZHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeUlkc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVJlcXVlc3RCeUlkc30gbSBSZXF1ZXN0QnlJZHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlcXVlc3RCeUlkcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG0uaWRzICE9IG51bGwgJiYgbS5pZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5pZHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0uaWRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBSZXF1ZXN0QnlJZHMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUmVxdWVzdEJ5SWRzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuUmVxdWVzdEJ5SWRzfSBSZXF1ZXN0QnlJZHNcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5SWRzLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5qdWJpYW4ubW9kZWwuUmVxdWVzdEJ5SWRzKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmlkcyAmJiBtLmlkcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uaWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBtLmlkcy5wdXNoKHIuc3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgUmVxdWVzdEJ5SWRzIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlJlcXVlc3RCeUlkc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4ubW9kZWwuUmVxdWVzdEJ5SWRzfSBSZXF1ZXN0QnlJZHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5SWRzLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lmp1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlJZHMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lmp1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlJZHMoKTtcbiAgICAgICAgICAgICAgICBpZiAoZC5pZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuaWRzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5qdWJpYW4ubW9kZWwuUmVxdWVzdEJ5SWRzLmlkczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0uaWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5pZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uaWRzW2ldID0gU3RyaW5nKGQuaWRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxdWVzdEJ5SWRzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlJZHNcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLlJlcXVlc3RCeUlkc30gbSBSZXF1ZXN0QnlJZHNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVxdWVzdEJ5SWRzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5pZHMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0uaWRzICYmIG0uaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkLmlkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uaWRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmlkc1tqXSA9IG0uaWRzW2pdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcXVlc3RCeUlkcyB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5SZXF1ZXN0QnlJZHNcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXF1ZXN0QnlJZHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBSZXF1ZXN0QnlJZHM7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgbW9kZWwuUXVlcnlPcHRpb25zID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBRdWVyeU9wdGlvbnMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElRdWVyeU9wdGlvbnNcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtwYWdlXSBRdWVyeU9wdGlvbnMgcGFnZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2NvdW50XSBRdWVyeU9wdGlvbnMgY291bnRcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW21heF9pZF0gUXVlcnlPcHRpb25zIG1heF9pZFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbc2luY2VfaWRdIFF1ZXJ5T3B0aW9ucyBzaW5jZV9pZFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBRdWVyeU9wdGlvbnMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsXG4gICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBRdWVyeU9wdGlvbnMuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJUXVlcnlPcHRpb25zXG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLm1vZGVsLklRdWVyeU9wdGlvbnM9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gUXVlcnlPcHRpb25zKHApIHtcbiAgICAgICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUXVlcnlPcHRpb25zIHBhZ2UuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHBhZ2VcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUXVlcnlPcHRpb25zXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUXVlcnlPcHRpb25zLnByb3RvdHlwZS5wYWdlID0gMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBRdWVyeU9wdGlvbnMgY291bnQuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGNvdW50XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFF1ZXJ5T3B0aW9ucy5wcm90b3R5cGUuY291bnQgPSAwO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFF1ZXJ5T3B0aW9ucyBtYXhfaWQuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gbWF4X2lkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFF1ZXJ5T3B0aW9ucy5wcm90b3R5cGUubWF4X2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUXVlcnlPcHRpb25zIHNpbmNlX2lkLlxuICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHNpbmNlX2lkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFF1ZXJ5T3B0aW9ucy5wcm90b3R5cGUuc2luY2VfaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUXVlcnlPcHRpb25zIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4ubW9kZWwuSVF1ZXJ5T3B0aW9uc30gbSBRdWVyeU9wdGlvbnMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFF1ZXJ5T3B0aW9ucy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG0ucGFnZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicGFnZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5wYWdlKTtcbiAgICAgICAgICAgICAgICBpZiAobS5jb3VudCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiY291bnRcIikpXG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmNvdW50KTtcbiAgICAgICAgICAgICAgICBpZiAobS5tYXhfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm1heF9pZFwiKSlcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDY0KG0ubWF4X2lkKTtcbiAgICAgICAgICAgICAgICBpZiAobS5zaW5jZV9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic2luY2VfaWRcIikpXG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQ2NChtLnNpbmNlX2lkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFF1ZXJ5T3B0aW9ucyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnNcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnN9IFF1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBRdWVyeU9wdGlvbnMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lmp1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucGFnZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNvdW50ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubWF4X2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc2luY2VfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBRdWVyeU9wdGlvbnMgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUXVlcnlPcHRpb25zXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnN9IFF1ZXJ5T3B0aW9uc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBRdWVyeU9wdGlvbnMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuanViaWFuLm1vZGVsLlF1ZXJ5T3B0aW9ucygpO1xuICAgICAgICAgICAgICAgIGlmIChkLnBhZ2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtLnBhZ2UgPSBkLnBhZ2UgfCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZC5jb3VudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG0uY291bnQgPSBkLmNvdW50IHwgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGQubWF4X2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS5tYXhfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLm1heF9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1heF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubWF4X2lkID0gcGFyc2VJbnQoZC5tYXhfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF4X2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXhfaWQgPSBkLm1heF9pZDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF4X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXhfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5tYXhfaWQubG93ID4+PiAwLCBkLm1heF9pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZC5zaW5jZV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgKG0uc2luY2VfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnNpbmNlX2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc2luY2VfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnNpbmNlX2lkID0gcGFyc2VJbnQoZC5zaW5jZV9pZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zaW5jZV9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc2luY2VfaWQgPSBkLnNpbmNlX2lkO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zaW5jZV9pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc2luY2VfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5zaW5jZV9pZC5sb3cgPj4+IDAsIGQuc2luY2VfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFF1ZXJ5T3B0aW9ucyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUXVlcnlPcHRpb25zXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5tb2RlbC5RdWVyeU9wdGlvbnN9IG0gUXVlcnlPcHRpb25zXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFF1ZXJ5T3B0aW9ucy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucGFnZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGQuY291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm1heF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5tYXhfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuc2luY2VfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuc2luY2VfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtLnBhZ2UgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicGFnZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBkLnBhZ2UgPSBtLnBhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtLmNvdW50ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNvdW50XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuY291bnQgPSBtLmNvdW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS5tYXhfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibWF4X2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5tYXhfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLm1heF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLm1heF9pZCkgOiBtLm1heF9pZDtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5tYXhfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ubWF4X2lkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLm1heF9pZC5sb3cgPj4+IDAsIG0ubWF4X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLm1heF9pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0uc2luY2VfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic2luY2VfaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnNpbmNlX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5zaW5jZV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnNpbmNlX2lkKSA6IG0uc2luY2VfaWQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuc2luY2VfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uc2luY2VfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc2luY2VfaWQubG93ID4+PiAwLCBtLnNpbmNlX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnNpbmNlX2lkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBRdWVyeU9wdGlvbnMgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4ubW9kZWwuUXVlcnlPcHRpb25zXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUXVlcnlPcHRpb25zLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gUXVlcnlPcHRpb25zO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9KSgpO1xuXG4gICAganViaWFuLmdvbG90dGVyeSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTmFtZXNwYWNlIGdvbG90dGVyeS5cbiAgICAgICAgICogQG1lbWJlcm9mIGp1YmlhblxuICAgICAgICAgKiBAbmFtZXNwYWNlXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgZ29sb3R0ZXJ5ID0ge307XG5cbiAgICAgICAgZ29sb3R0ZXJ5LnNydiA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOYW1lc3BhY2Ugc3J2LlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnlcbiAgICAgICAgICAgICAqIEBuYW1lc3BhY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIHNydiA9IHt9O1xuXG4gICAgICAgICAgICBzcnYucm9vbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZSByb29tLlxuICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydlxuICAgICAgICAgICAgICAgICAqIEBuYW1lc3BhY2VcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgcm9vbSA9IHt9O1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUm9vbVR5cGUgZW51bS5cbiAgICAgICAgICAgICAgICAgKiBAbmFtZSBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb21UeXBlXG4gICAgICAgICAgICAgICAgICogQGVudW0ge251bWJlcn1cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gTk9ORT0wIE5PTkUgdmFsdWVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICByb29tLlJvb21UeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiTk9ORVwiXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgIHJvb20uUm9vbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJvb20uXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSVJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFJvb20gaWRcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3NlcnZlcl9pZF0gUm9vbSBzZXJ2ZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5JVGFibGVJbmZvPnxudWxsfSBbbm9kZXNdIFJvb20gbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUm9vbS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUm9vbS5cbiAgICAgICAgICAgICAgICAgICAgICogQGltcGxlbWVudHMgSVJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5JUm9vbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUm9vbShwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUm9vbSBpZC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBSb29tLnByb3RvdHlwZS5pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBSb29tIHNlcnZlcl9pZC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzZXJ2ZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFJvb20ucHJvdG90eXBlLnNlcnZlcl9pZCA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFJvb20gbm9kZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLklUYWJsZUluZm8+fSBub2Rlc1xuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Sb29tXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUm9vbS5wcm90b3R5cGUubm9kZXMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUm9vbSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb20udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5JUm9vbX0gbSBSb29tIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFJvb20uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnNlcnZlcl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic2VydmVyX2lkXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS5zZXJ2ZXJfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubm9kZXMgIT0gbnVsbCAmJiBtLm5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5ub2Rlcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm8uZW5jb2RlKG0ubm9kZXNbaV0sIHcudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIERlY29kZXMgYSBSb29tIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb219IFJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBSb29tLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb20oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc2VydmVyX2lkID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtLm5vZGVzICYmIG0ubm9kZXMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5ub2Rlcy5wdXNoKCRyb290Lmp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uVGFibGVJbmZvLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBhIFJvb20gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Sb29tXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbX0gUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUm9vbS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuc2VydmVyX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNlcnZlcl9pZCA9IFN0cmluZyhkLnNlcnZlcl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5ub2Rlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLm5vZGVzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbS5ub2RlczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5ub2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5ub2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQubm9kZXNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Sb29tLm5vZGVzOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubm9kZXNbaV0gPSAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlRhYmxlSW5mby5mcm9tT2JqZWN0KGQubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSb29tIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbX0gbSBSb29tXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUm9vbS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNlcnZlcl9pZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnNlcnZlcl9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzZXJ2ZXJfaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNlcnZlcl9pZCA9IG0uc2VydmVyX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubm9kZXMgJiYgbS5ub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLm5vZGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubm9kZXNbal0gPSAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlRhYmxlSW5mby50b09iamVjdChtLm5vZGVzW2pdLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBSb29tIHRvIEpTT04uXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUm9vbS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJvb207XG4gICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgIHJvb20uVGFibGVJbmZvID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgVGFibGVJbmZvLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElUYWJsZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFRhYmxlSW5mbyBpZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbc2VydmVyX2lkXSBUYWJsZUluZm8gc2VydmVyX2lkXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3RyYW5zYWN0aW9uX2lkXSBUYWJsZUluZm8gdHJhbnNhY3Rpb25faWRcbiAgICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVGFibGVJbmZvLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBUYWJsZUluZm8uXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElUYWJsZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5JVGFibGVJbmZvPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUYWJsZUluZm8ocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFRhYmxlSW5mbyBpZC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlRhYmxlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFRhYmxlSW5mby5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVGFibGVJbmZvIHNlcnZlcl9pZC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzZXJ2ZXJfaWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uVGFibGVJbmZvXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVGFibGVJbmZvLnByb3RvdHlwZS5zZXJ2ZXJfaWQgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUYWJsZUluZm8gdHJhbnNhY3Rpb25faWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB0cmFuc2FjdGlvbl9pZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUYWJsZUluZm8ucHJvdG90eXBlLnRyYW5zYWN0aW9uX2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBUYWJsZUluZm8gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm8udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uVGFibGVJbmZvXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLklUYWJsZUluZm99IG0gVGFibGVJbmZvIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFRhYmxlSW5mby5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uc2VydmVyX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzZXJ2ZXJfaWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLnN0cmluZyhtLnNlcnZlcl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS50cmFuc2FjdGlvbl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidHJhbnNhY3Rpb25faWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDY0KG0udHJhbnNhY3Rpb25faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIERlY29kZXMgYSBUYWJsZUluZm8gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm99IFRhYmxlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFRhYmxlSW5mby5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc2VydmVyX2lkID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRyYW5zYWN0aW9uX2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgYSBUYWJsZUluZm8gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm99IFRhYmxlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVGFibGVJbmZvLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlRhYmxlSW5mbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuc2VydmVyX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNlcnZlcl9pZCA9IFN0cmluZyhkLnNlcnZlcl9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC50cmFuc2FjdGlvbl9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtLnRyYW5zYWN0aW9uX2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC50cmFuc2FjdGlvbl9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudHJhbnNhY3Rpb25faWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJhbnNhY3Rpb25faWQgPSBwYXJzZUludChkLnRyYW5zYWN0aW9uX2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudHJhbnNhY3Rpb25faWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHJhbnNhY3Rpb25faWQgPSBkLnRyYW5zYWN0aW9uX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRyYW5zYWN0aW9uX2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRyYW5zYWN0aW9uX2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudHJhbnNhY3Rpb25faWQubG93ID4+PiAwLCBkLnRyYW5zYWN0aW9uX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgVGFibGVJbmZvIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlRhYmxlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5UYWJsZUluZm99IG0gVGFibGVJbmZvXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVGFibGVJbmZvLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNlcnZlcl9pZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudHJhbnNhY3Rpb25faWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnRyYW5zYWN0aW9uX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5zZXJ2ZXJfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic2VydmVyX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXJ2ZXJfaWQgPSBtLnNlcnZlcl9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnRyYW5zYWN0aW9uX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRyYW5zYWN0aW9uX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnRyYW5zYWN0aW9uX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnRyYW5zYWN0aW9uX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udHJhbnNhY3Rpb25faWQpIDogbS50cmFuc2FjdGlvbl9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudHJhbnNhY3Rpb25faWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udHJhbnNhY3Rpb25faWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0udHJhbnNhY3Rpb25faWQubG93ID4+PiAwLCBtLnRyYW5zYWN0aW9uX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnRyYW5zYWN0aW9uX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgVGFibGVJbmZvIHRvIEpTT04uXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uVGFibGVJbmZvXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUYWJsZUluZm8ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUYWJsZUluZm87XG4gICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgIHJvb20uSm9pblJvb20gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBKb2luUm9vbS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGludGVyZmFjZSBJSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3Jvb21fbm9dIEpvaW5Sb29tIHJvb21fbm9cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb21UeXBlfG51bGx9IFtyb29tX3R5cGVdIEpvaW5Sb29tIHJvb21fdHlwZVxuICAgICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBKb2luUm9vbS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgSm9pblJvb20uXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElKb2luUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLklKb2luUm9vbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSm9pblJvb20ocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEpvaW5Sb29tIHJvb21fbm8uXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gcm9vbV9ub1xuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Kb2luUm9vbVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIEpvaW5Sb29tLnByb3RvdHlwZS5yb29tX25vID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSm9pblJvb20gcm9vbV90eXBlLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5yb29tLlJvb21UeXBlfSByb29tX3R5cGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBKb2luUm9vbS5wcm90b3R5cGUucm9vbV90eXBlID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEpvaW5Sb29tIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb20udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSUpvaW5Sb29tfSBtIEpvaW5Sb29tIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIEpvaW5Sb29tLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5yb29tX25vICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyb29tX25vXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5zdHJpbmcobS5yb29tX25vKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJvb21fdHlwZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicm9vbV90eXBlXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLnJvb21fdHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRGVjb2RlcyBhIEpvaW5Sb29tIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Kb2luUm9vbX0gSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBKb2luUm9vbS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Kb2luUm9vbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucm9vbV9ubyA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb29tX3R5cGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBhIEpvaW5Sb29tIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Kb2luUm9vbX0gSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIEpvaW5Sb29tLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Kb2luUm9vbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb20oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnJvb21fbm8gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucm9vbV9ubyA9IFN0cmluZyhkLnJvb21fbm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkLnJvb21fdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk5PTkVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJvb21fdHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgSm9pblJvb20gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb219IG0gSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBKb2luUm9vbS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnJvb21fbm8gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucm9vbV90eXBlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gXCJOT05FXCIgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucm9vbV9ubyAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyb29tX25vXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yb29tX25vID0gbS5yb29tX25vO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucm9vbV90eXBlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInJvb21fdHlwZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucm9vbV90eXBlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYucm9vbS5Sb29tVHlwZVttLnJvb21fdHlwZV0gOiBtLnJvb21fdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEpvaW5Sb29tIHRvIEpTT04uXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2LnJvb20uSm9pblJvb21cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIEpvaW5Sb29tLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSm9pblJvb207XG4gICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByb29tO1xuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgc3J2Lm9hdXRoMiA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZSBvYXV0aDIuXG4gICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2XG4gICAgICAgICAgICAgICAgICogQG5hbWVzcGFjZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHZhciBvYXV0aDIgPSB7fTtcblxuICAgICAgICAgICAgICAgIG9hdXRoMi5Ub2tlbiA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFRva2VuLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSVRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFthY2Nlc3NfdG9rZW5dIFRva2VuIGFjY2Vzc190b2tlblxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdG9rZW5fdHlwZV0gVG9rZW4gdG9rZW5fdHlwZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbcmVmcmVzaF90b2tlbl0gVG9rZW4gcmVmcmVzaF90b2tlblxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtleHBpcmVzX2F0XSBUb2tlbiBleHBpcmVzX2F0XG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz58bnVsbH0gW3Njb3Blc10gVG9rZW4gc2NvcGVzXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPnxudWxsfSBbbWV0YWRhdGFdIFRva2VuIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFRva2VuLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyXG4gICAgICAgICAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFRva2VuLlxuICAgICAgICAgICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLklUb2tlbj19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVG9rZW4ocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY29wZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUb2tlbiBhY2Nlc3NfdG9rZW4uXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gYWNjZXNzX3Rva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUb2tlbi5wcm90b3R5cGUuYWNjZXNzX3Rva2VuID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVG9rZW4gdG9rZW5fdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSB0b2tlbl90eXBlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUb2tlbi5wcm90b3R5cGUudG9rZW5fdHlwZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFRva2VuIHJlZnJlc2hfdG9rZW4uXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gcmVmcmVzaF90b2tlblxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVG9rZW4ucHJvdG90eXBlLnJlZnJlc2hfdG9rZW4gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBUb2tlbiBleHBpcmVzX2F0LlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gZXhwaXJlc19hdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVG9rZW4ucHJvdG90eXBlLmV4cGlyZXNfYXQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVG9rZW4gc2NvcGVzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48c3RyaW5nPn0gc2NvcGVzXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUb2tlbi5wcm90b3R5cGUuc2NvcGVzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogVG9rZW4gbWV0YWRhdGEuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge09iamVjdC48c3RyaW5nLHN0cmluZz59IG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUb2tlbi5wcm90b3R5cGUubWV0YWRhdGEgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFRva2VuIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5nb2xvdHRlcnkuc3J2Lm9hdXRoMi5Ub2tlbi52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuSVRva2VufSBtIFRva2VuIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFRva2VuLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5hY2Nlc3NfdG9rZW4gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImFjY2Vzc190b2tlblwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0uYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnRva2VuX3R5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInRva2VuX3R5cGVcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLnN0cmluZyhtLnRva2VuX3R5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucmVmcmVzaF90b2tlbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicmVmcmVzaF90b2tlblwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigyNikuc3RyaW5nKG0ucmVmcmVzaF90b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5leHBpcmVzX2F0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJleHBpcmVzX2F0XCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQ2NChtLmV4cGlyZXNfYXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uc2NvcGVzICE9IG51bGwgJiYgbS5zY29wZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLnNjb3Blcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoNDIpLnN0cmluZyhtLnNjb3Blc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5tZXRhZGF0YSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWV0YWRhdGFcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDUwKS5mb3JrKCkudWludDMyKDEwKS5zdHJpbmcoa3NbaV0pLnVpbnQzMigxOCkuc3RyaW5nKG0ubWV0YWRhdGFba3NbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRGVjb2RlcyBhIFRva2VuIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2Lm9hdXRoMi5Ub2tlblxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW59IFRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVG9rZW4uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkuc3J2Lm9hdXRoMi5Ub2tlbigpLCBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYWNjZXNzX3Rva2VuID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRva2VuX3R5cGUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucmVmcmVzaF90b2tlbiA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5leHBpcmVzX2F0ID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0uc2NvcGVzICYmIG0uc2NvcGVzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNjb3BlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNjb3Blcy5wdXNoKHIuc3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5tZXRhZGF0YSA9PT0gJHV0aWwuZW1wdHlPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tdID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGEgVG9rZW4gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5nb2xvdHRlcnkuc3J2Lm9hdXRoMi5Ub2tlbn0gVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFRva2VuLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuanViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5hY2Nlc3NfdG9rZW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYWNjZXNzX3Rva2VuID0gU3RyaW5nKGQuYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnRva2VuX3R5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udG9rZW5fdHlwZSA9IFN0cmluZyhkLnRva2VuX3R5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQucmVmcmVzaF90b2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yZWZyZXNoX3Rva2VuID0gU3RyaW5nKGQucmVmcmVzaF90b2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5leHBpcmVzX2F0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uZXhwaXJlc19hdCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuZXhwaXJlc19hdCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuZXhwaXJlc19hdCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5leHBpcmVzX2F0ID0gcGFyc2VJbnQoZC5leHBpcmVzX2F0LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuZXhwaXJlc19hdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5leHBpcmVzX2F0ID0gZC5leHBpcmVzX2F0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmV4cGlyZXNfYXQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZXhwaXJlc19hdCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmV4cGlyZXNfYXQubG93ID4+PiAwLCBkLmV4cGlyZXNfYXQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnNjb3Blcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnNjb3BlcykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5qdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW4uc2NvcGVzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNjb3BlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5zY29wZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zY29wZXNbaV0gPSBTdHJpbmcoZC5zY29wZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLm1ldGFkYXRhICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuanViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuLm1ldGFkYXRhOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMoZC5tZXRhZGF0YSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YVtrc1tpXV0gPSBTdHJpbmcoZC5tZXRhZGF0YVtrc1tpXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBUb2tlbiBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5zcnYub2F1dGgyLlRva2VuXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5LnNydi5vYXV0aDIuVG9rZW59IG0gVG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBUb2tlbi50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNjb3BlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8ub2JqZWN0cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmFjY2Vzc190b2tlbiA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC50b2tlbl90eXBlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnJlZnJlc2hfdG9rZW4gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmV4cGlyZXNfYXQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmV4cGlyZXNfYXQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5hY2Nlc3NfdG9rZW4gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiYWNjZXNzX3Rva2VuXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5hY2Nlc3NfdG9rZW4gPSBtLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnRva2VuX3R5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidG9rZW5fdHlwZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudG9rZW5fdHlwZSA9IG0udG9rZW5fdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJlZnJlc2hfdG9rZW4gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicmVmcmVzaF90b2tlblwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucmVmcmVzaF90b2tlbiA9IG0ucmVmcmVzaF90b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmV4cGlyZXNfYXQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZXhwaXJlc19hdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5leHBpcmVzX2F0ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmV4cGlyZXNfYXQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5leHBpcmVzX2F0KSA6IG0uZXhwaXJlc19hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZXhwaXJlc19hdCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5leHBpcmVzX2F0KSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmV4cGlyZXNfYXQubG93ID4+PiAwLCBtLmV4cGlyZXNfYXQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZXhwaXJlc19hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnNjb3BlcyAmJiBtLnNjb3Blcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNjb3BlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5zY29wZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zY29wZXNbal0gPSBtLnNjb3Blc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga3MyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgJiYgKGtzMiA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrczIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YVtrczJbal1dID0gbS5tZXRhZGF0YVtrczJbal1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFRva2VuIHRvIEpTT04uXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkuc3J2Lm9hdXRoMi5Ub2tlblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgVG9rZW4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUb2tlbjtcbiAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9hdXRoMjtcbiAgICAgICAgICAgIH0pKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBzcnY7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgZ29sb3R0ZXJ5Lm1vZGVsID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIE5hbWVzcGFjZSBtb2RlbC5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5XG4gICAgICAgICAgICAgKiBAbmFtZXNwYWNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHt9O1xuXG4gICAgICAgICAgICBtb2RlbC5wcm9maWxlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogTmFtZXNwYWNlIHByb2ZpbGUuXG4gICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWxcbiAgICAgICAgICAgICAgICAgKiBAbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHByb2ZpbGUgPSB7fTtcblxuICAgICAgICAgICAgICAgIHByb2ZpbGUuUHJvZmlsZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFByb2ZpbGUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGludGVyZmFjZSBJUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gUHJvZmlsZSBpZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdXNlcm5hbWVdIFByb2ZpbGUgdXNlcm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW25pY2tuYW1lXSBQcm9maWxlIG5pY2tuYW1lXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtwcm92aW5jZV0gUHJvZmlsZSBwcm92aW5jZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbY2l0eV0gUHJvZmlsZSBjaXR5XG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtsb2NhdGlvbl0gUHJvZmlsZSBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbbG9jYXRpb25faWRdIFByb2ZpbGUgbG9jYXRpb25faWRcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2Rlc2NyaXB0aW9uXSBQcm9maWxlIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtwcm9maWxlX2ltYWdlX3VybF0gUHJvZmlsZSBwcm9maWxlX2ltYWdlX3VybFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbZ2VuZGVyXSBQcm9maWxlIGdlbmRlclxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtjcmVhdGVfdGltZV0gUHJvZmlsZSBjcmVhdGVfdGltZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFt1cGRhdGVkXSBQcm9maWxlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufG51bGx9IFtnZW9fZW5hYmxlZF0gUHJvZmlsZSBnZW9fZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Sb2xlVHlwZXxudWxsfSBbcm9sZV0gUHJvZmlsZSByb2xlXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtob21lcGFnZV0gUHJvZmlsZSBob21lcGFnZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLHN0cmluZz58bnVsbH0gW21ldGFkYXRhXSBQcm9maWxlIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLklPcmdhbml6YXRpb258bnVsbH0gW2dyb3VwXSBQcm9maWxlIGdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFByb2ZpbGUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUHJvZmlsZS5cbiAgICAgICAgICAgICAgICAgICAgICogQGltcGxlbWVudHMgSVByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLklQcm9maWxlPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBQcm9maWxlKHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlIGlkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gaWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvZmlsZSB1c2VybmFtZS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSB1c2VybmFtZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlLnByb3RvdHlwZS51c2VybmFtZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb2ZpbGUgbmlja25hbWUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbmlja25hbWVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUubmlja25hbWUgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlIHByb3ZpbmNlLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHByb3ZpbmNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGUucHJvdG90eXBlLnByb3ZpbmNlID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvZmlsZSBjaXR5LlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGNpdHlcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUuY2l0eSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb2ZpbGUgbG9jYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUubG9jYXRpb24gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlIGxvY2F0aW9uX2lkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGxvY2F0aW9uX2lkXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGUucHJvdG90eXBlLmxvY2F0aW9uX2lkID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvZmlsZSBkZXNjcmlwdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlLnByb3RvdHlwZS5kZXNjcmlwdGlvbiA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb2ZpbGUgcHJvZmlsZV9pbWFnZV91cmwuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gcHJvZmlsZV9pbWFnZV91cmxcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUucHJvZmlsZV9pbWFnZV91cmwgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlIGdlbmRlci5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBnZW5kZXJcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUuZ2VuZGVyID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvZmlsZSBjcmVhdGVfdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGNyZWF0ZV90aW1lXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGUucHJvdG90eXBlLmNyZWF0ZV90aW1lID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb2ZpbGUgdXBkYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHVwZGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUudXBkYXRlZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlIGdlb19lbmFibGVkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufSBnZW9fZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlLnByb3RvdHlwZS5nZW9fZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlIHJvbGUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Sb2xlVHlwZX0gcm9sZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlLnByb3RvdHlwZS5yb2xlID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogUHJvZmlsZSBob21lcGFnZS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBob21lcGFnZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlLnByb3RvdHlwZS5ob21lcGFnZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb2ZpbGUgbWV0YWRhdGEuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge09iamVjdC48c3RyaW5nLHN0cmluZz59IG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGUucHJvdG90eXBlLm1ldGFkYXRhID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb2ZpbGUgZ3JvdXAuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5JT3JnYW5pemF0aW9ufG51bGx8dW5kZWZpbmVkfSBncm91cFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlLnByb3RvdHlwZS5ncm91cCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBQcm9maWxlIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLklQcm9maWxlfSBtIFByb2ZpbGUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udXNlcm5hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVzZXJuYW1lXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS51c2VybmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5uaWNrbmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibmlja25hbWVcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMjYpLnN0cmluZyhtLm5pY2tuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnByb3ZpbmNlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJwcm92aW5jZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50MzIobS5wcm92aW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5jaXR5ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjaXR5XCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDQwKS5pbnQzMihtLmNpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubG9jYXRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImxvY2F0aW9uXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDUwKS5zdHJpbmcobS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5sb2NhdGlvbl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibG9jYXRpb25faWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoNTYpLmludDMyKG0ubG9jYXRpb25faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uZGVzY3JpcHRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImRlc2NyaXB0aW9uXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDY2KS5zdHJpbmcobS5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5wcm9maWxlX2ltYWdlX3VybCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicHJvZmlsZV9pbWFnZV91cmxcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoNzQpLnN0cmluZyhtLnByb2ZpbGVfaW1hZ2VfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmdlbmRlciAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZ2VuZGVyXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgyKS5zdHJpbmcobS5nZW5kZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uY3JlYXRlX3RpbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNyZWF0ZV90aW1lXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDg4KS5pbnQ2NChtLmNyZWF0ZV90aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnVwZGF0ZWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVwZGF0ZWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoOTYpLmludDY0KG0udXBkYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5nZW9fZW5hYmxlZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZ2VvX2VuYWJsZWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTA0KS5ib29sKG0uZ2VvX2VuYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucm9sZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicm9sZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMTIpLmludDMyKG0ucm9sZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5ob21lcGFnZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaG9tZXBhZ2VcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTIyKS5zdHJpbmcobS5ob21lcGFnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5tZXRhZGF0YSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWV0YWRhdGFcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDEzMCkuZm9yaygpLnVpbnQzMigxMCkuc3RyaW5nKGtzW2ldKS51aW50MzIoMTgpLnN0cmluZyhtLm1ldGFkYXRhW2tzW2ldXSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uZ3JvdXAgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImdyb3VwXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb24uZW5jb2RlKG0uZ3JvdXAsIHcudWludDMyKDEzOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBEZWNvZGVzIGEgUHJvZmlsZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZX0gUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlKCksIGs7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVzZXJuYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm5pY2tuYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnByb3ZpbmNlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY2l0eSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmxvY2F0aW9uID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmxvY2F0aW9uX2lkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZGVzY3JpcHRpb24gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucHJvZmlsZV9pbWFnZV91cmwgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmdlbmRlciA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY3JlYXRlX3RpbWUgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udXBkYXRlZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5nZW9fZW5hYmxlZCA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJvbGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uaG9tZXBhZ2UgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YVtrXSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ3JvdXAgPSAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uLmRlY29kZShyLCByLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGEgUHJvZmlsZSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZX0gUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnVzZXJuYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVzZXJuYW1lID0gU3RyaW5nKGQudXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubmlja25hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubmlja25hbWUgPSBTdHJpbmcoZC5uaWNrbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5wcm92aW5jZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5wcm92aW5jZSA9IGQucHJvdmluY2UgfCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuY2l0eSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jaXR5ID0gZC5jaXR5IHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmxvY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmxvY2F0aW9uID0gU3RyaW5nKGQubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubG9jYXRpb25faWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubG9jYXRpb25faWQgPSBkLmxvY2F0aW9uX2lkIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmRlc2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmRlc2NyaXB0aW9uID0gU3RyaW5nKGQuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQucHJvZmlsZV9pbWFnZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucHJvZmlsZV9pbWFnZV91cmwgPSBTdHJpbmcoZC5wcm9maWxlX2ltYWdlX3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5nZW5kZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ2VuZGVyID0gU3RyaW5nKGQuZ2VuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmNyZWF0ZV90aW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uY3JlYXRlX3RpbWUgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmNyZWF0ZV90aW1lKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jcmVhdGVfdGltZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jcmVhdGVfdGltZSA9IHBhcnNlSW50KGQuY3JlYXRlX3RpbWUsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jcmVhdGVfdGltZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jcmVhdGVfdGltZSA9IGQuY3JlYXRlX3RpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuY3JlYXRlX3RpbWUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY3JlYXRlX3RpbWUgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5jcmVhdGVfdGltZS5sb3cgPj4+IDAsIGQuY3JlYXRlX3RpbWUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnVwZGF0ZWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS51cGRhdGVkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC51cGRhdGVkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51cGRhdGVkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVwZGF0ZWQgPSBwYXJzZUludChkLnVwZGF0ZWQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51cGRhdGVkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVwZGF0ZWQgPSBkLnVwZGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudXBkYXRlZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS51cGRhdGVkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudXBkYXRlZC5sb3cgPj4+IDAsIGQudXBkYXRlZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuZ2VvX2VuYWJsZWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ2VvX2VuYWJsZWQgPSBCb29sZWFuKGQuZ2VvX2VuYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkLnJvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJVU0VSXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJCT1NTXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFTVBMT1lFRVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucm9sZSA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiS09MXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDQVBUQUlOXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmhvbWVwYWdlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmhvbWVwYWdlID0gU3RyaW5nKGQuaG9tZXBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQubWV0YWRhdGEgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZS5tZXRhZGF0YTogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKGQubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubWV0YWRhdGFba3NbaV1dID0gU3RyaW5nKGQubWV0YWRhdGFba3NbaV1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5ncm91cCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLmdyb3VwICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGUuZ3JvdXA6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmdyb3VwID0gJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvbi5mcm9tT2JqZWN0KGQuZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFByb2ZpbGUgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZX0gbSBQcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8ub2JqZWN0cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC51c2VybmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5uaWNrbmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wcm92aW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5jaXR5ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxvY2F0aW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxvY2F0aW9uX2lkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnByb2ZpbGVfaW1hZ2VfdXJsID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmdlbmRlciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuY3JlYXRlX3RpbWUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmNyZWF0ZV90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnVwZGF0ZWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnVwZGF0ZWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5nZW9fZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucm9sZSA9IG8uZW51bXMgPT09IFN0cmluZyA/IFwiVVNFUlwiIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmhvbWVwYWdlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmdyb3VwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udXNlcm5hbWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidXNlcm5hbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnVzZXJuYW1lID0gbS51c2VybmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLm5pY2tuYW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm5pY2tuYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5uaWNrbmFtZSA9IG0ubmlja25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5wcm92aW5jZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJwcm92aW5jZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHJvdmluY2UgPSBtLnByb3ZpbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uY2l0eSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjaXR5XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5jaXR5ID0gbS5jaXR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubG9jYXRpb24gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibG9jYXRpb25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxvY2F0aW9uID0gbS5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmxvY2F0aW9uX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImxvY2F0aW9uX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5sb2NhdGlvbl9pZCA9IG0ubG9jYXRpb25faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5kZXNjcmlwdGlvbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkZXNjcmlwdGlvblwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZGVzY3JpcHRpb24gPSBtLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucHJvZmlsZV9pbWFnZV91cmwgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicHJvZmlsZV9pbWFnZV91cmxcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnByb2ZpbGVfaW1hZ2VfdXJsID0gbS5wcm9maWxlX2ltYWdlX3VybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmdlbmRlciAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJnZW5kZXJcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmdlbmRlciA9IG0uZ2VuZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uY3JlYXRlX3RpbWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY3JlYXRlX3RpbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uY3JlYXRlX3RpbWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuY3JlYXRlX3RpbWUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5jcmVhdGVfdGltZSkgOiBtLmNyZWF0ZV90aW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5jcmVhdGVfdGltZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5jcmVhdGVfdGltZSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5jcmVhdGVfdGltZS5sb3cgPj4+IDAsIG0uY3JlYXRlX3RpbWUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uY3JlYXRlX3RpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS51cGRhdGVkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVwZGF0ZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udXBkYXRlZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC51cGRhdGVkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udXBkYXRlZCkgOiBtLnVwZGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnVwZGF0ZWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udXBkYXRlZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS51cGRhdGVkLmxvdyA+Pj4gMCwgbS51cGRhdGVkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnVwZGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5nZW9fZW5hYmxlZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJnZW9fZW5hYmxlZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZ2VvX2VuYWJsZWQgPSBtLmdlb19lbmFibGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucm9sZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyb2xlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yb2xlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlJvbGVUeXBlW20ucm9sZV0gOiBtLnJvbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5ob21lcGFnZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJob21lcGFnZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaG9tZXBhZ2UgPSBtLmhvbWVwYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhICYmIChrczIgPSBPYmplY3Qua2V5cyhtLm1ldGFkYXRhKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga3MyLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubWV0YWRhdGFba3MyW2pdXSA9IG0ubWV0YWRhdGFba3MyW2pdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5ncm91cCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJncm91cFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZ3JvdXAgPSAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uLnRvT2JqZWN0KG0uZ3JvdXAsIG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgUHJvZmlsZSB0byBKU09OLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb2ZpbGU7XG4gICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgIHByb2ZpbGUuT3JnYW5pemF0aW9uID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGFuIE9yZ2FuaXphdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElPcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIE9yZ2FuaXphdGlvbiBpZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdHlwZV0gT3JnYW5pemF0aW9uIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbc2FsZXNfc2hvcF9pZF0gT3JnYW5pemF0aW9uIHNhbGVzX3Nob3BfaWRcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbb3duZXJfaWRdIE9yZ2FuaXphdGlvbiBvd25lcl9pZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbb3duZXJfbmFtZV0gT3JnYW5pemF0aW9uIG93bmVyX25hbWVcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2xpc2Vuc2VfaWRdIE9yZ2FuaXphdGlvbiBsaXNlbnNlX2lkXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtwaG9uZV0gT3JnYW5pemF0aW9uIHBob25lXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1c2VybmFtZV0gT3JnYW5pemF0aW9uIHVzZXJuYW1lXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFticmllZl9uYW1lXSBPcmdhbml6YXRpb24gYnJpZWZfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbcXJjb2RlX3VybF0gT3JnYW5pemF0aW9uIHFyY29kZV91cmxcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3NoYXJlX3VybF0gT3JnYW5pemF0aW9uIHNoYXJlX3VybFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbcHJvZmlsZV9pbWFnZV91cmxdIE9yZ2FuaXphdGlvbiBwcm9maWxlX2ltYWdlX3VybFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbaG9tZXBhZ2VdIE9yZ2FuaXphdGlvbiBob21lcGFnZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbYWRkcmVzc10gT3JnYW5pemF0aW9uIGFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fG51bGx9IFttZXRhZGF0YV0gT3JnYW5pemF0aW9uIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtkZXNjcmlwdGlvbl0gT3JnYW5pemF0aW9uIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtsYXRdIE9yZ2FuaXphdGlvbiBsYXRcbiAgICAgICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2xvbl0gT3JnYW5pemF0aW9uIGxvblxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbbG9jYXRpb25dIE9yZ2FuaXphdGlvbiBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbbG9jYXRpb25faWRdIE9yZ2FuaXphdGlvbiBsb2NhdGlvbl9pZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtjcmVhdGVfdGltZV0gT3JnYW5pemF0aW9uIGNyZWF0ZV90aW1lXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3VwZGF0ZWRdIE9yZ2FuaXphdGlvbiB1cGRhdGVkXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlJvbGVUeXBlfG51bGx9IFtyb2xlXSBPcmdhbml6YXRpb24gcm9sZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUmlnaHRUeXBlPnxudWxsfSBbcmlnaHRzXSBPcmdhbml6YXRpb24gcmlnaHRzXG4gICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IE9yZ2FuaXphdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYW4gT3JnYW5pemF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJT3JnYW5pemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5JT3JnYW5pemF0aW9uPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBPcmdhbml6YXRpb24ocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yaWdodHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gaWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIHR5cGUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gdHlwZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUudHlwZSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBzYWxlc19zaG9wX2lkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gc2FsZXNfc2hvcF9pZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUuc2FsZXNfc2hvcF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gb3duZXJfaWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBvd25lcl9pZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUub3duZXJfaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIG93bmVyX25hbWUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gb3duZXJfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUub3duZXJfbmFtZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBsaXNlbnNlX2lkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGxpc2Vuc2VfaWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLmxpc2Vuc2VfaWQgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gcGhvbmUuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gcGhvbmVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLnBob25lID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIHVzZXJuYW1lLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVzZXJuYW1lXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uLnByb3RvdHlwZS51c2VybmFtZSA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBicmllZl9uYW1lLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGJyaWVmX25hbWVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLmJyaWVmX25hbWUgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gcXJjb2RlX3VybC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBxcmNvZGVfdXJsXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uLnByb3RvdHlwZS5xcmNvZGVfdXJsID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIHNoYXJlX3VybC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzaGFyZV91cmxcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLnNoYXJlX3VybCA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBwcm9maWxlX2ltYWdlX3VybC5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBwcm9maWxlX2ltYWdlX3VybFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUucHJvZmlsZV9pbWFnZV91cmwgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gaG9tZXBhZ2UuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gaG9tZXBhZ2VcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLmhvbWVwYWdlID0gXCJcIjtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIGFkZHJlc3MuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUuYWRkcmVzcyA9IFwiXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBtZXRhZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPn0gbWV0YWRhdGFcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLm1ldGFkYXRhID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBkZXNjcmlwdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUuZGVzY3JpcHRpb24gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gbGF0LlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGxhdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUubGF0ID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIGxvbi5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBsb25cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLmxvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiBsb2NhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBsb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUubG9jYXRpb24gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gbG9jYXRpb25faWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gbG9jYXRpb25faWRcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLmxvY2F0aW9uX2lkID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIGNyZWF0ZV90aW1lLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gY3JlYXRlX3RpbWVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLmNyZWF0ZV90aW1lID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIE9yZ2FuaXphdGlvbiB1cGRhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUudXBkYXRlZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb24gcm9sZS5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlJvbGVUeXBlfSByb2xlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uLnByb3RvdHlwZS5yb2xlID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogT3JnYW5pemF0aW9uIHJpZ2h0cy5cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5SaWdodFR5cGU+fSByaWdodHNcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24ucHJvdG90eXBlLnJpZ2h0cyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBPcmdhbml6YXRpb24gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvbi52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLklPcmdhbml6YXRpb259IG0gT3JnYW5pemF0aW9uIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50MzIobS50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnNhbGVzX3Nob3BfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInNhbGVzX3Nob3BfaWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDY0KG0uc2FsZXNfc2hvcF9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5vd25lcl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwib3duZXJfaWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMzIpLmludDY0KG0ub3duZXJfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ub3duZXJfbmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwib3duZXJfbmFtZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMig0Mikuc3RyaW5nKG0ub3duZXJfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5saXNlbnNlX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJsaXNlbnNlX2lkXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDUwKS5zdHJpbmcobS5saXNlbnNlX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnBob25lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJwaG9uZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMig1OCkuc3RyaW5nKG0ucGhvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udXNlcm5hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVzZXJuYW1lXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDY2KS5zdHJpbmcobS51c2VybmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5icmllZl9uYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJicmllZl9uYW1lXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDc0KS5zdHJpbmcobS5icmllZl9uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnFyY29kZV91cmwgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInFyY29kZV91cmxcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoODIpLnN0cmluZyhtLnFyY29kZV91cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uc2hhcmVfdXJsICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzaGFyZV91cmxcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoOTApLnN0cmluZyhtLnNoYXJlX3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5wcm9maWxlX2ltYWdlX3VybCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicHJvZmlsZV9pbWFnZV91cmxcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoOTgpLnN0cmluZyhtLnByb2ZpbGVfaW1hZ2VfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmhvbWVwYWdlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJob21lcGFnZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMDYpLnN0cmluZyhtLmhvbWVwYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmFkZHJlc3MgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImFkZHJlc3NcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTE0KS5zdHJpbmcobS5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtZXRhZGF0YVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMobS5tZXRhZGF0YSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTIyKS5mb3JrKCkudWludDMyKDEwKS5zdHJpbmcoa3NbaV0pLnVpbnQzMigxOCkuc3RyaW5nKG0ubWV0YWRhdGFba3NbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5kZXNjcmlwdGlvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZGVzY3JpcHRpb25cIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTMwKS5zdHJpbmcobS5kZXNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5sYXQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImxhdFwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxMzcpLmRvdWJsZShtLmxhdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5sb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImxvblwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxNDUpLmRvdWJsZShtLmxvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5sb2NhdGlvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibG9jYXRpb25cIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTU0KS5zdHJpbmcobS5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5sb2NhdGlvbl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibG9jYXRpb25faWRcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTYwKS5pbnQzMihtLmxvY2F0aW9uX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmNyZWF0ZV90aW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjcmVhdGVfdGltZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxNjgpLmludDY0KG0uY3JlYXRlX3RpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udXBkYXRlZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidXBkYXRlZFwiKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxNzYpLmludDY0KG0udXBkYXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5yb2xlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyb2xlXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE4NCkuaW50MzIobS5yb2xlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJpZ2h0cyAhPSBudWxsICYmIG0ucmlnaHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE5NCkuZm9yaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5yaWdodHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcuaW50MzIobS5yaWdodHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRGVjb2RlcyBhbiBPcmdhbml6YXRpb24gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9ufSBPcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb24oKSwgaztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHlwZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnNhbGVzX3Nob3BfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5vd25lcl9pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm93bmVyX25hbWUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubGlzZW5zZV9pZCA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5waG9uZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS51c2VybmFtZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5icmllZl9uYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5xcmNvZGVfdXJsID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zaGFyZV91cmwgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnByb2ZpbGVfaW1hZ2VfdXJsID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5ob21lcGFnZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYWRkcmVzcyA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5tZXRhZGF0YSA9PT0gJHV0aWwuZW1wdHlPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tdID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5kZXNjcmlwdGlvbiA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubGF0ID0gci5kb3VibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5sb24gPSByLmRvdWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmxvY2F0aW9uID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5sb2NhdGlvbl9pZCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jcmVhdGVfdGltZSA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS51cGRhdGVkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJvbGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ucmlnaHRzICYmIG0ucmlnaHRzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJpZ2h0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yaWdodHMucHVzaChyLmludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucmlnaHRzLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDcmVhdGVzIGFuIE9yZ2FuaXphdGlvbiBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb259IE9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udHlwZSA9IGQudHlwZSB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5zYWxlc19zaG9wX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uc2FsZXNfc2hvcF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuc2FsZXNfc2hvcF9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc2FsZXNfc2hvcF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zYWxlc19zaG9wX2lkID0gcGFyc2VJbnQoZC5zYWxlc19zaG9wX2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc2FsZXNfc2hvcF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zYWxlc19zaG9wX2lkID0gZC5zYWxlc19zaG9wX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnNhbGVzX3Nob3BfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc2FsZXNfc2hvcF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnNhbGVzX3Nob3BfaWQubG93ID4+PiAwLCBkLnNhbGVzX3Nob3BfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLm93bmVyX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0ub3duZXJfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLm93bmVyX2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5vd25lcl9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5vd25lcl9pZCA9IHBhcnNlSW50KGQub3duZXJfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5vd25lcl9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5vd25lcl9pZCA9IGQub3duZXJfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQub3duZXJfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ub3duZXJfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5vd25lcl9pZC5sb3cgPj4+IDAsIGQub3duZXJfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLm93bmVyX25hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ub3duZXJfbmFtZSA9IFN0cmluZyhkLm93bmVyX25hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubGlzZW5zZV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5saXNlbnNlX2lkID0gU3RyaW5nKGQubGlzZW5zZV9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5waG9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5waG9uZSA9IFN0cmluZyhkLnBob25lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnVzZXJuYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVzZXJuYW1lID0gU3RyaW5nKGQudXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQuYnJpZWZfbmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5icmllZl9uYW1lID0gU3RyaW5nKGQuYnJpZWZfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5xcmNvZGVfdXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnFyY29kZV91cmwgPSBTdHJpbmcoZC5xcmNvZGVfdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnNoYXJlX3VybCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zaGFyZV91cmwgPSBTdHJpbmcoZC5zaGFyZV91cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQucHJvZmlsZV9pbWFnZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucHJvZmlsZV9pbWFnZV91cmwgPSBTdHJpbmcoZC5wcm9maWxlX2ltYWdlX3VybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5ob21lcGFnZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5ob21lcGFnZSA9IFN0cmluZyhkLmhvbWVwYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmFkZHJlc3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYWRkcmVzcyA9IFN0cmluZyhkLmFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQubWV0YWRhdGEgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uLm1ldGFkYXRhOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMoZC5tZXRhZGF0YSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tZXRhZGF0YVtrc1tpXV0gPSBTdHJpbmcoZC5tZXRhZGF0YVtrc1tpXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmRlc2NyaXB0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmRlc2NyaXB0aW9uID0gU3RyaW5nKGQuZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubGF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmxhdCA9IE51bWJlcihkLmxhdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5sb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubG9uID0gTnVtYmVyKGQubG9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmxvY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmxvY2F0aW9uID0gU3RyaW5nKGQubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQubG9jYXRpb25faWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ubG9jYXRpb25faWQgPSBkLmxvY2F0aW9uX2lkIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmNyZWF0ZV90aW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uY3JlYXRlX3RpbWUgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmNyZWF0ZV90aW1lKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jcmVhdGVfdGltZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jcmVhdGVfdGltZSA9IHBhcnNlSW50KGQuY3JlYXRlX3RpbWUsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jcmVhdGVfdGltZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jcmVhdGVfdGltZSA9IGQuY3JlYXRlX3RpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuY3JlYXRlX3RpbWUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY3JlYXRlX3RpbWUgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5jcmVhdGVfdGltZS5sb3cgPj4+IDAsIGQuY3JlYXRlX3RpbWUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnVwZGF0ZWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS51cGRhdGVkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC51cGRhdGVkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51cGRhdGVkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVwZGF0ZWQgPSBwYXJzZUludChkLnVwZGF0ZWQsIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51cGRhdGVkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnVwZGF0ZWQgPSBkLnVwZGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudXBkYXRlZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS51cGRhdGVkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudXBkYXRlZC5sb3cgPj4+IDAsIGQudXBkYXRlZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkLnJvbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJVU0VSXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJCT1NTXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFTVBMT1lFRVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucm9sZSA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiS09MXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDQVBUQUlOXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yb2xlID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLnJpZ2h0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnJpZ2h0cykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uLnJpZ2h0czogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yaWdodHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQucmlnaHRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZC5yaWdodHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFWQUlMQUJMRVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJpZ2h0c1tpXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkRJU0FCTEVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yaWdodHNbaV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJGT1JCSURERU5fQ0hBVFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnJpZ2h0c1tpXSA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkZPUkJJRERFTl9QVUJMSVNIXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucmlnaHRzW2ldID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQkxBQ0tMSVNUXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucmlnaHRzW2ldID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRk9SQklEREVOX09QRVJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5yaWdodHNbaV0gPSA1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGFuIE9yZ2FuaXphdGlvbiBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvbn0gbSBPcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb24udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yaWdodHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLm9iamVjdHMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc2FsZXNfc2hvcF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc2FsZXNfc2hvcF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5vd25lcl9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQub3duZXJfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5vd25lcl9uYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxpc2Vuc2VfaWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGhvbmUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudXNlcm5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuYnJpZWZfbmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5xcmNvZGVfdXJsID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNoYXJlX3VybCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wcm9maWxlX2ltYWdlX3VybCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ob21lcGFnZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5hZGRyZXNzID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxhdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5sb24gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubG9jYXRpb24gPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQubG9jYXRpb25faWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmNyZWF0ZV90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5jcmVhdGVfdGltZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC51cGRhdGVkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC51cGRhdGVkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucm9sZSA9IG8uZW51bXMgPT09IFN0cmluZyA/IFwiVVNFUlwiIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC50eXBlID0gbS50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uc2FsZXNfc2hvcF9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzYWxlc19zaG9wX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnNhbGVzX3Nob3BfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuc2FsZXNfc2hvcF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnNhbGVzX3Nob3BfaWQpIDogbS5zYWxlc19zaG9wX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zYWxlc19zaG9wX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnNhbGVzX3Nob3BfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc2FsZXNfc2hvcF9pZC5sb3cgPj4+IDAsIG0uc2FsZXNfc2hvcF9pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zYWxlc19zaG9wX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ub3duZXJfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwib3duZXJfaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ub3duZXJfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQub3duZXJfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5vd25lcl9pZCkgOiBtLm93bmVyX2lkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5vd25lcl9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5vd25lcl9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5vd25lcl9pZC5sb3cgPj4+IDAsIG0ub3duZXJfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ub3duZXJfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5vd25lcl9uYW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm93bmVyX25hbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm93bmVyX25hbWUgPSBtLm93bmVyX25hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5saXNlbnNlX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImxpc2Vuc2VfaWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxpc2Vuc2VfaWQgPSBtLmxpc2Vuc2VfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5waG9uZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJwaG9uZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucGhvbmUgPSBtLnBob25lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0udXNlcm5hbWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidXNlcm5hbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnVzZXJuYW1lID0gbS51c2VybmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmJyaWVmX25hbWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiYnJpZWZfbmFtZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuYnJpZWZfbmFtZSA9IG0uYnJpZWZfbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnFyY29kZV91cmwgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicXJjb2RlX3VybFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucXJjb2RlX3VybCA9IG0ucXJjb2RlX3VybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnNoYXJlX3VybCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzaGFyZV91cmxcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNoYXJlX3VybCA9IG0uc2hhcmVfdXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucHJvZmlsZV9pbWFnZV91cmwgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicHJvZmlsZV9pbWFnZV91cmxcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnByb2ZpbGVfaW1hZ2VfdXJsID0gbS5wcm9maWxlX2ltYWdlX3VybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmhvbWVwYWdlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImhvbWVwYWdlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5ob21lcGFnZSA9IG0uaG9tZXBhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5hZGRyZXNzICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImFkZHJlc3NcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmFkZHJlc3MgPSBtLmFkZHJlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga3MyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubWV0YWRhdGEgJiYgKGtzMiA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrczIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5tZXRhZGF0YVtrczJbal1dID0gbS5tZXRhZGF0YVtrczJbal1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmRlc2NyaXB0aW9uICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImRlc2NyaXB0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5kZXNjcmlwdGlvbiA9IG0uZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5sYXQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibGF0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5sYXQgPSBvLmpzb24gJiYgIWlzRmluaXRlKG0ubGF0KSA/IFN0cmluZyhtLmxhdCkgOiBtLmxhdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmxvbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJsb25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxvbiA9IG8uanNvbiAmJiAhaXNGaW5pdGUobS5sb24pID8gU3RyaW5nKG0ubG9uKSA6IG0ubG9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ubG9jYXRpb24gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibG9jYXRpb25cIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmxvY2F0aW9uID0gbS5sb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmxvY2F0aW9uX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImxvY2F0aW9uX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5sb2NhdGlvbl9pZCA9IG0ubG9jYXRpb25faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5jcmVhdGVfdGltZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjcmVhdGVfdGltZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5jcmVhdGVfdGltZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5jcmVhdGVfdGltZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmNyZWF0ZV90aW1lKSA6IG0uY3JlYXRlX3RpbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmNyZWF0ZV90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmNyZWF0ZV90aW1lKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmNyZWF0ZV90aW1lLmxvdyA+Pj4gMCwgbS5jcmVhdGVfdGltZS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5jcmVhdGVfdGltZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnVwZGF0ZWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidXBkYXRlZFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS51cGRhdGVkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnVwZGF0ZWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS51cGRhdGVkKSA6IG0udXBkYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQudXBkYXRlZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS51cGRhdGVkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnVwZGF0ZWQubG93ID4+PiAwLCBtLnVwZGF0ZWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0udXBkYXRlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJvbGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicm9sZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucm9sZSA9IG8uZW51bXMgPT09IFN0cmluZyA/ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Sb2xlVHlwZVttLnJvbGVdIDogbS5yb2xlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucmlnaHRzICYmIG0ucmlnaHRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucmlnaHRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnJpZ2h0cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnJpZ2h0c1tqXSA9IG8uZW51bXMgPT09IFN0cmluZyA/ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5SaWdodFR5cGVbbS5yaWdodHNbal1dIDogbS5yaWdodHNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgT3JnYW5pemF0aW9uIHRvIEpTT04uXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9yZ2FuaXphdGlvbjtcbiAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUm9sZVR5cGUgZW51bS5cbiAgICAgICAgICAgICAgICAgKiBAbmFtZSBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUm9sZVR5cGVcbiAgICAgICAgICAgICAgICAgKiBAZW51bSB7bnVtYmVyfVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVU0VSPTAgVVNFUiB2YWx1ZVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBCT1NTPTEgQk9TUyB2YWx1ZVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFTVBMT1lFRT0yIEVNUExPWUVFIHZhbHVlXG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IEtPTD0zIEtPTCB2YWx1ZVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBDQVBUQUlOPTQgQ0FQVEFJTiB2YWx1ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHByb2ZpbGUuUm9sZVR5cGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNCeUlkID0ge30sIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUodmFsdWVzQnlJZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJVU0VSXCJdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIkJPU1NcIl0gPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsyXSA9IFwiRU1QTE9ZRUVcIl0gPSAyO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFszXSA9IFwiS09MXCJdID0gMztcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNF0gPSBcIkNBUFRBSU5cIl0gPSA0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICAgICAgICAgIH0pKCk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSaWdodFR5cGUgZW51bS5cbiAgICAgICAgICAgICAgICAgKiBAbmFtZSBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUmlnaHRUeXBlXG4gICAgICAgICAgICAgICAgICogQGVudW0ge251bWJlcn1cbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gQVZBSUxBQkxFPTAgQVZBSUxBQkxFIHZhbHVlXG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IERJU0FCTEU9MSBESVNBQkxFIHZhbHVlXG4gICAgICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IEZPUkJJRERFTl9DSEFUPTIgRk9SQklEREVOX0NIQVQgdmFsdWVcbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gRk9SQklEREVOX1BVQkxJU0g9MyBGT1JCSURERU5fUFVCTElTSCB2YWx1ZVxuICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBCTEFDS0xJU1Q9NCBCTEFDS0xJU1QgdmFsdWVcbiAgICAgICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gRk9SQklEREVOX09QRVI9NSBGT1JCSURERU5fT1BFUiB2YWx1ZVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHByb2ZpbGUuUmlnaHRUeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiQVZBSUxBQkxFXCJdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIkRJU0FCTEVcIl0gPSAxO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsyXSA9IFwiRk9SQklEREVOX0NIQVRcIl0gPSAyO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFszXSA9IFwiRk9SQklEREVOX1BVQkxJU0hcIl0gPSAzO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs0XSA9IFwiQkxBQ0tMSVNUXCJdID0gNDtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNV0gPSBcIkZPUkJJRERFTl9PUEVSXCJdID0gNTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgcHJvZmlsZS5Qcm9maWxlUmVzcG9uc2UgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBQcm9maWxlUmVzcG9uc2UuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGludGVyZmFjZSBJUHJvZmlsZVJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5JUHJvZmlsZT58bnVsbH0gW3Byb2ZpbGVzXSBQcm9maWxlUmVzcG9uc2UgcHJvZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUHJvZmlsZVJlc3BvbnNlLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFByb2ZpbGVSZXNwb25zZS5cbiAgICAgICAgICAgICAgICAgICAgICogQGltcGxlbWVudHMgSVByb2ZpbGVSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuSVByb2ZpbGVSZXNwb25zZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUHJvZmlsZVJlc3BvbnNlKHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9maWxlUmVzcG9uc2UgcHJvZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuSVByb2ZpbGU+fSBwcm9maWxlc1xuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGVSZXNwb25zZS5wcm90b3R5cGUucHJvZmlsZXMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUHJvZmlsZVJlc3BvbnNlIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlUmVzcG9uc2UudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5JUHJvZmlsZVJlc3BvbnNlfSBtIFByb2ZpbGVSZXNwb25zZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlUmVzcG9uc2UuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnByb2ZpbGVzICE9IG51bGwgJiYgbS5wcm9maWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ucHJvZmlsZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlLmVuY29kZShtLnByb2ZpbGVzW2ldLCB3LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBEZWNvZGVzIGEgUHJvZmlsZVJlc3BvbnNlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVSZXNwb25zZX0gUHJvZmlsZVJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZVJlc3BvbnNlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5wcm9maWxlcyAmJiBtLnByb2ZpbGVzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnByb2ZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucHJvZmlsZXMucHVzaCgkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZS5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgYSBQcm9maWxlUmVzcG9uc2UgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVJlc3BvbnNlfSBQcm9maWxlUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIFByb2ZpbGVSZXNwb25zZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlUmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZVJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5wcm9maWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnByb2ZpbGVzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlUmVzcG9uc2UucHJvZmlsZXM6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0ucHJvZmlsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQucHJvZmlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLnByb2ZpbGVzW2ldICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlUmVzcG9uc2UucHJvZmlsZXM6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5wcm9maWxlc1tpXSA9ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Qcm9maWxlLmZyb21PYmplY3QoZC5wcm9maWxlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFByb2ZpbGVSZXNwb25zZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVSZXNwb25zZX0gbSBQcm9maWxlUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBQcm9maWxlUmVzcG9uc2UudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wcm9maWxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucHJvZmlsZXMgJiYgbS5wcm9maWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnByb2ZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnByb2ZpbGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHJvZmlsZXNbal0gPSAkcm9vdC5qdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuUHJvZmlsZS50b09iamVjdChtLnByb2ZpbGVzW2pdLCBvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBQcm9maWxlUmVzcG9uc2UgdG8gSlNPTi5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLlByb2ZpbGVSZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgUHJvZmlsZVJlc3BvbnNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvZmlsZVJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pKCk7XG5cbiAgICAgICAgICAgICAgICBwcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGFuIE9yZ2FuaXphdGlvblJlc3BvbnNlLlxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSU9yZ2FuaXphdGlvblJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5JT3JnYW5pemF0aW9uPnxudWxsfSBbZ3JvdXBzXSBPcmdhbml6YXRpb25SZXNwb25zZSBncm91cHNcbiAgICAgICAgICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgT3JnYW5pemF0aW9uUmVzcG9uc2UuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGVcbiAgICAgICAgICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGFuIE9yZ2FuaXphdGlvblJlc3BvbnNlLlxuICAgICAgICAgICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJT3JnYW5pemF0aW9uUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLklPcmdhbml6YXRpb25SZXNwb25zZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gT3JnYW5pemF0aW9uUmVzcG9uc2UocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBPcmdhbml6YXRpb25SZXNwb25zZSBncm91cHMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuSU9yZ2FuaXphdGlvbj59IGdyb3Vwc1xuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uUmVzcG9uc2UucHJvdG90eXBlLmdyb3VwcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBPcmdhbml6YXRpb25SZXNwb25zZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uUmVzcG9uc2UudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25SZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7anViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLklPcmdhbml6YXRpb25SZXNwb25zZX0gbSBPcmdhbml6YXRpb25SZXNwb25zZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb25SZXNwb25zZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uZ3JvdXBzICE9IG51bGwgJiYgbS5ncm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmdyb3Vwcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvbi5lbmNvZGUobS5ncm91cHNbaV0sIHcudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIERlY29kZXMgYW4gT3JnYW5pemF0aW9uUmVzcG9uc2UgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25SZXNwb25zZX0gT3JnYW5pemF0aW9uUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb25SZXNwb25zZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5ncm91cHMgJiYgbS5ncm91cHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ3JvdXBzLnB1c2goJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvbi5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgYW4gT3JnYW5pemF0aW9uUmVzcG9uc2UgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge2p1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25SZXNwb25zZX0gT3JnYW5pemF0aW9uUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIE9yZ2FuaXphdGlvblJlc3BvbnNlLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5ncm91cHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5ncm91cHMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlLmdyb3VwczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5ncm91cHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuZ3JvdXBzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5ncm91cHNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuanViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlLmdyb3Vwczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmdyb3Vwc1tpXSA9ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb24uZnJvbU9iamVjdChkLmdyb3Vwc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBPcmdhbml6YXRpb25SZXNwb25zZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWVtYmVyb2YganViaWFuLmdvbG90dGVyeS5tb2RlbC5wcm9maWxlLk9yZ2FuaXphdGlvblJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtqdWJpYW4uZ29sb3R0ZXJ5Lm1vZGVsLnByb2ZpbGUuT3JnYW5pemF0aW9uUmVzcG9uc2V9IG0gT3JnYW5pemF0aW9uUmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBPcmdhbml6YXRpb25SZXNwb25zZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmdyb3VwcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0uZ3JvdXBzICYmIG0uZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuZ3JvdXBzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmdyb3Vwcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmdyb3Vwc1tqXSA9ICRyb290Lmp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb24udG9PYmplY3QobS5ncm91cHNbal0sIG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE9yZ2FuaXphdGlvblJlc3BvbnNlIHRvIEpTT04uXG4gICAgICAgICAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIGp1Ymlhbi5nb2xvdHRlcnkubW9kZWwucHJvZmlsZS5Pcmdhbml6YXRpb25SZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgT3JnYW5pemF0aW9uUmVzcG9uc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPcmdhbml6YXRpb25SZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2ZpbGU7XG4gICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgcmV0dXJuIGdvbG90dGVyeTtcbiAgICB9KSgpO1xuXG4gICAgcmV0dXJuIGp1Ymlhbjtcbn0pKCk7XG5cbiRyb290LmZhcm0gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBOYW1lc3BhY2UgZmFybS5cbiAgICAgKiBAZXhwb3J0cyBmYXJtXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIHZhciBmYXJtID0ge307XG5cbiAgICBmYXJtLlJlcUdhbWVXb3JkcyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcUdhbWVXb3Jkcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxR2FtZVdvcmRzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1c2VyX2lkXSBSZXFHYW1lV29yZHMgdXNlcl9pZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttb2RlXSBSZXFHYW1lV29yZHMgbW9kZVxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbbW9kZV9wYXJhbV0gUmVxR2FtZVdvcmRzIG1vZGVfcGFyYW1cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbZ2FtZV90eXBlXSBSZXFHYW1lV29yZHMgZ2FtZV90eXBlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcUdhbWVXb3Jkcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxR2FtZVdvcmRzLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxR2FtZVdvcmRzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcUdhbWVXb3Jkcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxR2FtZVdvcmRzKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFHYW1lV29yZHMgdXNlcl9pZC5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSB1c2VyX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUdhbWVXb3Jkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVXb3Jkcy5wcm90b3R5cGUudXNlcl9pZCA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUdhbWVXb3JkcyBtb2RlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gbW9kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lV29yZHNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lV29yZHMucHJvdG90eXBlLm1vZGUgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxR2FtZVdvcmRzIG1vZGVfcGFyYW0uXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbW9kZV9wYXJhbVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lV29yZHNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lV29yZHMucHJvdG90eXBlLm1vZGVfcGFyYW0gPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFHYW1lV29yZHMgZ2FtZV90eXBlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gZ2FtZV90eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUdhbWVXb3Jkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVXb3Jkcy5wcm90b3R5cGUuZ2FtZV90eXBlID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFHYW1lV29yZHMgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXFHYW1lV29yZHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVdvcmRzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFHYW1lV29yZHN9IG0gUmVxR2FtZVdvcmRzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVXb3Jkcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0udXNlcl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidXNlcl9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0udXNlcl9pZCk7XG4gICAgICAgICAgICBpZiAobS5tb2RlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtb2RlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLm1vZGUpO1xuICAgICAgICAgICAgaWYgKG0ubW9kZV9wYXJhbSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibW9kZV9wYXJhbVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNikuc3RyaW5nKG0ubW9kZV9wYXJhbSk7XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImdhbWVfdHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50NjQobS5nYW1lX3R5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFHYW1lV29yZHMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lV29yZHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFHYW1lV29yZHN9IFJlcUdhbWVXb3Jkc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVXb3Jkcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFHYW1lV29yZHMoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLnVzZXJfaWQgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0ubW9kZSA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLm1vZGVfcGFyYW0gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFHYW1lV29yZHMgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lV29yZHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFHYW1lV29yZHN9IFJlcUdhbWVXb3Jkc1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxR2FtZVdvcmRzLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFHYW1lV29yZHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUdhbWVXb3JkcygpO1xuICAgICAgICAgICAgaWYgKGQudXNlcl9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS51c2VyX2lkID0gU3RyaW5nKGQudXNlcl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ubW9kZSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubW9kZSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubW9kZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tb2RlID0gcGFyc2VJbnQoZC5tb2RlLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubW9kZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tb2RlID0gZC5tb2RlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1vZGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubW9kZSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1vZGUubG93ID4+PiAwLCBkLm1vZGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm1vZGVfcGFyYW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubW9kZV9wYXJhbSA9IFN0cmluZyhkLm1vZGVfcGFyYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZ2FtZV90eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uZ2FtZV90eXBlID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5nYW1lX3R5cGUpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmdhbWVfdHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5nYW1lX3R5cGUgPSBwYXJzZUludChkLmdhbWVfdHlwZSwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmdhbWVfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5nYW1lX3R5cGUgPSBkLmdhbWVfdHlwZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5nYW1lX3R5cGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuZ2FtZV90eXBlLmxvdyA+Pj4gMCwgZC5nYW1lX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFHYW1lV29yZHMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVdvcmRzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcUdhbWVXb3Jkc30gbSBSZXFHYW1lV29yZHNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lV29yZHMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC51c2VyX2lkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5tb2RlID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tb2RlID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQubW9kZV9wYXJhbSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuZ2FtZV90eXBlID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51c2VyX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVzZXJfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBkLnVzZXJfaWQgPSBtLnVzZXJfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tb2RlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1vZGVcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubW9kZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5tb2RlID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0ubW9kZSkgOiBtLm1vZGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLm1vZGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ubW9kZSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5tb2RlLmxvdyA+Pj4gMCwgbS5tb2RlLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLm1vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tb2RlX3BhcmFtICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1vZGVfcGFyYW1cIikpIHtcbiAgICAgICAgICAgICAgICBkLm1vZGVfcGFyYW0gPSBtLm1vZGVfcGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZ2FtZV90eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmdhbWVfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5nYW1lX3R5cGUpIDogbS5nYW1lX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmdhbWVfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5nYW1lX3R5cGUpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uZ2FtZV90eXBlLmxvdyA+Pj4gMCwgbS5nYW1lX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZ2FtZV90eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxR2FtZVdvcmRzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVdvcmRzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lV29yZHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFHYW1lV29yZHM7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcEdhbWVXb3JkcyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BHYW1lV29yZHMuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BHYW1lV29yZHNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyfExvbmc+fG51bGx9IFtpdGVtX2lkc10gUmVzcEdhbWVXb3JkcyBpdGVtX2lkc1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttdXN0X2xlYXJuXSBSZXNwR2FtZVdvcmRzIG11c3RfbGVhcm5cbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLklHYW1lVHlwZUNvbmZpZ3xudWxsfSBbZ2FtZV9jb25maWddIFJlc3BHYW1lV29yZHMgZ2FtZV9jb25maWdcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcEdhbWVXb3Jkcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcEdhbWVXb3Jkcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BHYW1lV29yZHNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcEdhbWVXb3Jkcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcEdhbWVXb3JkcyhwKSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1faWRzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEdhbWVXb3JkcyBpdGVtX2lkcy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcnxMb25nPn0gaXRlbV9pZHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVXb3Jkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lV29yZHMucHJvdG90eXBlLml0ZW1faWRzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEdhbWVXb3JkcyBtdXN0X2xlYXJuLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gbXVzdF9sZWFyblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVdvcmRzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEdhbWVXb3Jkcy5wcm90b3R5cGUubXVzdF9sZWFybiA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwR2FtZVdvcmRzIGdhbWVfY29uZmlnLlxuICAgICAgICAgKiBAbWVtYmVyIHtmYXJtLklHYW1lVHlwZUNvbmZpZ3xudWxsfHVuZGVmaW5lZH0gZ2FtZV9jb25maWdcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVXb3Jkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lV29yZHMucHJvdG90eXBlLmdhbWVfY29uZmlnID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BHYW1lV29yZHMgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwR2FtZVdvcmRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BHYW1lV29yZHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BHYW1lV29yZHN9IG0gUmVzcEdhbWVXb3JkcyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVdvcmRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pdGVtX2lkcyAhPSBudWxsICYmIG0uaXRlbV9pZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uaXRlbV9pZHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS5pdGVtX2lkc1tpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm11c3RfbGVhcm4gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm11c3RfbGVhcm5cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0ubXVzdF9sZWFybik7XG4gICAgICAgICAgICBpZiAobS5nYW1lX2NvbmZpZyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZ2FtZV9jb25maWdcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuZmFybS5HYW1lVHlwZUNvbmZpZy5lbmNvZGUobS5nYW1lX2NvbmZpZywgdy51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BHYW1lV29yZHMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVdvcmRzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcEdhbWVXb3Jkc30gUmVzcEdhbWVXb3Jkc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lV29yZHMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcEdhbWVXb3JkcygpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0uaXRlbV9pZHMgJiYgbS5pdGVtX2lkcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5tdXN0X2xlYXJuID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9jb25maWcgPSAkcm9vdC5mYXJtLkdhbWVUeXBlQ29uZmlnLmRlY29kZShyLCByLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcEdhbWVXb3JkcyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BHYW1lV29yZHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwR2FtZVdvcmRzfSBSZXNwR2FtZVdvcmRzXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVdvcmRzLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwR2FtZVdvcmRzKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwR2FtZVdvcmRzKCk7XG4gICAgICAgICAgICBpZiAoZC5pdGVtX2lkcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLml0ZW1faWRzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcEdhbWVXb3Jkcy5pdGVtX2lkczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5pdGVtX2lkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5pdGVtX2lkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLml0ZW1faWRzW2ldID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pdGVtX2lkc1tpXSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLml0ZW1faWRzW2ldID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkc1tpXSA9IHBhcnNlSW50KGQuaXRlbV9pZHNbaV0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaXRlbV9pZHNbaV0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWRzW2ldID0gZC5pdGVtX2lkc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaXRlbV9pZHNbaV0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWRzW2ldID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaXRlbV9pZHNbaV0ubG93ID4+PiAwLCBkLml0ZW1faWRzW2ldLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubXVzdF9sZWFybiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm11c3RfbGVhcm4gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLm11c3RfbGVhcm4pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm11c3RfbGVhcm4gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubXVzdF9sZWFybiA9IHBhcnNlSW50KGQubXVzdF9sZWFybiwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm11c3RfbGVhcm4gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubXVzdF9sZWFybiA9IGQubXVzdF9sZWFybjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tdXN0X2xlYXJuID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm11c3RfbGVhcm4gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5tdXN0X2xlYXJuLmxvdyA+Pj4gMCwgZC5tdXN0X2xlYXJuLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5nYW1lX2NvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLmdhbWVfY29uZmlnICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwR2FtZVdvcmRzLmdhbWVfY29uZmlnOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5nYW1lX2NvbmZpZyA9ICRyb290LmZhcm0uR2FtZVR5cGVDb25maWcuZnJvbU9iamVjdChkLmdhbWVfY29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwR2FtZVdvcmRzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BHYW1lV29yZHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcEdhbWVXb3Jkc30gbSBSZXNwR2FtZVdvcmRzXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEdhbWVXb3Jkcy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLml0ZW1faWRzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLm11c3RfbGVhcm4gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLm11c3RfbGVhcm4gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5nYW1lX2NvbmZpZyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pdGVtX2lkcyAmJiBtLml0ZW1faWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuaXRlbV9pZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uaXRlbV9pZHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLml0ZW1faWRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5pdGVtX2lkc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLml0ZW1faWRzW2pdKSA6IG0uaXRlbV9pZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuaXRlbV9pZHNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaXRlbV9pZHNbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaXRlbV9pZHNbal0ubG93ID4+PiAwLCBtLml0ZW1faWRzW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLml0ZW1faWRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm11c3RfbGVhcm4gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibXVzdF9sZWFyblwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5tdXN0X2xlYXJuID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLm11c3RfbGVhcm4gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5tdXN0X2xlYXJuKSA6IG0ubXVzdF9sZWFybjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubXVzdF9sZWFybiA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5tdXN0X2xlYXJuKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLm11c3RfbGVhcm4ubG93ID4+PiAwLCBtLm11c3RfbGVhcm4uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ubXVzdF9sZWFybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmdhbWVfY29uZmlnICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImdhbWVfY29uZmlnXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5nYW1lX2NvbmZpZyA9ICRyb290LmZhcm0uR2FtZVR5cGVDb25maWcudG9PYmplY3QobS5nYW1lX2NvbmZpZywgbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwR2FtZVdvcmRzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVXb3Jkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEdhbWVXb3Jkcy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BHYW1lV29yZHM7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uR2FtZVR5cGVDb25maWcgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBHYW1lVHlwZUNvbmZpZy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJR2FtZVR5cGVDb25maWdcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbZ2FtZV9kdXJhdGlvbl0gR2FtZVR5cGVDb25maWcgZ2FtZV9kdXJhdGlvblxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFt0aW1lX292ZXJdIEdhbWVUeXBlQ29uZmlnIHRpbWVfb3ZlclxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXJ8TG9uZz58bnVsbH0gW3N0YWdlX3BhcmFtc10gR2FtZVR5cGVDb25maWcgc3RhZ2VfcGFyYW1zXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2dhbWVfdHlwZV0gR2FtZVR5cGVDb25maWcgZ2FtZV90eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFt0aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uXSBHYW1lVHlwZUNvbmZpZyB0aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFt1bnNraWxsZnVsbF9kZWR1Y3Rpb25dIEdhbWVUeXBlQ29uZmlnIHVuc2tpbGxmdWxsX2RlZHVjdGlvblxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fG51bGx9IFtzdGFyX2V2YWx1YXRpb25dIEdhbWVUeXBlQ29uZmlnIHN0YXJfZXZhbHVhdGlvblxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBHYW1lVHlwZUNvbmZpZy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgR2FtZVR5cGVDb25maWcuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElHYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklHYW1lVHlwZUNvbmZpZz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gR2FtZVR5cGVDb25maWcocCkge1xuICAgICAgICAgICAgdGhpcy5zdGFnZV9wYXJhbXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuc3Rhcl9ldmFsdWF0aW9uID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVR5cGVDb25maWcgZ2FtZV9kdXJhdGlvbi5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGdhbWVfZHVyYXRpb25cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVDb25maWdcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUNvbmZpZy5wcm90b3R5cGUuZ2FtZV9kdXJhdGlvbiA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lVHlwZUNvbmZpZyB0aW1lX292ZXIuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB0aW1lX292ZXJcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVDb25maWdcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUNvbmZpZy5wcm90b3R5cGUudGltZV9vdmVyID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVUeXBlQ29uZmlnIHN0YWdlX3BhcmFtcy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcnxMb25nPn0gc3RhZ2VfcGFyYW1zXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlQ29uZmlnXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVDb25maWcucHJvdG90eXBlLnN0YWdlX3BhcmFtcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVUeXBlQ29uZmlnIGdhbWVfdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGdhbWVfdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlQ29uZmlnLnByb3RvdHlwZS5nYW1lX3R5cGUgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVR5cGVDb25maWcgdGltZV9vdmVyX29yX3dyb25nX2RlZHVjdGlvbi5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB0aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlQ29uZmlnXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVDb25maWcucHJvdG90eXBlLnRpbWVfb3Zlcl9vcl93cm9uZ19kZWR1Y3Rpb24gPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lVHlwZUNvbmZpZyB1bnNraWxsZnVsbF9kZWR1Y3Rpb24uXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gdW5za2lsbGZ1bGxfZGVkdWN0aW9uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlQ29uZmlnXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVDb25maWcucHJvdG90eXBlLnVuc2tpbGxmdWxsX2RlZHVjdGlvbiA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVUeXBlQ29uZmlnIHN0YXJfZXZhbHVhdGlvbi5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IHN0YXJfZXZhbHVhdGlvblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlQ29uZmlnLnByb3RvdHlwZS5zdGFyX2V2YWx1YXRpb24gPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgR2FtZVR5cGVDb25maWcgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5HYW1lVHlwZUNvbmZpZy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JR2FtZVR5cGVDb25maWd9IG0gR2FtZVR5cGVDb25maWcgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVDb25maWcuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmdhbWVfZHVyYXRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImdhbWVfZHVyYXRpb25cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5nYW1lX2R1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChtLnRpbWVfb3ZlciAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGltZV9vdmVyXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLnRpbWVfb3Zlcik7XG4gICAgICAgICAgICBpZiAobS5zdGFnZV9wYXJhbXMgIT0gbnVsbCAmJiBtLnN0YWdlX3BhcmFtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNikuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5zdGFnZV9wYXJhbXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS5zdGFnZV9wYXJhbXNbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImdhbWVfdHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50NjQobS5nYW1lX3R5cGUpO1xuICAgICAgICAgICAgaWYgKG0udGltZV9vdmVyX29yX3dyb25nX2RlZHVjdGlvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGltZV9vdmVyX29yX3dyb25nX2RlZHVjdGlvblwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig0NSkuZmxvYXQobS50aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uKTtcbiAgICAgICAgICAgIGlmIChtLnVuc2tpbGxmdWxsX2RlZHVjdGlvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidW5za2lsbGZ1bGxfZGVkdWN0aW9uXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDUzKS5mbG9hdChtLnVuc2tpbGxmdWxsX2RlZHVjdGlvbik7XG4gICAgICAgICAgICBpZiAobS5zdGFyX2V2YWx1YXRpb24gIT0gbnVsbCAmJiBtLnN0YXJfZXZhbHVhdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1OCkuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5zdGFyX2V2YWx1YXRpb24ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuZmxvYXQobS5zdGFyX2V2YWx1YXRpb25baV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIEdhbWVUeXBlQ29uZmlnIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVDb25maWdcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5HYW1lVHlwZUNvbmZpZ30gR2FtZVR5cGVDb25maWdcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUNvbmZpZy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5HYW1lVHlwZUNvbmZpZygpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9kdXJhdGlvbiA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLnRpbWVfb3ZlciA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnN0YWdlX3BhcmFtcyAmJiBtLnN0YWdlX3BhcmFtcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFnZV9wYXJhbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc3RhZ2VfcGFyYW1zLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0YWdlX3BhcmFtcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS5nYW1lX3R5cGUgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbS50aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uID0gci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG0udW5za2lsbGZ1bGxfZGVkdWN0aW9uID0gci5mbG9hdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0uc3Rhcl9ldmFsdWF0aW9uICYmIG0uc3Rhcl9ldmFsdWF0aW9uLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0YXJfZXZhbHVhdGlvbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFyX2V2YWx1YXRpb24ucHVzaChyLmZsb2F0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc3Rhcl9ldmFsdWF0aW9uLnB1c2goci5mbG9hdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgR2FtZVR5cGVDb25maWcgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkdhbWVUeXBlQ29uZmlnfSBHYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVDb25maWcuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkdhbWVUeXBlQ29uZmlnKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5HYW1lVHlwZUNvbmZpZygpO1xuICAgICAgICAgICAgaWYgKGQuZ2FtZV9kdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmdhbWVfZHVyYXRpb24gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmdhbWVfZHVyYXRpb24pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmdhbWVfZHVyYXRpb24gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9kdXJhdGlvbiA9IHBhcnNlSW50KGQuZ2FtZV9kdXJhdGlvbiwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmdhbWVfZHVyYXRpb24gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9kdXJhdGlvbiA9IGQuZ2FtZV9kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5nYW1lX2R1cmF0aW9uID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmdhbWVfZHVyYXRpb24gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5nYW1lX2R1cmF0aW9uLmxvdyA+Pj4gMCwgZC5nYW1lX2R1cmF0aW9uLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50aW1lX292ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS50aW1lX292ZXIgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnRpbWVfb3ZlcikpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGltZV9vdmVyID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnRpbWVfb3ZlciA9IHBhcnNlSW50KGQudGltZV9vdmVyLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGltZV9vdmVyID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnRpbWVfb3ZlciA9IGQudGltZV9vdmVyO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRpbWVfb3ZlciA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS50aW1lX292ZXIgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC50aW1lX292ZXIubG93ID4+PiAwLCBkLnRpbWVfb3Zlci5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuc3RhZ2VfcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuc3RhZ2VfcGFyYW1zKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uR2FtZVR5cGVDb25maWcuc3RhZ2VfcGFyYW1zOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnN0YWdlX3BhcmFtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5zdGFnZV9wYXJhbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS5zdGFnZV9wYXJhbXNbaV0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnN0YWdlX3BhcmFtc1tpXSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YWdlX3BhcmFtc1tpXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc3RhZ2VfcGFyYW1zW2ldID0gcGFyc2VJbnQoZC5zdGFnZV9wYXJhbXNbaV0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc3RhZ2VfcGFyYW1zW2ldID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFnZV9wYXJhbXNbaV0gPSBkLnN0YWdlX3BhcmFtc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc3RhZ2VfcGFyYW1zW2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFnZV9wYXJhbXNbaV0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5zdGFnZV9wYXJhbXNbaV0ubG93ID4+PiAwLCBkLnN0YWdlX3BhcmFtc1tpXS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmdhbWVfdHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmdhbWVfdHlwZSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuZ2FtZV90eXBlKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5nYW1lX3R5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gcGFyc2VJbnQoZC5nYW1lX3R5cGUsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5nYW1lX3R5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gZC5nYW1lX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuZ2FtZV90eXBlID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmdhbWVfdHlwZSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmdhbWVfdHlwZS5sb3cgPj4+IDAsIGQuZ2FtZV90eXBlLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnRpbWVfb3Zlcl9vcl93cm9uZ19kZWR1Y3Rpb24gPSBOdW1iZXIoZC50aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnVuc2tpbGxmdWxsX2RlZHVjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS51bnNraWxsZnVsbF9kZWR1Y3Rpb24gPSBOdW1iZXIoZC51bnNraWxsZnVsbF9kZWR1Y3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuc3Rhcl9ldmFsdWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuc3Rhcl9ldmFsdWF0aW9uKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uR2FtZVR5cGVDb25maWcuc3Rhcl9ldmFsdWF0aW9uOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnN0YXJfZXZhbHVhdGlvbiA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5zdGFyX2V2YWx1YXRpb24ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5zdGFyX2V2YWx1YXRpb25baV0gPSBOdW1iZXIoZC5zdGFyX2V2YWx1YXRpb25baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBHYW1lVHlwZUNvbmZpZyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5HYW1lVHlwZUNvbmZpZ30gbSBHYW1lVHlwZUNvbmZpZ1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlQ29uZmlnLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuc3RhZ2VfcGFyYW1zID0gW107XG4gICAgICAgICAgICAgICAgZC5zdGFyX2V2YWx1YXRpb24gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuZ2FtZV9kdXJhdGlvbiA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuZ2FtZV9kdXJhdGlvbiA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC50aW1lX292ZXIgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRpbWVfb3ZlciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmdhbWVfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLnRpbWVfb3Zlcl9vcl93cm9uZ19kZWR1Y3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIGQudW5za2lsbGZ1bGxfZGVkdWN0aW9uID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmdhbWVfZHVyYXRpb24gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZ2FtZV9kdXJhdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5nYW1lX2R1cmF0aW9uID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmdhbWVfZHVyYXRpb24gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5nYW1lX2R1cmF0aW9uKSA6IG0uZ2FtZV9kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuZ2FtZV9kdXJhdGlvbiA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5nYW1lX2R1cmF0aW9uKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmdhbWVfZHVyYXRpb24ubG93ID4+PiAwLCBtLmdhbWVfZHVyYXRpb24uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZ2FtZV9kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRpbWVfb3ZlciAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0aW1lX292ZXJcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udGltZV9vdmVyID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnRpbWVfb3ZlciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnRpbWVfb3ZlcikgOiBtLnRpbWVfb3ZlcjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudGltZV9vdmVyID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnRpbWVfb3ZlcikgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS50aW1lX292ZXIubG93ID4+PiAwLCBtLnRpbWVfb3Zlci5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS50aW1lX292ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGFnZV9wYXJhbXMgJiYgbS5zdGFnZV9wYXJhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5zdGFnZV9wYXJhbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uc3RhZ2VfcGFyYW1zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5zdGFnZV9wYXJhbXNbal0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnN0YWdlX3BhcmFtc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnN0YWdlX3BhcmFtc1tqXSkgOiBtLnN0YWdlX3BhcmFtc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5zdGFnZV9wYXJhbXNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uc3RhZ2VfcGFyYW1zW2pdKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnN0YWdlX3BhcmFtc1tqXS5sb3cgPj4+IDAsIG0uc3RhZ2VfcGFyYW1zW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnN0YWdlX3BhcmFtc1tqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZ2FtZV90eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmdhbWVfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5nYW1lX3R5cGUpIDogbS5nYW1lX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmdhbWVfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5nYW1lX3R5cGUpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uZ2FtZV90eXBlLmxvdyA+Pj4gMCwgbS5nYW1lX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZ2FtZV90eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udGltZV9vdmVyX29yX3dyb25nX2RlZHVjdGlvbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50aW1lX292ZXJfb3Jfd3JvbmdfZGVkdWN0aW9uID0gby5qc29uICYmICFpc0Zpbml0ZShtLnRpbWVfb3Zlcl9vcl93cm9uZ19kZWR1Y3Rpb24pID8gU3RyaW5nKG0udGltZV9vdmVyX29yX3dyb25nX2RlZHVjdGlvbikgOiBtLnRpbWVfb3Zlcl9vcl93cm9uZ19kZWR1Y3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51bnNraWxsZnVsbF9kZWR1Y3Rpb24gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidW5za2lsbGZ1bGxfZGVkdWN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgZC51bnNraWxsZnVsbF9kZWR1Y3Rpb24gPSBvLmpzb24gJiYgIWlzRmluaXRlKG0udW5za2lsbGZ1bGxfZGVkdWN0aW9uKSA/IFN0cmluZyhtLnVuc2tpbGxmdWxsX2RlZHVjdGlvbikgOiBtLnVuc2tpbGxmdWxsX2RlZHVjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnN0YXJfZXZhbHVhdGlvbiAmJiBtLnN0YXJfZXZhbHVhdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnN0YXJfZXZhbHVhdGlvbiA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5zdGFyX2V2YWx1YXRpb24ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFyX2V2YWx1YXRpb25bal0gPSBvLmpzb24gJiYgIWlzRmluaXRlKG0uc3Rhcl9ldmFsdWF0aW9uW2pdKSA/IFN0cmluZyhtLnN0YXJfZXZhbHVhdGlvbltqXSkgOiBtLnN0YXJfZXZhbHVhdGlvbltqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBHYW1lVHlwZUNvbmZpZyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlQ29uZmlnXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUNvbmZpZy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEdhbWVUeXBlQ29uZmlnO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVVuaXRMZWFybmluZ1Byb2dyZXNzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcVVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1c2VyX2lkXSBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcyB1c2VyX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW21hdF9pZF0gUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MgbWF0X2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3VuaXRfaWRdIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzIHVuaXRfaWRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3M9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcyB1c2VyX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVzZXJfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUudXNlcl9pZCA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzIG1hdF9pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IG1hdF9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5tYXRfaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MgdW5pdF9pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHVuaXRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUudW5pdF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzcy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3N9IG0gUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnVzZXJfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVzZXJfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLnN0cmluZyhtLnVzZXJfaWQpO1xuICAgICAgICAgICAgaWYgKG0ubWF0X2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtYXRfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0ubWF0X2lkKTtcbiAgICAgICAgICAgIGlmIChtLnVuaXRfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVuaXRfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDY0KG0udW5pdF9pZCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzc30gUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzcygpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0udXNlcl9pZCA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5tYXRfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS51bml0X2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3N9IFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcy5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVxVW5pdExlYXJuaW5nUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVVuaXRMZWFybmluZ1Byb2dyZXNzKCk7XG4gICAgICAgICAgICBpZiAoZC51c2VyX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnVzZXJfaWQgPSBTdHJpbmcoZC51c2VyX2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm1hdF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm1hdF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubWF0X2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gcGFyc2VJbnQoZC5tYXRfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gZC5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1hdF9pZC5sb3cgPj4+IDAsIGQubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC51bml0X2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0udW5pdF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQudW5pdF9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudW5pdF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS51bml0X2lkID0gcGFyc2VJbnQoZC51bml0X2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudW5pdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS51bml0X2lkID0gZC51bml0X2lkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVuaXRfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0udW5pdF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnVuaXRfaWQubG93ID4+PiAwLCBkLnVuaXRfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFVbml0TGVhcm5pbmdQcm9ncmVzc30gbSBSZXFVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQudXNlcl9pZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQudW5pdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudW5pdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnVzZXJfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidXNlcl9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQudXNlcl9pZCA9IG0udXNlcl9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1hdF9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJtYXRfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubWF0X2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLm1hdF9pZCkgOiBtLm1hdF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLm1hdF9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5tYXRfaWQubG93ID4+PiAwLCBtLm1hdF9pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5tYXRfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51bml0X2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVuaXRfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udW5pdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC51bml0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udW5pdF9pZCkgOiBtLnVuaXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnVuaXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udW5pdF9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS51bml0X2lkLmxvdyA+Pj4gMCwgbS51bml0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnVuaXRfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbml0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcVVuaXRMZWFybmluZ1Byb2dyZXNzO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW21hdF9pZF0gUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzIG1hdF9pZFxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtPnxudWxsfSBbZ2FtZXNfcHJvZ3Jlc3NdIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcyBnYW1lc19wcm9ncmVzc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3M9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcyhwKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVzX3Byb2dyZXNzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzIG1hdF9pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IG1hdF9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MucHJvdG90eXBlLm1hdF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MgZ2FtZXNfcHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtPn0gZ2FtZXNfcHJvZ3Jlc3NcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5nYW1lc19wcm9ncmVzcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3N9IG0gUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ubWF0X2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtYXRfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5tYXRfaWQpO1xuICAgICAgICAgICAgaWYgKG0uZ2FtZXNfcHJvZ3Jlc3MgIT0gbnVsbCAmJiBtLmdhbWVzX3Byb2dyZXNzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5nYW1lc19wcm9ncmVzcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLmVuY29kZShtLmdhbWVzX3Byb2dyZXNzW2ldLCB3LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzfSBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5tYXRfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5nYW1lc19wcm9ncmVzcyAmJiBtLmdhbWVzX3Byb2dyZXNzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmdhbWVzX3Byb2dyZXNzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZXNfcHJvZ3Jlc3MucHVzaCgkcm9vdC5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0uZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzfSBSZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcy5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIGlmIChkLm1hdF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm1hdF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubWF0X2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gcGFyc2VJbnQoZC5tYXRfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gZC5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1hdF9pZC5sb3cgPj4+IDAsIGQubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5nYW1lc19wcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmdhbWVzX3Byb2dyZXNzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzLmdhbWVzX3Byb2dyZXNzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmdhbWVzX3Byb2dyZXNzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmdhbWVzX3Byb2dyZXNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5nYW1lc19wcm9ncmVzc1tpXSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcy5nYW1lc19wcm9ncmVzczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLmdhbWVzX3Byb2dyZXNzW2ldID0gJHJvb3QuZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLmZyb21PYmplY3QoZC5nYW1lc19wcm9ncmVzc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzfSBtIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmdhbWVzX3Byb2dyZXNzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubWF0X2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1hdF9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0ubWF0X2lkKSA6IG0ubWF0X2lkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ubWF0X2lkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLm1hdF9pZC5sb3cgPj4+IDAsIG0ubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLm1hdF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmdhbWVzX3Byb2dyZXNzICYmIG0uZ2FtZXNfcHJvZ3Jlc3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5nYW1lc19wcm9ncmVzcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5nYW1lc19wcm9ncmVzcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLmdhbWVzX3Byb2dyZXNzW2pdID0gJHJvb3QuZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLnRvT2JqZWN0KG0uZ2FtZXNfcHJvZ3Jlc3Nbal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BVbml0TGVhcm5pbmdQcm9ncmVzcyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFVuaXRMZWFybmluZ1Byb2dyZXNzO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2dhbWVfdHlwZV0gR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbSBnYW1lX3R5cGVcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyfExvbmc+fG51bGx9IFtzdGFyXSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIHN0YXJcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2hpc3RvcnlfbWF4X3Njb3JlXSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIGhpc3RvcnlfbWF4X3Njb3JlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3N0YXRlXSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIHN0YXRlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW09fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0ocCkge1xuICAgICAgICAgICAgdGhpcy5zdGFyID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbSBnYW1lX3R5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBnYW1lX3R5cGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0ucHJvdG90eXBlLmdhbWVfdHlwZSA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIHN0YXIuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXJ8TG9uZz59IHN0YXJcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0ucHJvdG90eXBlLnN0YXIgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIGhpc3RvcnlfbWF4X3Njb3JlLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGhpc3RvcnlfbWF4X3Njb3JlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLnByb3RvdHlwZS5oaXN0b3J5X21heF9zY29yZSA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0gc3RhdGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBzdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbS5wcm90b3R5cGUuc3RhdGUgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW19IG0gR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImdhbWVfdHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmdhbWVfdHlwZSk7XG4gICAgICAgICAgICBpZiAobS5zdGFyICE9IG51bGwgJiYgbS5zdGFyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5mb3JrKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLnN0YXIubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS5zdGFyW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaGlzdG9yeV9tYXhfc2NvcmUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImhpc3RvcnlfbWF4X3Njb3JlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI2KS5zdHJpbmcobS5oaXN0b3J5X21heF9zY29yZSk7XG4gICAgICAgICAgICBpZiAobS5zdGF0ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic3RhdGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzIpLmludDY0KG0uc3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW19IEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW1cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0oKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmdhbWVfdHlwZSA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnN0YXIgJiYgbS5zdGFyLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0YXIgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc3Rhci5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFyLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLmhpc3RvcnlfbWF4X3Njb3JlID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnN0YXRlID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW19IEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW1cbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0oKTtcbiAgICAgICAgICAgIGlmIChkLmdhbWVfdHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmdhbWVfdHlwZSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuZ2FtZV90eXBlKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5nYW1lX3R5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gcGFyc2VJbnQoZC5nYW1lX3R5cGUsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5nYW1lX3R5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gZC5nYW1lX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuZ2FtZV90eXBlID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmdhbWVfdHlwZSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmdhbWVfdHlwZS5sb3cgPj4+IDAsIGQuZ2FtZV90eXBlLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5zdGFyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuc3RhcikpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0uc3RhcjogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5zdGFyID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLnN0YXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS5zdGFyW2ldID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5zdGFyW2ldKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc3RhcltpXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc3RhcltpXSA9IHBhcnNlSW50KGQuc3RhcltpXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zdGFyW2ldID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFyW2ldID0gZC5zdGFyW2ldO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zdGFyW2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFyW2ldID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuc3RhcltpXS5sb3cgPj4+IDAsIGQuc3RhcltpXS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmhpc3RvcnlfbWF4X3Njb3JlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmhpc3RvcnlfbWF4X3Njb3JlID0gU3RyaW5nKGQuaGlzdG9yeV9tYXhfc2NvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuc3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5zdGF0ZSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuc3RhdGUpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXRlID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnN0YXRlID0gcGFyc2VJbnQoZC5zdGF0ZSwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXRlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnN0YXRlID0gZC5zdGF0ZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zdGF0ZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5zdGF0ZSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnN0YXRlLmxvdyA+Pj4gMCwgZC5zdGF0ZS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtfSBtIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW1cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuc3RhciA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmdhbWVfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmhpc3RvcnlfbWF4X3Njb3JlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5zdGF0ZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuc3RhdGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZ2FtZV90eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmdhbWVfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5nYW1lX3R5cGUpIDogbS5nYW1lX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmdhbWVfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5nYW1lX3R5cGUpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uZ2FtZV90eXBlLmxvdyA+Pj4gMCwgbS5nYW1lX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZ2FtZV90eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3RhciAmJiBtLnN0YXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5zdGFyID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnN0YXIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnN0YXJbal0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnN0YXJbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5zdGFyW2pdKSA6IG0uc3RhcltqXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5zdGFyW2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnN0YXJbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc3RhcltqXS5sb3cgPj4+IDAsIG0uc3RhcltqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zdGFyW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmhpc3RvcnlfbWF4X3Njb3JlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImhpc3RvcnlfbWF4X3Njb3JlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5oaXN0b3J5X21heF9zY29yZSA9IG0uaGlzdG9yeV9tYXhfc2NvcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGF0ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5zdGF0ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5zdGF0ZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnN0YXRlKSA6IG0uc3RhdGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnN0YXRlID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnN0YXRlKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnN0YXRlLmxvdyA+Pj4gMCwgbS5zdGF0ZS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc0l0ZW0gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NJdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzSXRlbTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFNYXRMZWFybmluZ1Byb2dyZXNzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdXNlcl9pZF0gUmVxTWF0TGVhcm5pbmdQcm9ncmVzcyB1c2VyX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW21hdF9pZF0gUmVxTWF0TGVhcm5pbmdQcm9ncmVzcyBtYXRfaWRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcU1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxTWF0TGVhcm5pbmdQcm9ncmVzcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxTWF0TGVhcm5pbmdQcm9ncmVzcyhwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxTWF0TGVhcm5pbmdQcm9ncmVzcyB1c2VyX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVzZXJfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MucHJvdG90eXBlLnVzZXJfaWQgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFNYXRMZWFybmluZ1Byb2dyZXNzIG1hdF9pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IG1hdF9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUubWF0X2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFNYXRMZWFybmluZ1Byb2dyZXNzfSBtIFJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0udXNlcl9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidXNlcl9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0udXNlcl9pZCk7XG4gICAgICAgICAgICBpZiAobS5tYXRfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm1hdF9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50NjQobS5tYXRfaWQpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcU1hdExlYXJuaW5nUHJvZ3Jlc3N9IFJlcU1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFNYXRMZWFybmluZ1Byb2dyZXNzLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLnVzZXJfaWQgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcU1hdExlYXJuaW5nUHJvZ3Jlc3N9IFJlcU1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICovXG4gICAgICAgIFJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIGlmIChkLnVzZXJfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0udXNlcl9pZCA9IFN0cmluZyhkLnVzZXJfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubWF0X2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ubWF0X2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5tYXRfaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1hdF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tYXRfaWQgPSBwYXJzZUludChkLm1hdF9pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1hdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tYXRfaWQgPSBkLm1hdF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQubWF0X2lkLmxvdyA+Pj4gMCwgZC5tYXRfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVxTWF0TGVhcm5pbmdQcm9ncmVzc30gbSBSZXFNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxTWF0TGVhcm5pbmdQcm9ncmVzcy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLnVzZXJfaWQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udXNlcl9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ1c2VyX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC51c2VyX2lkID0gbS51c2VyX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubWF0X2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1hdF9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0ubWF0X2lkKSA6IG0ubWF0X2lkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ubWF0X2lkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLm1hdF9pZC5sb3cgPj4+IDAsIG0ubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLm1hdF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcU1hdExlYXJuaW5nUHJvZ3Jlc3MgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFNYXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxTWF0TGVhcm5pbmdQcm9ncmVzcztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttYXRfaWRdIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzIG1hdF9pZFxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXJ8TG9uZz58bnVsbH0gW21hdF9zdGFyXSBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyBtYXRfc3RhclxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbZ3JhZGVzX3N0YXJdIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzIGdyYWRlc19zdGFyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1bml0c19zdGFyXSBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyB1bml0c19zdGFyXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BNYXRMZWFybmluZ1Byb2dyZXNzPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyhwKSB7XG4gICAgICAgICAgICB0aGlzLm1hdF9zdGFyID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3MgbWF0X2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gbWF0X2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3MucHJvdG90eXBlLm1hdF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyBtYXRfc3Rhci5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcnxMb25nPn0gbWF0X3N0YXJcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUubWF0X3N0YXIgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyBncmFkZXNfc3Rhci5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBncmFkZXNfc3RhclxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5ncmFkZXNfc3RhciA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzIHVuaXRzX3N0YXIuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gdW5pdHNfc3RhclxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS51bml0c19zdGFyID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3MudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BNYXRMZWFybmluZ1Byb2dyZXNzfSBtIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5tYXRfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm1hdF9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLm1hdF9pZCk7XG4gICAgICAgICAgICBpZiAobS5tYXRfc3RhciAhPSBudWxsICYmIG0ubWF0X3N0YXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubWF0X3N0YXIubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS5tYXRfc3RhcltpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmdyYWRlc19zdGFyICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJncmFkZXNfc3RhclwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNikuc3RyaW5nKG0uZ3JhZGVzX3N0YXIpO1xuICAgICAgICAgICAgaWYgKG0udW5pdHNfc3RhciAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidW5pdHNfc3RhclwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzNCkuc3RyaW5nKG0udW5pdHNfc3Rhcik7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzc30gUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzcygpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0ubWF0X3N0YXIgJiYgbS5tYXRfc3Rhci5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXRfc3RhciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXRfc3Rhci5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXRfc3Rhci5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5ncmFkZXNfc3RhciA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS51bml0c19zdGFyID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BNYXRMZWFybmluZ1Byb2dyZXNzfSBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hdExlYXJuaW5nUHJvZ3Jlc3MuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BNYXRMZWFybmluZ1Byb2dyZXNzKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzcygpO1xuICAgICAgICAgICAgaWYgKGQubWF0X2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ubWF0X2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5tYXRfaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1hdF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tYXRfaWQgPSBwYXJzZUludChkLm1hdF9pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1hdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tYXRfaWQgPSBkLm1hdF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQubWF0X2lkLmxvdyA+Pj4gMCwgZC5tYXRfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm1hdF9zdGFyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQubWF0X3N0YXIpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzcy5tYXRfc3RhcjogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5tYXRfc3RhciA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5tYXRfc3Rhci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLm1hdF9zdGFyW2ldID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5tYXRfc3RhcltpXSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1hdF9zdGFyW2ldID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXRfc3RhcltpXSA9IHBhcnNlSW50KGQubWF0X3N0YXJbaV0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X3N0YXJbaV0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1hdF9zdGFyW2ldID0gZC5tYXRfc3RhcltpXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X3N0YXJbaV0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1hdF9zdGFyW2ldID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQubWF0X3N0YXJbaV0ubG93ID4+PiAwLCBkLm1hdF9zdGFyW2ldLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZ3JhZGVzX3N0YXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uZ3JhZGVzX3N0YXIgPSBTdHJpbmcoZC5ncmFkZXNfc3Rhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC51bml0c19zdGFyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnVuaXRzX3N0YXIgPSBTdHJpbmcoZC51bml0c19zdGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXNwTWF0TGVhcm5pbmdQcm9ncmVzc30gbSBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQubWF0X3N0YXIgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5ncmFkZXNfc3RhciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC51bml0c19zdGFyID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1hdF9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJtYXRfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubWF0X2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLm1hdF9pZCkgOiBtLm1hdF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLm1hdF9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5tYXRfaWQubG93ID4+PiAwLCBtLm1hdF9pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5tYXRfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tYXRfc3RhciAmJiBtLm1hdF9zdGFyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQubWF0X3N0YXIgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0ubWF0X3N0YXIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLm1hdF9zdGFyW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5tYXRfc3RhcltqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLm1hdF9zdGFyW2pdKSA6IG0ubWF0X3N0YXJbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQubWF0X3N0YXJbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ubWF0X3N0YXJbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ubWF0X3N0YXJbal0ubG93ID4+PiAwLCBtLm1hdF9zdGFyW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLm1hdF9zdGFyW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmdyYWRlc19zdGFyICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImdyYWRlc19zdGFyXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5ncmFkZXNfc3RhciA9IG0uZ3JhZGVzX3N0YXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51bml0c19zdGFyICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVuaXRzX3N0YXJcIikpIHtcbiAgICAgICAgICAgICAgICBkLnVuaXRzX3N0YXIgPSBtLnVuaXRzX3N0YXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWF0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BNYXRMZWFybmluZ1Byb2dyZXNzO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVN0dWR5VXBsb2FkID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxU3R1ZHlVcGxvYWQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcVN0dWR5VXBsb2FkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1c2VyX2lkXSBSZXFTdHVkeVVwbG9hZCB1c2VyX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2lzX3NraXBdIFJlcVN0dWR5VXBsb2FkIGlzX3NraXBcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48ZmFybS5JU3R1ZHlSZXN1bHQ+fG51bGx9IFtzdHVkeV9yZXN1bHRdIFJlcVN0dWR5VXBsb2FkIHN0dWR5X3Jlc3VsdFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXFTdHVkeVVwbG9hZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxU3R1ZHlVcGxvYWQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXFTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFTdHVkeVVwbG9hZD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxU3R1ZHlVcGxvYWQocCkge1xuICAgICAgICAgICAgdGhpcy5zdHVkeV9yZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFTdHVkeVVwbG9hZCB1c2VyX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVzZXJfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFTdHVkeVVwbG9hZC5wcm90b3R5cGUudXNlcl9pZCA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcVN0dWR5VXBsb2FkIGlzX3NraXAuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpc19za2lwXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVN0dWR5VXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxU3R1ZHlVcGxvYWQucHJvdG90eXBlLmlzX3NraXAgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxU3R1ZHlVcGxvYWQgc3R1ZHlfcmVzdWx0LlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JU3R1ZHlSZXN1bHQ+fSBzdHVkeV9yZXN1bHRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFTdHVkeVVwbG9hZC5wcm90b3R5cGUuc3R1ZHlfcmVzdWx0ID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcVN0dWR5VXBsb2FkIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxU3R1ZHlVcGxvYWQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcVN0dWR5VXBsb2FkfSBtIFJlcVN0dWR5VXBsb2FkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcVN0dWR5VXBsb2FkLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS51c2VyX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ1c2VyX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5zdHJpbmcobS51c2VyX2lkKTtcbiAgICAgICAgICAgIGlmIChtLmlzX3NraXAgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlzX3NraXBcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0uaXNfc2tpcCk7XG4gICAgICAgICAgICBpZiAobS5zdHVkeV9yZXN1bHQgIT0gbnVsbCAmJiBtLnN0dWR5X3Jlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uc3R1ZHlfcmVzdWx0Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLlN0dWR5UmVzdWx0LmVuY29kZShtLnN0dWR5X3Jlc3VsdFtpXSwgdy51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlcVN0dWR5VXBsb2FkIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFTdHVkeVVwbG9hZH0gUmVxU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFTdHVkeVVwbG9hZC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFTdHVkeVVwbG9hZCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0udXNlcl9pZCA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5pc19za2lwID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0uc3R1ZHlfcmVzdWx0ICYmIG0uc3R1ZHlfcmVzdWx0Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0dWR5X3Jlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBtLnN0dWR5X3Jlc3VsdC5wdXNoKCRyb290LmZhcm0uU3R1ZHlSZXN1bHQuZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxU3R1ZHlVcGxvYWQgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVN0dWR5VXBsb2FkfSBSZXFTdHVkeVVwbG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxU3R1ZHlVcGxvYWQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcVN0dWR5VXBsb2FkKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFTdHVkeVVwbG9hZCgpO1xuICAgICAgICAgICAgaWYgKGQudXNlcl9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS51c2VyX2lkID0gU3RyaW5nKGQudXNlcl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5pc19za2lwICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uaXNfc2tpcCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaXNfc2tpcCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaXNfc2tpcCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pc19za2lwID0gcGFyc2VJbnQoZC5pc19za2lwLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaXNfc2tpcCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pc19za2lwID0gZC5pc19za2lwO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlzX3NraXAgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaXNfc2tpcCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlzX3NraXAubG93ID4+PiAwLCBkLmlzX3NraXAuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnN0dWR5X3Jlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnN0dWR5X3Jlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlcVN0dWR5VXBsb2FkLnN0dWR5X3Jlc3VsdDogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5zdHVkeV9yZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuc3R1ZHlfcmVzdWx0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5zdHVkeV9yZXN1bHRbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXFTdHVkeVVwbG9hZC5zdHVkeV9yZXN1bHQ6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbS5zdHVkeV9yZXN1bHRbaV0gPSAkcm9vdC5mYXJtLlN0dWR5UmVzdWx0LmZyb21PYmplY3QoZC5zdHVkeV9yZXN1bHRbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFTdHVkeVVwbG9hZCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFTdHVkeVVwbG9hZH0gbSBSZXFTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVN0dWR5VXBsb2FkLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuc3R1ZHlfcmVzdWx0ID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQudXNlcl9pZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaXNfc2tpcCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaXNfc2tpcCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnVzZXJfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidXNlcl9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQudXNlcl9pZCA9IG0udXNlcl9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlzX3NraXAgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaXNfc2tpcFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pc19za2lwID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlzX3NraXAgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pc19za2lwKSA6IG0uaXNfc2tpcDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaXNfc2tpcCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pc19za2lwKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlzX3NraXAubG93ID4+PiAwLCBtLmlzX3NraXAuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaXNfc2tpcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnN0dWR5X3Jlc3VsdCAmJiBtLnN0dWR5X3Jlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnN0dWR5X3Jlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5zdHVkeV9yZXN1bHQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5zdHVkeV9yZXN1bHRbal0gPSAkcm9vdC5mYXJtLlN0dWR5UmVzdWx0LnRvT2JqZWN0KG0uc3R1ZHlfcmVzdWx0W2pdLCBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFTdHVkeVVwbG9hZCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVN0dWR5VXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFTdHVkeVVwbG9hZC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcVN0dWR5VXBsb2FkO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BTdHVkeVVwbG9hZCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BTdHVkeVVwbG9hZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcFN0dWR5VXBsb2FkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGZhcm0uSVJlcz58bnVsbH0gW3Jlc19saXN0XSBSZXNwU3R1ZHlVcGxvYWQgcmVzX2xpc3RcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcFN0dWR5VXBsb2FkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwU3R1ZHlVcGxvYWQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFN0dWR5VXBsb2FkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwU3R1ZHlVcGxvYWQocCkge1xuICAgICAgICAgICAgdGhpcy5yZXNfbGlzdCA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BTdHVkeVVwbG9hZCByZXNfbGlzdC5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGZhcm0uSVJlcz59IHJlc19saXN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BTdHVkeVVwbG9hZC5wcm90b3R5cGUucmVzX2xpc3QgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVzcFN0dWR5VXBsb2FkIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcFN0dWR5VXBsb2FkLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFN0dWR5VXBsb2FkfSBtIFJlc3BTdHVkeVVwbG9hZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwU3R1ZHlVcGxvYWQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnJlc19saXN0ICE9IG51bGwgJiYgbS5yZXNfbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ucmVzX2xpc3QubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICRyb290LmZhcm0uUmVzLmVuY29kZShtLnJlc19saXN0W2ldLCB3LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcFN0dWR5VXBsb2FkIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFN0dWR5VXBsb2FkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFN0dWR5VXBsb2FkfSBSZXNwU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwU3R1ZHlVcGxvYWQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcFN0dWR5VXBsb2FkKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5yZXNfbGlzdCAmJiBtLnJlc19saXN0Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnJlc19saXN0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX2xpc3QucHVzaCgkcm9vdC5mYXJtLlJlcy5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwU3R1ZHlVcGxvYWQgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwU3R1ZHlVcGxvYWR9IFJlc3BTdHVkeVVwbG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFN0dWR5VXBsb2FkLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwU3R1ZHlVcGxvYWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BTdHVkeVVwbG9hZCgpO1xuICAgICAgICAgICAgaWYgKGQucmVzX2xpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5yZXNfbGlzdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BTdHVkeVVwbG9hZC5yZXNfbGlzdDogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5yZXNfbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5yZXNfbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucmVzX2xpc3RbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwU3R1ZHlVcGxvYWQucmVzX2xpc3Q6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfbGlzdFtpXSA9ICRyb290LmZhcm0uUmVzLmZyb21PYmplY3QoZC5yZXNfbGlzdFtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BTdHVkeVVwbG9hZCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwU3R1ZHlVcGxvYWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFN0dWR5VXBsb2FkfSBtIFJlc3BTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BTdHVkeVVwbG9hZC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLnJlc19saXN0ID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yZXNfbGlzdCAmJiBtLnJlc19saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQucmVzX2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0ucmVzX2xpc3QubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfbGlzdFtqXSA9ICRyb290LmZhcm0uUmVzLnRvT2JqZWN0KG0ucmVzX2xpc3Rbal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BTdHVkeVVwbG9hZCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BTdHVkeVVwbG9hZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFN0dWR5VXBsb2FkLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFN0dWR5VXBsb2FkO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlN0dWR5UmVzdWx0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgU3R1ZHlSZXN1bHQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVN0dWR5UmVzdWx0XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2l0ZW1faWRdIFN0dWR5UmVzdWx0IGl0ZW1faWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbcmVzdWx0XSBTdHVkeVJlc3VsdCByZXN1bHRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbcmVzX3R5cGVdIFN0dWR5UmVzdWx0IHJlc190eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3Jlc19udW1dIFN0dWR5UmVzdWx0IHJlc19udW1cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgU3R1ZHlSZXN1bHQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFN0dWR5UmVzdWx0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJU3R1ZHlSZXN1bHRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JU3R1ZHlSZXN1bHQ9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFN0dWR5UmVzdWx0KHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdHVkeVJlc3VsdCBpdGVtX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gaXRlbV9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5TdHVkeVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFN0dWR5UmVzdWx0LnByb3RvdHlwZS5pdGVtX2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN0dWR5UmVzdWx0IHJlc3VsdC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHJlc3VsdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5TdHVkeVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFN0dWR5UmVzdWx0LnByb3RvdHlwZS5yZXN1bHQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3R1ZHlSZXN1bHQgcmVzX3R5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSByZXNfdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5TdHVkeVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFN0dWR5UmVzdWx0LnByb3RvdHlwZS5yZXNfdHlwZSA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdHVkeVJlc3VsdCByZXNfbnVtLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gcmVzX251bVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5TdHVkeVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFN0dWR5UmVzdWx0LnByb3RvdHlwZS5yZXNfbnVtID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBTdHVkeVJlc3VsdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlN0dWR5UmVzdWx0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlN0dWR5UmVzdWx0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklTdHVkeVJlc3VsdH0gbSBTdHVkeVJlc3VsdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBTdHVkeVJlc3VsdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaXRlbV9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaXRlbV9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLml0ZW1faWQpO1xuICAgICAgICAgICAgaWYgKG0ucmVzdWx0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXN1bHRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0ucmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChtLnJlc190eXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXNfdHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50NjQobS5yZXNfdHlwZSk7XG4gICAgICAgICAgICBpZiAobS5yZXNfbnVtICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXNfbnVtXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQ2NChtLnJlc19udW0pO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBTdHVkeVJlc3VsdCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlN0dWR5UmVzdWx0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uU3R1ZHlSZXN1bHR9IFN0dWR5UmVzdWx0XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgU3R1ZHlSZXN1bHQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uU3R1ZHlSZXN1bHQoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5yZXN1bHQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfdHlwZSA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnJlc19udW0gPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFN0dWR5UmVzdWx0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uU3R1ZHlSZXN1bHRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5TdHVkeVJlc3VsdH0gU3R1ZHlSZXN1bHRcbiAgICAgICAgICovXG4gICAgICAgIFN0dWR5UmVzdWx0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5TdHVkeVJlc3VsdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uU3R1ZHlSZXN1bHQoKTtcbiAgICAgICAgICAgIGlmIChkLml0ZW1faWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pdGVtX2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pdGVtX2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pdGVtX2lkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWQgPSBwYXJzZUludChkLml0ZW1faWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pdGVtX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWQgPSBkLml0ZW1faWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaXRlbV9pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaXRlbV9pZC5sb3cgPj4+IDAsIGQuaXRlbV9pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ucmVzdWx0ID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5yZXN1bHQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnJlc3VsdCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXN1bHQgPSBwYXJzZUludChkLnJlc3VsdCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnJlc3VsdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXN1bHQgPSBkLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXN1bHQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzdWx0ID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQucmVzdWx0LmxvdyA+Pj4gMCwgZC5yZXN1bHQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnJlc190eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ucmVzX3R5cGUgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnJlc190eXBlKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfdHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfdHlwZSA9IHBhcnNlSW50KGQucmVzX3R5cGUsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfdHlwZSA9IGQucmVzX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX3R5cGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX3R5cGUgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5yZXNfdHlwZS5sb3cgPj4+IDAsIGQucmVzX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnJlc19udW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5yZXNfbnVtID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5yZXNfbnVtKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfbnVtID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnJlc19udW0gPSBwYXJzZUludChkLnJlc19udW0sIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfbnVtID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnJlc19udW0gPSBkLnJlc19udW07XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX251bSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfbnVtID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQucmVzX251bS5sb3cgPj4+IDAsIGQucmVzX251bS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFN0dWR5UmVzdWx0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlN0dWR5UmVzdWx0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlN0dWR5UmVzdWx0fSBtIFN0dWR5UmVzdWx0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgU3R1ZHlSZXN1bHQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaXRlbV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaXRlbV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXN1bHQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc3VsdCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLml0ZW1faWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaXRlbV9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pdGVtX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLml0ZW1faWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pdGVtX2lkKSA6IG0uaXRlbV9pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaXRlbV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pdGVtX2lkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLml0ZW1faWQubG93ID4+PiAwLCBtLml0ZW1faWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaXRlbV9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnJlc3VsdCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyZXN1bHRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ucmVzdWx0ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnJlc3VsdCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnJlc3VsdCkgOiBtLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzdWx0ID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnJlc3VsdCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5yZXN1bHQubG93ID4+PiAwLCBtLnJlc3VsdC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5yZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yZXNfdHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyZXNfdHlwZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5yZXNfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnJlc190eXBlKSA6IG0ucmVzX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc190eXBlID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnJlc190eXBlKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnJlc190eXBlLmxvdyA+Pj4gMCwgbS5yZXNfdHlwZS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5yZXNfdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnJlc19udW0gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicmVzX251bVwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5yZXNfbnVtID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnJlc19udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5yZXNfbnVtKSA6IG0ucmVzX251bTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5yZXNfbnVtKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnJlc19udW0ubG93ID4+PiAwLCBtLnJlc19udW0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ucmVzX251bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFN0dWR5UmVzdWx0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uU3R1ZHlSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFN0dWR5UmVzdWx0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gU3R1ZHlSZXN1bHQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbcmVzX3R5cGVdIFJlcyByZXNfdHlwZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtyZXNfbnVtXSBSZXMgcmVzX251bVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXMuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXM9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlcyhwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzIHJlc190eXBlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gcmVzX3R5cGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzLnByb3RvdHlwZS5yZXNfdHlwZSA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXMgcmVzX251bS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHJlc19udW1cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzLnByb3RvdHlwZS5yZXNfbnVtID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXMgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXN9IG0gUmVzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ucmVzX3R5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInJlc190eXBlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0ucmVzX3R5cGUpO1xuICAgICAgICAgICAgaWYgKG0ucmVzX251bSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicmVzX251bVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50NjQobS5yZXNfbnVtKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzfSBSZXNcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfdHlwZSA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLnJlc19udW0gPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc30gUmVzXG4gICAgICAgICAqL1xuICAgICAgICBSZXMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzKCk7XG4gICAgICAgICAgICBpZiAoZC5yZXNfdHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLnJlc190eXBlID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5yZXNfdHlwZSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX3R5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX3R5cGUgPSBwYXJzZUludChkLnJlc190eXBlLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX3R5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX3R5cGUgPSBkLnJlc190eXBlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnJlc190eXBlID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLnJlc190eXBlID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQucmVzX3R5cGUubG93ID4+PiAwLCBkLnJlc190eXBlLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5yZXNfbnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ucmVzX251bSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQucmVzX251bSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX251bSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfbnVtID0gcGFyc2VJbnQoZC5yZXNfbnVtLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX251bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfbnVtID0gZC5yZXNfbnVtO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnJlc19udW0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX251bSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnJlc19udW0ubG93ID4+PiAwLCBkLnJlc19udW0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc30gbSBSZXNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc190eXBlID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnJlc19udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc19udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yZXNfdHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyZXNfdHlwZVwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5yZXNfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnJlc190eXBlKSA6IG0ucmVzX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc190eXBlID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnJlc190eXBlKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnJlc190eXBlLmxvdyA+Pj4gMCwgbS5yZXNfdHlwZS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5yZXNfdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnJlc19udW0gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicmVzX251bVwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5yZXNfbnVtID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnJlc19udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5yZXNfbnVtKSA6IG0ucmVzX251bTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5yZXNfbnVtKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnJlc19udW0ubG93ID4+PiAwLCBtLnJlc19udW0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ucmVzX251bTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcUdhbWVVcGxvYWQgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFHYW1lVXBsb2FkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFHYW1lVXBsb2FkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1c2VyX2lkXSBSZXFHYW1lVXBsb2FkIHVzZXJfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbc3RhcnRfdGltZV0gUmVxR2FtZVVwbG9hZCBzdGFydF90aW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2VuZF90aW1lXSBSZXFHYW1lVXBsb2FkIGVuZF90aW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGZhcm0uSUdhbWVSZXN1bHQ+fG51bGx9IFtnYW1lX3Jlc3VsdF0gUmVxR2FtZVVwbG9hZCBnYW1lX3Jlc3VsdFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbbW9kZV0gUmVxR2FtZVVwbG9hZCBtb2RlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFttb2RlX3BhcmFtXSBSZXFHYW1lVXBsb2FkIG1vZGVfcGFyYW1cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2dhbWVfdHlwZV0gUmVxR2FtZVVwbG9hZCBnYW1lX3R5cGVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxR2FtZVVwbG9hZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxR2FtZVVwbG9hZC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcUdhbWVVcGxvYWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxR2FtZVVwbG9hZD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxR2FtZVVwbG9hZChwKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWVfcmVzdWx0ID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxR2FtZVVwbG9hZCB1c2VyX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVzZXJfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVVwbG9hZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVVcGxvYWQucHJvdG90eXBlLnVzZXJfaWQgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFHYW1lVXBsb2FkIHN0YXJ0X3RpbWUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBzdGFydF90aW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lVXBsb2FkLnByb3RvdHlwZS5zdGFydF90aW1lID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUdhbWVVcGxvYWQgZW5kX3RpbWUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBlbmRfdGltZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lVXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxR2FtZVVwbG9hZC5wcm90b3R5cGUuZW5kX3RpbWUgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxR2FtZVVwbG9hZCBnYW1lX3Jlc3VsdC5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGZhcm0uSUdhbWVSZXN1bHQ+fSBnYW1lX3Jlc3VsdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lVXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxR2FtZVVwbG9hZC5wcm90b3R5cGUuZ2FtZV9yZXN1bHQgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFHYW1lVXBsb2FkIG1vZGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gbW9kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lVXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxR2FtZVVwbG9hZC5wcm90b3R5cGUubW9kZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUdhbWVVcGxvYWQgbW9kZV9wYXJhbS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBtb2RlX3BhcmFtXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lVXBsb2FkLnByb3RvdHlwZS5tb2RlX3BhcmFtID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxR2FtZVVwbG9hZCBnYW1lX3R5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gZ2FtZV90eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lVXBsb2FkLnByb3RvdHlwZS5nYW1lX3R5cGUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxR2FtZVVwbG9hZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcUdhbWVVcGxvYWQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxR2FtZVVwbG9hZH0gbSBSZXFHYW1lVXBsb2FkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVVcGxvYWQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnVzZXJfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVzZXJfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLnN0cmluZyhtLnVzZXJfaWQpO1xuICAgICAgICAgICAgaWYgKG0uc3RhcnRfdGltZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic3RhcnRfdGltZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50NjQobS5zdGFydF90aW1lKTtcbiAgICAgICAgICAgIGlmIChtLmVuZF90aW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJlbmRfdGltZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50NjQobS5lbmRfdGltZSk7XG4gICAgICAgICAgICBpZiAobS5nYW1lX3Jlc3VsdCAhPSBudWxsICYmIG0uZ2FtZV9yZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmdhbWVfcmVzdWx0Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLkdhbWVSZXN1bHQuZW5jb2RlKG0uZ2FtZV9yZXN1bHRbaV0sIHcudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubW9kZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibW9kZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig0MCkuaW50MzIobS5tb2RlKTtcbiAgICAgICAgICAgIGlmIChtLm1vZGVfcGFyYW0gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm1vZGVfcGFyYW1cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTApLnN0cmluZyhtLm1vZGVfcGFyYW0pO1xuICAgICAgICAgICAgaWYgKG0uZ2FtZV90eXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJnYW1lX3R5cGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTYpLmludDMyKG0uZ2FtZV90eXBlKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxR2FtZVVwbG9hZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUdhbWVVcGxvYWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFHYW1lVXBsb2FkfSBSZXFHYW1lVXBsb2FkXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxR2FtZVVwbG9hZC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFHYW1lVXBsb2FkKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS51c2VyX2lkID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLnN0YXJ0X3RpbWUgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5lbmRfdGltZSA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmdhbWVfcmVzdWx0ICYmIG0uZ2FtZV9yZXN1bHQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9yZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5nYW1lX3Jlc3VsdC5wdXNoKCRyb290LmZhcm0uR2FtZVJlc3VsdC5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG0ubW9kZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtLm1vZGVfcGFyYW0gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFHYW1lVXBsb2FkIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcUdhbWVVcGxvYWR9IFJlcUdhbWVVcGxvYWRcbiAgICAgICAgICovXG4gICAgICAgIFJlcUdhbWVVcGxvYWQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcUdhbWVVcGxvYWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUdhbWVVcGxvYWQoKTtcbiAgICAgICAgICAgIGlmIChkLnVzZXJfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0udXNlcl9pZCA9IFN0cmluZyhkLnVzZXJfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuc3RhcnRfdGltZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLnN0YXJ0X3RpbWUgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnN0YXJ0X3RpbWUpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXJ0X3RpbWUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uc3RhcnRfdGltZSA9IHBhcnNlSW50KGQuc3RhcnRfdGltZSwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXJ0X3RpbWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uc3RhcnRfdGltZSA9IGQuc3RhcnRfdGltZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zdGFydF90aW1lID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLnN0YXJ0X3RpbWUgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5zdGFydF90aW1lLmxvdyA+Pj4gMCwgZC5zdGFydF90aW1lLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5lbmRfdGltZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmVuZF90aW1lID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5lbmRfdGltZSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuZW5kX3RpbWUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZW5kX3RpbWUgPSBwYXJzZUludChkLmVuZF90aW1lLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuZW5kX3RpbWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uZW5kX3RpbWUgPSBkLmVuZF90aW1lO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmVuZF90aW1lID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmVuZF90aW1lID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuZW5kX3RpbWUubG93ID4+PiAwLCBkLmVuZF90aW1lLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5nYW1lX3Jlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmdhbWVfcmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVxR2FtZVVwbG9hZC5nYW1lX3Jlc3VsdDogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5nYW1lX3Jlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5nYW1lX3Jlc3VsdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuZ2FtZV9yZXN1bHRbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXFHYW1lVXBsb2FkLmdhbWVfcmVzdWx0OiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9yZXN1bHRbaV0gPSAkcm9vdC5mYXJtLkdhbWVSZXN1bHQuZnJvbU9iamVjdChkLmdhbWVfcmVzdWx0W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLm1vZGUgPSBkLm1vZGUgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubW9kZV9wYXJhbSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5tb2RlX3BhcmFtID0gU3RyaW5nKGQubW9kZV9wYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5nYW1lX3R5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uZ2FtZV90eXBlID0gZC5nYW1lX3R5cGUgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcUdhbWVVcGxvYWQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxR2FtZVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFHYW1lVXBsb2FkfSBtIFJlcUdhbWVVcGxvYWRcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lVXBsb2FkLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuZ2FtZV9yZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC51c2VyX2lkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFydF90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFydF90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmVuZF90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5lbmRfdGltZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLm1vZGUgPSAwO1xuICAgICAgICAgICAgICAgIGQubW9kZV9wYXJhbSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udXNlcl9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ1c2VyX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC51c2VyX2lkID0gbS51c2VyX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3RhcnRfdGltZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdGFydF90aW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnN0YXJ0X3RpbWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuc3RhcnRfdGltZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnN0YXJ0X3RpbWUpIDogbS5zdGFydF90aW1lO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFydF90aW1lID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnN0YXJ0X3RpbWUpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc3RhcnRfdGltZS5sb3cgPj4+IDAsIG0uc3RhcnRfdGltZS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zdGFydF90aW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZW5kX3RpbWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZW5kX3RpbWVcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uZW5kX3RpbWUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuZW5kX3RpbWUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5lbmRfdGltZSkgOiBtLmVuZF90aW1lO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5lbmRfdGltZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5lbmRfdGltZSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5lbmRfdGltZS5sb3cgPj4+IDAsIG0uZW5kX3RpbWUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZW5kX3RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5nYW1lX3Jlc3VsdCAmJiBtLmdhbWVfcmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuZ2FtZV9yZXN1bHQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uZ2FtZV9yZXN1bHQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5nYW1lX3Jlc3VsdFtqXSA9ICRyb290LmZhcm0uR2FtZVJlc3VsdC50b09iamVjdChtLmdhbWVfcmVzdWx0W2pdLCBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tb2RlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1vZGVcIikpIHtcbiAgICAgICAgICAgICAgICBkLm1vZGUgPSBtLm1vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tb2RlX3BhcmFtICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1vZGVfcGFyYW1cIikpIHtcbiAgICAgICAgICAgICAgICBkLm1vZGVfcGFyYW0gPSBtLm1vZGVfcGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5nYW1lX3R5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZ2FtZV90eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5nYW1lX3R5cGUgPSBtLmdhbWVfdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcUdhbWVVcGxvYWQgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFHYW1lVXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFHYW1lVXBsb2FkLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxR2FtZVVwbG9hZDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwR2FtZVVwbG9hZCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BHYW1lVXBsb2FkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklSZXM+fG51bGx9IFtyZXNfbGlzdF0gUmVzcEdhbWVVcGxvYWQgcmVzX2xpc3RcbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLklHYW1lUmVjb3JkfG51bGx9IFtnYW1lX3JlY29yZF0gUmVzcEdhbWVVcGxvYWQgZ2FtZV9yZWNvcmRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW21vZGVdIFJlc3BHYW1lVXBsb2FkIG1vZGVcbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLklNb2RlUmVzdWx0fG51bGx9IFttb2RlX3Jlc3VsdF0gUmVzcEdhbWVVcGxvYWQgbW9kZV9yZXN1bHRcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48c3RyaW5nPnxudWxsfSBbdGtmaWdodF9tZXNzYWdlXSBSZXNwR2FtZVVwbG9hZCB0a2ZpZ2h0X21lc3NhZ2VcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyfExvbmc+fG51bGx9IFt0YXN0X2NvbXBsZXRlZF0gUmVzcEdhbWVVcGxvYWQgdGFzdF9jb21wbGV0ZWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbcGxheV9udW1dIFJlc3BHYW1lVXBsb2FkIHBsYXlfbnVtXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BHYW1lVXBsb2FkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwR2FtZVVwbG9hZC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BHYW1lVXBsb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BHYW1lVXBsb2FkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwR2FtZVVwbG9hZChwKSB7XG4gICAgICAgICAgICB0aGlzLnJlc19saXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLnRrZmlnaHRfbWVzc2FnZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy50YXN0X2NvbXBsZXRlZCA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BHYW1lVXBsb2FkIHJlc19saXN0LlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JUmVzPn0gcmVzX2xpc3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVVwbG9hZC5wcm90b3R5cGUucmVzX2xpc3QgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwR2FtZVVwbG9hZCBnYW1lX3JlY29yZC5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5JR2FtZVJlY29yZHxudWxsfHVuZGVmaW5lZH0gZ2FtZV9yZWNvcmRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVVwbG9hZC5wcm90b3R5cGUuZ2FtZV9yZWNvcmQgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwR2FtZVVwbG9hZCBtb2RlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IG1vZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVVwbG9hZC5wcm90b3R5cGUubW9kZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BHYW1lVXBsb2FkIG1vZGVfcmVzdWx0LlxuICAgICAgICAgKiBAbWVtYmVyIHtmYXJtLklNb2RlUmVzdWx0fG51bGx8dW5kZWZpbmVkfSBtb2RlX3Jlc3VsdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lVXBsb2FkLnByb3RvdHlwZS5tb2RlX3Jlc3VsdCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BHYW1lVXBsb2FkIHRrZmlnaHRfbWVzc2FnZS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPHN0cmluZz59IHRrZmlnaHRfbWVzc2FnZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lVXBsb2FkLnByb3RvdHlwZS50a2ZpZ2h0X21lc3NhZ2UgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwR2FtZVVwbG9hZCB0YXN0X2NvbXBsZXRlZC5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcnxMb25nPn0gdGFzdF9jb21wbGV0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVVcGxvYWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVVwbG9hZC5wcm90b3R5cGUudGFzdF9jb21wbGV0ZWQgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwR2FtZVVwbG9hZCBwbGF5X251bS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHBsYXlfbnVtXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BHYW1lVXBsb2FkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEdhbWVVcGxvYWQucHJvdG90eXBlLnBsYXlfbnVtID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwR2FtZVVwbG9hZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BHYW1lVXBsb2FkLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BHYW1lVXBsb2FkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwR2FtZVVwbG9hZH0gbSBSZXNwR2FtZVVwbG9hZCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwR2FtZVVwbG9hZC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ucmVzX2xpc3QgIT0gbnVsbCAmJiBtLnJlc19saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5yZXNfbGlzdC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5SZXMuZW5jb2RlKG0ucmVzX2xpc3RbaV0sIHcudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZ2FtZV9yZWNvcmQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImdhbWVfcmVjb3JkXCIpKVxuICAgICAgICAgICAgICAgICRyb290LmZhcm0uR2FtZVJlY29yZC5lbmNvZGUobS5nYW1lX3JlY29yZCwgdy51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICBpZiAobS5tb2RlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtb2RlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI0KS5pbnQzMihtLm1vZGUpO1xuICAgICAgICAgICAgaWYgKG0ubW9kZV9yZXN1bHQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm1vZGVfcmVzdWx0XCIpKVxuICAgICAgICAgICAgICAgICRyb290LmZhcm0uTW9kZVJlc3VsdC5lbmNvZGUobS5tb2RlX3Jlc3VsdCwgdy51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICBpZiAobS50a2ZpZ2h0X21lc3NhZ2UgIT0gbnVsbCAmJiBtLnRrZmlnaHRfbWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0udGtmaWdodF9tZXNzYWdlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMig0Mikuc3RyaW5nKG0udGtmaWdodF9tZXNzYWdlW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRhc3RfY29tcGxldGVkICE9IG51bGwgJiYgbS50YXN0X2NvbXBsZXRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1MCkuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS50YXN0X2NvbXBsZXRlZC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLnRhc3RfY29tcGxldGVkW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucGxheV9udW0gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInBsYXlfbnVtXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDU2KS5pbnQ2NChtLnBsYXlfbnVtKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcEdhbWVVcGxvYWQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BHYW1lVXBsb2FkfSBSZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lVXBsb2FkLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BHYW1lVXBsb2FkKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5yZXNfbGlzdCAmJiBtLnJlc19saXN0Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnJlc19saXN0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX2xpc3QucHVzaCgkcm9vdC5mYXJtLlJlcy5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uZ2FtZV9yZWNvcmQgPSAkcm9vdC5mYXJtLkdhbWVSZWNvcmQuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0ubW9kZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLm1vZGVfcmVzdWx0ID0gJHJvb3QuZmFybS5Nb2RlUmVzdWx0LmRlY29kZShyLCByLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnRrZmlnaHRfbWVzc2FnZSAmJiBtLnRrZmlnaHRfbWVzc2FnZS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS50a2ZpZ2h0X21lc3NhZ2UgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS50a2ZpZ2h0X21lc3NhZ2UucHVzaChyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnRhc3RfY29tcGxldGVkICYmIG0udGFzdF9jb21wbGV0ZWQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udGFzdF9jb21wbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udGFzdF9jb21wbGV0ZWQucHVzaChyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udGFzdF9jb21wbGV0ZWQucHVzaChyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG0ucGxheV9udW0gPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BHYW1lVXBsb2FkIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEdhbWVVcGxvYWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwR2FtZVVwbG9hZH0gUmVzcEdhbWVVcGxvYWRcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lVXBsb2FkLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwR2FtZVVwbG9hZClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcEdhbWVVcGxvYWQoKTtcbiAgICAgICAgICAgIGlmIChkLnJlc19saXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQucmVzX2xpc3QpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwR2FtZVVwbG9hZC5yZXNfbGlzdDogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5yZXNfbGlzdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5yZXNfbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucmVzX2xpc3RbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwR2FtZVVwbG9hZC5yZXNfbGlzdDogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLnJlc19saXN0W2ldID0gJHJvb3QuZmFybS5SZXMuZnJvbU9iamVjdChkLnJlc19saXN0W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5nYW1lX3JlY29yZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLmdhbWVfcmVjb3JkICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwR2FtZVVwbG9hZC5nYW1lX3JlY29yZDogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uZ2FtZV9yZWNvcmQgPSAkcm9vdC5mYXJtLkdhbWVSZWNvcmQuZnJvbU9iamVjdChkLmdhbWVfcmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm1vZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubW9kZSA9IGQubW9kZSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tb2RlX3Jlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLm1vZGVfcmVzdWx0ICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwR2FtZVVwbG9hZC5tb2RlX3Jlc3VsdDogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0ubW9kZV9yZXN1bHQgPSAkcm9vdC5mYXJtLk1vZGVSZXN1bHQuZnJvbU9iamVjdChkLm1vZGVfcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRrZmlnaHRfbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnRrZmlnaHRfbWVzc2FnZSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BHYW1lVXBsb2FkLnRrZmlnaHRfbWVzc2FnZTogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS50a2ZpZ2h0X21lc3NhZ2UgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQudGtmaWdodF9tZXNzYWdlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIG0udGtmaWdodF9tZXNzYWdlW2ldID0gU3RyaW5nKGQudGtmaWdodF9tZXNzYWdlW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50YXN0X2NvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnRhc3RfY29tcGxldGVkKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcEdhbWVVcGxvYWQudGFzdF9jb21wbGV0ZWQ6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0udGFzdF9jb21wbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQudGFzdF9jb21wbGV0ZWQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS50YXN0X2NvbXBsZXRlZFtpXSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQudGFzdF9jb21wbGV0ZWRbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50YXN0X2NvbXBsZXRlZFtpXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udGFzdF9jb21wbGV0ZWRbaV0gPSBwYXJzZUludChkLnRhc3RfY29tcGxldGVkW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRhc3RfY29tcGxldGVkW2ldID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS50YXN0X2NvbXBsZXRlZFtpXSA9IGQudGFzdF9jb21wbGV0ZWRbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRhc3RfY29tcGxldGVkW2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS50YXN0X2NvbXBsZXRlZFtpXSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnRhc3RfY29tcGxldGVkW2ldLmxvdyA+Pj4gMCwgZC50YXN0X2NvbXBsZXRlZFtpXS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnBsYXlfbnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ucGxheV9udW0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnBsYXlfbnVtKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5wbGF5X251bSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5wbGF5X251bSA9IHBhcnNlSW50KGQucGxheV9udW0sIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5wbGF5X251bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5wbGF5X251bSA9IGQucGxheV9udW07XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucGxheV9udW0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucGxheV9udW0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5wbGF5X251bS5sb3cgPj4+IDAsIGQucGxheV9udW0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwR2FtZVVwbG9hZCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXNwR2FtZVVwbG9hZH0gbSBSZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BHYW1lVXBsb2FkLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQucmVzX2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBkLnRrZmlnaHRfbWVzc2FnZSA9IFtdO1xuICAgICAgICAgICAgICAgIGQudGFzdF9jb21wbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5nYW1lX3JlY29yZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgZC5tb2RlID0gMDtcbiAgICAgICAgICAgICAgICBkLm1vZGVfcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5wbGF5X251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucGxheV9udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yZXNfbGlzdCAmJiBtLnJlc19saXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQucmVzX2xpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0ucmVzX2xpc3QubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfbGlzdFtqXSA9ICRyb290LmZhcm0uUmVzLnRvT2JqZWN0KG0ucmVzX2xpc3Rbal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmdhbWVfcmVjb3JkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImdhbWVfcmVjb3JkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5nYW1lX3JlY29yZCA9ICRyb290LmZhcm0uR2FtZVJlY29yZC50b09iamVjdChtLmdhbWVfcmVjb3JkLCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1vZGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibW9kZVwiKSkge1xuICAgICAgICAgICAgICAgIGQubW9kZSA9IG0ubW9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1vZGVfcmVzdWx0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1vZGVfcmVzdWx0XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5tb2RlX3Jlc3VsdCA9ICRyb290LmZhcm0uTW9kZVJlc3VsdC50b09iamVjdChtLm1vZGVfcmVzdWx0LCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRrZmlnaHRfbWVzc2FnZSAmJiBtLnRrZmlnaHRfbWVzc2FnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnRrZmlnaHRfbWVzc2FnZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS50a2ZpZ2h0X21lc3NhZ2UubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC50a2ZpZ2h0X21lc3NhZ2Vbal0gPSBtLnRrZmlnaHRfbWVzc2FnZVtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50YXN0X2NvbXBsZXRlZCAmJiBtLnRhc3RfY29tcGxldGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQudGFzdF9jb21wbGV0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0udGFzdF9jb21wbGV0ZWQubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnRhc3RfY29tcGxldGVkW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC50YXN0X2NvbXBsZXRlZFtqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnRhc3RfY29tcGxldGVkW2pdKSA6IG0udGFzdF9jb21wbGV0ZWRbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQudGFzdF9jb21wbGV0ZWRbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udGFzdF9jb21wbGV0ZWRbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0udGFzdF9jb21wbGV0ZWRbal0ubG93ID4+PiAwLCBtLnRhc3RfY29tcGxldGVkW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnRhc3RfY29tcGxldGVkW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnBsYXlfbnVtICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInBsYXlfbnVtXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnBsYXlfbnVtID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnBsYXlfbnVtID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0ucGxheV9udW0pIDogbS5wbGF5X251bTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucGxheV9udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ucGxheV9udW0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ucGxheV9udW0ubG93ID4+PiAwLCBtLnBsYXlfbnVtLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnBsYXlfbnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcEdhbWVVcGxvYWQgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwR2FtZVVwbG9hZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEdhbWVVcGxvYWQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwR2FtZVVwbG9hZDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5HYW1lUmVzdWx0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgR2FtZVJlc3VsdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJR2FtZVJlc3VsdFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpdGVtX2lkXSBHYW1lUmVzdWx0IGl0ZW1faWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbcmVzdWx0XSBHYW1lUmVzdWx0IHJlc3VsdFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtyZXNfdHlwZV0gR2FtZVJlc3VsdCByZXNfdHlwZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtyZXNfbnVtXSBHYW1lUmVzdWx0IHJlc19udW1cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbY2F0Y2hfbnVtXSBHYW1lUmVzdWx0IGNhdGNoX251bVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbcmVhY3RfdGltZV0gR2FtZVJlc3VsdCByZWFjdF90aW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2lzX2NyaXRdIEdhbWVSZXN1bHQgaXNfY3JpdFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBHYW1lUmVzdWx0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBHYW1lUmVzdWx0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJR2FtZVJlc3VsdFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklHYW1lUmVzdWx0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHYW1lUmVzdWx0KHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVzdWx0IGl0ZW1faWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpdGVtX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVzdWx0LnByb3RvdHlwZS5pdGVtX2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVSZXN1bHQgcmVzdWx0LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gcmVzdWx0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVzdWx0LnByb3RvdHlwZS5yZXN1bHQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVJlc3VsdCByZXNfdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHJlc190eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVzdWx0LnByb3RvdHlwZS5yZXNfdHlwZSA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVzdWx0IHJlc19udW0uXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSByZXNfbnVtXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVzdWx0LnByb3RvdHlwZS5yZXNfbnVtID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVSZXN1bHQgY2F0Y2hfbnVtLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gY2F0Y2hfbnVtXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVzdWx0LnByb3RvdHlwZS5jYXRjaF9udW0gPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVJlc3VsdCByZWFjdF90aW1lLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHJlYWN0X3RpbWVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZXN1bHQucHJvdG90eXBlLnJlYWN0X3RpbWUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVzdWx0IGlzX2NyaXQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpc19jcml0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVzdWx0LnByb3RvdHlwZS5pc19jcml0ID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBHYW1lUmVzdWx0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uR2FtZVJlc3VsdC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lUmVzdWx0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklHYW1lUmVzdWx0fSBtIEdhbWVSZXN1bHQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlc3VsdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaXRlbV9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaXRlbV9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLml0ZW1faWQpO1xuICAgICAgICAgICAgaWYgKG0ucmVzdWx0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXN1bHRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0ucmVzdWx0KTtcbiAgICAgICAgICAgIGlmIChtLnJlc190eXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXNfdHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50NjQobS5yZXNfdHlwZSk7XG4gICAgICAgICAgICBpZiAobS5yZXNfbnVtICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZXNfbnVtXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQ2NChtLnJlc19udW0pO1xuICAgICAgICAgICAgaWYgKG0uY2F0Y2hfbnVtICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjYXRjaF9udW1cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDApLmludDY0KG0uY2F0Y2hfbnVtKTtcbiAgICAgICAgICAgIGlmIChtLnJlYWN0X3RpbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInJlYWN0X3RpbWVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDkpLmRvdWJsZShtLnJlYWN0X3RpbWUpO1xuICAgICAgICAgICAgaWYgKG0uaXNfY3JpdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaXNfY3JpdFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1NikuaW50NjQobS5pc19jcml0KTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgR2FtZVJlc3VsdCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVSZXN1bHRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5HYW1lUmVzdWx0fSBHYW1lUmVzdWx0XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlc3VsdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5HYW1lUmVzdWx0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0ucmVzdWx0ID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX3R5cGUgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfbnVtID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG0uY2F0Y2hfbnVtID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG0ucmVhY3RfdGltZSA9IHIuZG91YmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbS5pc19jcml0ID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBHYW1lUmVzdWx0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlc3VsdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkdhbWVSZXN1bHR9IEdhbWVSZXN1bHRcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZXN1bHQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkdhbWVSZXN1bHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkdhbWVSZXN1bHQoKTtcbiAgICAgICAgICAgIGlmIChkLml0ZW1faWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pdGVtX2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pdGVtX2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pdGVtX2lkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWQgPSBwYXJzZUludChkLml0ZW1faWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pdGVtX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLml0ZW1faWQgPSBkLml0ZW1faWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaXRlbV9pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pdGVtX2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaXRlbV9pZC5sb3cgPj4+IDAsIGQuaXRlbV9pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ucmVzdWx0ID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5yZXN1bHQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnJlc3VsdCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXN1bHQgPSBwYXJzZUludChkLnJlc3VsdCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnJlc3VsdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXN1bHQgPSBkLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXN1bHQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzdWx0ID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQucmVzdWx0LmxvdyA+Pj4gMCwgZC5yZXN1bHQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnJlc190eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ucmVzX3R5cGUgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnJlc190eXBlKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfdHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfdHlwZSA9IHBhcnNlSW50KGQucmVzX3R5cGUsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfdHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfdHlwZSA9IGQucmVzX3R5cGU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX3R5cGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ucmVzX3R5cGUgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5yZXNfdHlwZS5sb3cgPj4+IDAsIGQucmVzX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnJlc19udW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5yZXNfbnVtID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5yZXNfbnVtKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfbnVtID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnJlc19udW0gPSBwYXJzZUludChkLnJlc19udW0sIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5yZXNfbnVtID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnJlc19udW0gPSBkLnJlc19udW07XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQucmVzX251bSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5yZXNfbnVtID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQucmVzX251bS5sb3cgPj4+IDAsIGQucmVzX251bS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY2F0Y2hfbnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uY2F0Y2hfbnVtID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5jYXRjaF9udW0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmNhdGNoX251bSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5jYXRjaF9udW0gPSBwYXJzZUludChkLmNhdGNoX251bSwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmNhdGNoX251bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5jYXRjaF9udW0gPSBkLmNhdGNoX251bTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jYXRjaF9udW0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uY2F0Y2hfbnVtID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuY2F0Y2hfbnVtLmxvdyA+Pj4gMCwgZC5jYXRjaF9udW0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnJlYWN0X3RpbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ucmVhY3RfdGltZSA9IE51bWJlcihkLnJlYWN0X3RpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuaXNfY3JpdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmlzX2NyaXQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlzX2NyaXQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlzX2NyaXQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaXNfY3JpdCA9IHBhcnNlSW50KGQuaXNfY3JpdCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlzX2NyaXQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaXNfY3JpdCA9IGQuaXNfY3JpdDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pc19jcml0ID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlzX2NyaXQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pc19jcml0LmxvdyA+Pj4gMCwgZC5pc19jcml0LmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgR2FtZVJlc3VsdCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lUmVzdWx0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLkdhbWVSZXN1bHR9IG0gR2FtZVJlc3VsdFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZXN1bHQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaXRlbV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaXRlbV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXN1bHQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc3VsdCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQucmVzX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5jYXRjaF9udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmNhdGNoX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLnJlYWN0X3RpbWUgPSAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmlzX2NyaXQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlzX2NyaXQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pdGVtX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIml0ZW1faWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaXRlbV9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pdGVtX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaXRlbV9pZCkgOiBtLml0ZW1faWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLml0ZW1faWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaXRlbV9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pdGVtX2lkLmxvdyA+Pj4gMCwgbS5pdGVtX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLml0ZW1faWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yZXN1bHQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicmVzdWx0XCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnJlc3VsdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5yZXN1bHQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5yZXN1bHQpIDogbS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc3VsdCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5yZXN1bHQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ucmVzdWx0LmxvdyA+Pj4gMCwgbS5yZXN1bHQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ucmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucmVzX3R5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicmVzX3R5cGVcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ucmVzX3R5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQucmVzX3R5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5yZXNfdHlwZSkgOiBtLnJlc190eXBlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfdHlwZSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5yZXNfdHlwZSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5yZXNfdHlwZS5sb3cgPj4+IDAsIG0ucmVzX3R5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ucmVzX3R5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yZXNfbnVtICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInJlc19udW1cIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ucmVzX251bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5yZXNfbnVtID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0ucmVzX251bSkgOiBtLnJlc19udW07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnJlc19udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ucmVzX251bSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5yZXNfbnVtLmxvdyA+Pj4gMCwgbS5yZXNfbnVtLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnJlc19udW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jYXRjaF9udW0gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY2F0Y2hfbnVtXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmNhdGNoX251bSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5jYXRjaF9udW0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5jYXRjaF9udW0pIDogbS5jYXRjaF9udW07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmNhdGNoX251bSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5jYXRjaF9udW0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uY2F0Y2hfbnVtLmxvdyA+Pj4gMCwgbS5jYXRjaF9udW0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uY2F0Y2hfbnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucmVhY3RfdGltZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyZWFjdF90aW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5yZWFjdF90aW1lID0gby5qc29uICYmICFpc0Zpbml0ZShtLnJlYWN0X3RpbWUpID8gU3RyaW5nKG0ucmVhY3RfdGltZSkgOiBtLnJlYWN0X3RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pc19jcml0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlzX2NyaXRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaXNfY3JpdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pc19jcml0ID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaXNfY3JpdCkgOiBtLmlzX2NyaXQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlzX2NyaXQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaXNfY3JpdCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pc19jcml0LmxvdyA+Pj4gMCwgbS5pc19jcml0LmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlzX2NyaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBHYW1lUmVzdWx0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlc3VsdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEdhbWVSZXN1bHQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uR2FtZVJlY29yZCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIEdhbWVSZWNvcmQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUdhbWVSZWNvcmRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3Njb3JlXSBHYW1lUmVjb3JkIHNjb3JlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcnxMb25nPnxudWxsfSBbd3Jvbmdfd29yZHNdIEdhbWVSZWNvcmQgd3Jvbmdfd29yZHNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyfExvbmc+fG51bGx9IFt1bnNraWxsZnVsX3dvcmRzXSBHYW1lUmVjb3JkIHVuc2tpbGxmdWxfd29yZHNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyfExvbmc+fG51bGx9IFtza2lsbGZ1bF93b3Jkc10gR2FtZVJlY29yZCBza2lsbGZ1bF93b3Jkc1xuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXJ8TG9uZz58bnVsbH0gW3N1cGVyc2tpbGxmdWxfd29yZHNdIEdhbWVSZWNvcmQgc3VwZXJza2lsbGZ1bF93b3Jkc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBHYW1lUmVjb3JkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBHYW1lUmVjb3JkLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJR2FtZVJlY29yZFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklHYW1lUmVjb3JkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHYW1lUmVjb3JkKHApIHtcbiAgICAgICAgICAgIHRoaXMud3Jvbmdfd29yZHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMudW5za2lsbGZ1bF93b3JkcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5za2lsbGZ1bF93b3JkcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5zdXBlcnNraWxsZnVsX3dvcmRzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVJlY29yZCBzY29yZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBzY29yZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lUmVjb3JkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlY29yZC5wcm90b3R5cGUuc2NvcmUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVjb3JkIHdyb25nX3dvcmRzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48bnVtYmVyfExvbmc+fSB3cm9uZ193b3Jkc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lUmVjb3JkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlY29yZC5wcm90b3R5cGUud3Jvbmdfd29yZHMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVjb3JkIHVuc2tpbGxmdWxfd29yZHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXJ8TG9uZz59IHVuc2tpbGxmdWxfd29yZHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlY29yZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZWNvcmQucHJvdG90eXBlLnVuc2tpbGxmdWxfd29yZHMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVjb3JkIHNraWxsZnVsX3dvcmRzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48bnVtYmVyfExvbmc+fSBza2lsbGZ1bF93b3Jkc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lUmVjb3JkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlY29yZC5wcm90b3R5cGUuc2tpbGxmdWxfd29yZHMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYW1lUmVjb3JkIHN1cGVyc2tpbGxmdWxfd29yZHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXJ8TG9uZz59IHN1cGVyc2tpbGxmdWxfd29yZHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlY29yZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZWNvcmQucHJvdG90eXBlLnN1cGVyc2tpbGxmdWxfd29yZHMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgR2FtZVJlY29yZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLkdhbWVSZWNvcmQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlY29yZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JR2FtZVJlY29yZH0gbSBHYW1lUmVjb3JkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZWNvcmQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnNjb3JlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzY29yZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxMykuZmxvYXQobS5zY29yZSk7XG4gICAgICAgICAgICBpZiAobS53cm9uZ193b3JkcyAhPSBudWxsICYmIG0ud3Jvbmdfd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ud3Jvbmdfd29yZHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS53cm9uZ193b3Jkc1tpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnVuc2tpbGxmdWxfd29yZHMgIT0gbnVsbCAmJiBtLnVuc2tpbGxmdWxfd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjYpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0udW5za2lsbGZ1bF93b3Jkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLnVuc2tpbGxmdWxfd29yZHNbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5za2lsbGZ1bF93b3JkcyAhPSBudWxsICYmIG0uc2tpbGxmdWxfd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzQpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uc2tpbGxmdWxfd29yZHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS5za2lsbGZ1bF93b3Jkc1tpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnN1cGVyc2tpbGxmdWxfd29yZHMgIT0gbnVsbCAmJiBtLnN1cGVyc2tpbGxmdWxfd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDIpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uc3VwZXJza2lsbGZ1bF93b3Jkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIEdhbWVSZWNvcmQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lUmVjb3JkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uR2FtZVJlY29yZH0gR2FtZVJlY29yZFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZWNvcmQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uR2FtZVJlY29yZCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uc2NvcmUgPSByLmZsb2F0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS53cm9uZ193b3JkcyAmJiBtLndyb25nX3dvcmRzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLndyb25nX3dvcmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSByLnVpbnQzMigpICsgci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLndyb25nX3dvcmRzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLndyb25nX3dvcmRzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnVuc2tpbGxmdWxfd29yZHMgJiYgbS51bnNraWxsZnVsX3dvcmRzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnVuc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udW5za2lsbGZ1bF93b3Jkcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS51bnNraWxsZnVsX3dvcmRzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnNraWxsZnVsX3dvcmRzICYmIG0uc2tpbGxmdWxfd29yZHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc2tpbGxmdWxfd29yZHMucHVzaChyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc2tpbGxmdWxfd29yZHMucHVzaChyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0uc3VwZXJza2lsbGZ1bF93b3JkcyAmJiBtLnN1cGVyc2tpbGxmdWxfd29yZHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc3VwZXJza2lsbGZ1bF93b3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zdXBlcnNraWxsZnVsX3dvcmRzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN1cGVyc2tpbGxmdWxfd29yZHMucHVzaChyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBHYW1lUmVjb3JkIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlY29yZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkdhbWVSZWNvcmR9IEdhbWVSZWNvcmRcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVSZWNvcmQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkdhbWVSZWNvcmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkdhbWVSZWNvcmQoKTtcbiAgICAgICAgICAgIGlmIChkLnNjb3JlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnNjb3JlID0gTnVtYmVyKGQuc2NvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQud3Jvbmdfd29yZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC53cm9uZ193b3JkcykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkdhbWVSZWNvcmQud3Jvbmdfd29yZHM6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0ud3Jvbmdfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQud3Jvbmdfd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS53cm9uZ193b3Jkc1tpXSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQud3Jvbmdfd29yZHNbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC53cm9uZ193b3Jkc1tpXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ud3Jvbmdfd29yZHNbaV0gPSBwYXJzZUludChkLndyb25nX3dvcmRzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLndyb25nX3dvcmRzW2ldID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS53cm9uZ193b3Jkc1tpXSA9IGQud3Jvbmdfd29yZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLndyb25nX3dvcmRzW2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS53cm9uZ193b3Jkc1tpXSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLndyb25nX3dvcmRzW2ldLmxvdyA+Pj4gMCwgZC53cm9uZ193b3Jkc1tpXS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnVuc2tpbGxmdWxfd29yZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC51bnNraWxsZnVsX3dvcmRzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uR2FtZVJlY29yZC51bnNraWxsZnVsX3dvcmRzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnVuc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQudW5za2lsbGZ1bF93b3Jkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLnVuc2tpbGxmdWxfd29yZHNbaV0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnVuc2tpbGxmdWxfd29yZHNbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51bnNraWxsZnVsX3dvcmRzW2ldID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS51bnNraWxsZnVsX3dvcmRzW2ldID0gcGFyc2VJbnQoZC51bnNraWxsZnVsX3dvcmRzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVuc2tpbGxmdWxfd29yZHNbaV0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnVuc2tpbGxmdWxfd29yZHNbaV0gPSBkLnVuc2tpbGxmdWxfd29yZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVuc2tpbGxmdWxfd29yZHNbaV0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnVuc2tpbGxmdWxfd29yZHNbaV0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC51bnNraWxsZnVsX3dvcmRzW2ldLmxvdyA+Pj4gMCwgZC51bnNraWxsZnVsX3dvcmRzW2ldLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuc2tpbGxmdWxfd29yZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5za2lsbGZ1bF93b3JkcykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkdhbWVSZWNvcmQuc2tpbGxmdWxfd29yZHM6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuc2tpbGxmdWxfd29yZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS5za2lsbGZ1bF93b3Jkc1tpXSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuc2tpbGxmdWxfd29yZHNbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5za2lsbGZ1bF93b3Jkc1tpXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uc2tpbGxmdWxfd29yZHNbaV0gPSBwYXJzZUludChkLnNraWxsZnVsX3dvcmRzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnNraWxsZnVsX3dvcmRzW2ldID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5za2lsbGZ1bF93b3Jkc1tpXSA9IGQuc2tpbGxmdWxfd29yZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnNraWxsZnVsX3dvcmRzW2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5za2lsbGZ1bF93b3Jkc1tpXSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnNraWxsZnVsX3dvcmRzW2ldLmxvdyA+Pj4gMCwgZC5za2lsbGZ1bF93b3Jkc1tpXS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnN1cGVyc2tpbGxmdWxfd29yZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5zdXBlcnNraWxsZnVsX3dvcmRzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uR2FtZVJlY29yZC5zdXBlcnNraWxsZnVsX3dvcmRzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnN1cGVyc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuc3VwZXJza2lsbGZ1bF93b3Jkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zdXBlcnNraWxsZnVsX3dvcmRzW2ldID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdXBlcnNraWxsZnVsX3dvcmRzW2ldID0gcGFyc2VJbnQoZC5zdXBlcnNraWxsZnVsX3dvcmRzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0gPSBkLnN1cGVyc2tpbGxmdWxfd29yZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN1cGVyc2tpbGxmdWxfd29yZHNbaV0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5zdXBlcnNraWxsZnVsX3dvcmRzW2ldLmxvdyA+Pj4gMCwgZC5zdXBlcnNraWxsZnVsX3dvcmRzW2ldLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIEdhbWVSZWNvcmQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlY29yZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5HYW1lUmVjb3JkfSBtIEdhbWVSZWNvcmRcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBHYW1lUmVjb3JkLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQud3Jvbmdfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBkLnVuc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBkLnNraWxsZnVsX3dvcmRzID0gW107XG4gICAgICAgICAgICAgICAgZC5zdXBlcnNraWxsZnVsX3dvcmRzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuc2NvcmUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc2NvcmUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic2NvcmVcIikpIHtcbiAgICAgICAgICAgICAgICBkLnNjb3JlID0gby5qc29uICYmICFpc0Zpbml0ZShtLnNjb3JlKSA/IFN0cmluZyhtLnNjb3JlKSA6IG0uc2NvcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS53cm9uZ193b3JkcyAmJiBtLndyb25nX3dvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQud3Jvbmdfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0ud3Jvbmdfd29yZHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLndyb25nX3dvcmRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC53cm9uZ193b3Jkc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLndyb25nX3dvcmRzW2pdKSA6IG0ud3Jvbmdfd29yZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQud3Jvbmdfd29yZHNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ud3Jvbmdfd29yZHNbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ud3Jvbmdfd29yZHNbal0ubG93ID4+PiAwLCBtLndyb25nX3dvcmRzW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLndyb25nX3dvcmRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnVuc2tpbGxmdWxfd29yZHMgJiYgbS51bnNraWxsZnVsX3dvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQudW5za2lsbGZ1bF93b3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS51bnNraWxsZnVsX3dvcmRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS51bnNraWxsZnVsX3dvcmRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC51bnNraWxsZnVsX3dvcmRzW2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udW5za2lsbGZ1bF93b3Jkc1tqXSkgOiBtLnVuc2tpbGxmdWxfd29yZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQudW5za2lsbGZ1bF93b3Jkc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS51bnNraWxsZnVsX3dvcmRzW2pdKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnVuc2tpbGxmdWxfd29yZHNbal0ubG93ID4+PiAwLCBtLnVuc2tpbGxmdWxfd29yZHNbal0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0udW5za2lsbGZ1bF93b3Jkc1tqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5za2lsbGZ1bF93b3JkcyAmJiBtLnNraWxsZnVsX3dvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuc2tpbGxmdWxfd29yZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uc2tpbGxmdWxfd29yZHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnNraWxsZnVsX3dvcmRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5za2lsbGZ1bF93b3Jkc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnNraWxsZnVsX3dvcmRzW2pdKSA6IG0uc2tpbGxmdWxfd29yZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuc2tpbGxmdWxfd29yZHNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uc2tpbGxmdWxfd29yZHNbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc2tpbGxmdWxfd29yZHNbal0ubG93ID4+PiAwLCBtLnNraWxsZnVsX3dvcmRzW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnNraWxsZnVsX3dvcmRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnN1cGVyc2tpbGxmdWxfd29yZHMgJiYgbS5zdXBlcnNraWxsZnVsX3dvcmRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuc3VwZXJza2lsbGZ1bF93b3JkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5zdXBlcnNraWxsZnVsX3dvcmRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5zdXBlcnNraWxsZnVsX3dvcmRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5zdXBlcnNraWxsZnVsX3dvcmRzW2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uc3VwZXJza2lsbGZ1bF93b3Jkc1tqXSkgOiBtLnN1cGVyc2tpbGxmdWxfd29yZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuc3VwZXJza2lsbGZ1bF93b3Jkc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5zdXBlcnNraWxsZnVsX3dvcmRzW2pdKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnN1cGVyc2tpbGxmdWxfd29yZHNbal0ubG93ID4+PiAwLCBtLnN1cGVyc2tpbGxmdWxfd29yZHNbal0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uc3VwZXJza2lsbGZ1bF93b3Jkc1tqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBHYW1lUmVjb3JkIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVJlY29yZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVJlY29yZC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEdhbWVSZWNvcmQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uTW9kZVJlc3VsdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIE1vZGVSZXN1bHQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSU1vZGVSZXN1bHRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbY2hlY2tpbl9pZF0gTW9kZVJlc3VsdCBjaGVja2luX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjaGVja2luX3N0YXRlXSBNb2RlUmVzdWx0IGNoZWNraW5fc3RhdGVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2xlc3Nvbl9zdGF0ZV0gTW9kZVJlc3VsdCBsZXNzb25fc3RhdGVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW25pY2tOYW1lXSBNb2RlUmVzdWx0IG5pY2tOYW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtsZXNzb25OYW1lXSBNb2RlUmVzdWx0IGxlc3Nvbk5hbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3plcm9MZWZ0VGltZV0gTW9kZVJlc3VsdCB6ZXJvTGVmdFRpbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2NoZWNraW5QdXNoUmVtYXJrXSBNb2RlUmVzdWx0IGNoZWNraW5QdXNoUmVtYXJrXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcnxMb25nPnxudWxsfSBbc3Rhcl9wcm9ncmVzc10gTW9kZVJlc3VsdCBzdGFyX3Byb2dyZXNzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IE1vZGVSZXN1bHQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE1vZGVSZXN1bHQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNb2RlUmVzdWx0XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSU1vZGVSZXN1bHQ9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE1vZGVSZXN1bHQocCkge1xuICAgICAgICAgICAgdGhpcy5zdGFyX3Byb2dyZXNzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTW9kZVJlc3VsdCBjaGVja2luX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gY2hlY2tpbl9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUuY2hlY2tpbl9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb2RlUmVzdWx0IGNoZWNraW5fc3RhdGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gY2hlY2tpbl9zdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUuY2hlY2tpbl9zdGF0ZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vZGVSZXN1bHQgbGVzc29uX3N0YXRlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGxlc3Nvbl9zdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUubGVzc29uX3N0YXRlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTW9kZVJlc3VsdCBuaWNrTmFtZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBuaWNrTmFtZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUubmlja05hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb2RlUmVzdWx0IGxlc3Nvbk5hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbGVzc29uTmFtZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUubGVzc29uTmFtZSA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1vZGVSZXN1bHQgemVyb0xlZnRUaW1lLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHplcm9MZWZ0VGltZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUuemVyb0xlZnRUaW1lID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTW9kZVJlc3VsdCBjaGVja2luUHVzaFJlbWFyay5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBjaGVja2luUHVzaFJlbWFya1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTW9kZVJlc3VsdC5wcm90b3R5cGUuY2hlY2tpblB1c2hSZW1hcmsgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb2RlUmVzdWx0IHN0YXJfcHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXJ8TG9uZz59IHN0YXJfcHJvZ3Jlc3NcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTW9kZVJlc3VsdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1vZGVSZXN1bHQucHJvdG90eXBlLnN0YXJfcHJvZ3Jlc3MgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTW9kZVJlc3VsdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLk1vZGVSZXN1bHQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTW9kZVJlc3VsdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTW9kZVJlc3VsdH0gbSBNb2RlUmVzdWx0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIE1vZGVSZXN1bHQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmNoZWNraW5faWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNoZWNraW5faWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5jaGVja2luX2lkKTtcbiAgICAgICAgICAgIGlmIChtLmNoZWNraW5fc3RhdGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNoZWNraW5fc3RhdGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0uY2hlY2tpbl9zdGF0ZSk7XG4gICAgICAgICAgICBpZiAobS5sZXNzb25fc3RhdGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImxlc3Nvbl9zdGF0ZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50MzIobS5sZXNzb25fc3RhdGUpO1xuICAgICAgICAgICAgaWYgKG0ubmlja05hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm5pY2tOYW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDM0KS5zdHJpbmcobS5uaWNrTmFtZSk7XG4gICAgICAgICAgICBpZiAobS5sZXNzb25OYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJsZXNzb25OYW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQyKS5zdHJpbmcobS5sZXNzb25OYW1lKTtcbiAgICAgICAgICAgIGlmIChtLnplcm9MZWZ0VGltZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiemVyb0xlZnRUaW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQ4KS5pbnQzMihtLnplcm9MZWZ0VGltZSk7XG4gICAgICAgICAgICBpZiAobS5jaGVja2luUHVzaFJlbWFyayAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiY2hlY2tpblB1c2hSZW1hcmtcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTgpLnN0cmluZyhtLmNoZWNraW5QdXNoUmVtYXJrKTtcbiAgICAgICAgICAgIGlmIChtLnN0YXJfcHJvZ3Jlc3MgIT0gbnVsbCAmJiBtLnN0YXJfcHJvZ3Jlc3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoNjYpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uc3Rhcl9wcm9ncmVzcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLnN0YXJfcHJvZ3Jlc3NbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE1vZGVSZXN1bHQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTW9kZVJlc3VsdH0gTW9kZVJlc3VsdFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE1vZGVSZXN1bHQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uTW9kZVJlc3VsdCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uY2hlY2tpbl9pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLmNoZWNraW5fc3RhdGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5sZXNzb25fc3RhdGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS5uaWNrTmFtZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbS5sZXNzb25OYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtLnplcm9MZWZ0VGltZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtLmNoZWNraW5QdXNoUmVtYXJrID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnN0YXJfcHJvZ3Jlc3MgJiYgbS5zdGFyX3Byb2dyZXNzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0YXJfcHJvZ3Jlc3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uc3Rhcl9wcm9ncmVzcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFyX3Byb2dyZXNzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgTW9kZVJlc3VsdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1vZGVSZXN1bHRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Nb2RlUmVzdWx0fSBNb2RlUmVzdWx0XG4gICAgICAgICAqL1xuICAgICAgICBNb2RlUmVzdWx0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5Nb2RlUmVzdWx0KVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5Nb2RlUmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAoZC5jaGVja2luX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uY2hlY2tpbl9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuY2hlY2tpbl9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuY2hlY2tpbl9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5jaGVja2luX2lkID0gcGFyc2VJbnQoZC5jaGVja2luX2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuY2hlY2tpbl9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5jaGVja2luX2lkID0gZC5jaGVja2luX2lkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmNoZWNraW5faWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uY2hlY2tpbl9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmNoZWNraW5faWQubG93ID4+PiAwLCBkLmNoZWNraW5faWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNoZWNraW5fc3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY2hlY2tpbl9zdGF0ZSA9IGQuY2hlY2tpbl9zdGF0ZSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5sZXNzb25fc3RhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubGVzc29uX3N0YXRlID0gZC5sZXNzb25fc3RhdGUgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubmlja05hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubmlja05hbWUgPSBTdHJpbmcoZC5uaWNrTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5sZXNzb25OYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmxlc3Nvbk5hbWUgPSBTdHJpbmcoZC5sZXNzb25OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnplcm9MZWZ0VGltZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS56ZXJvTGVmdFRpbWUgPSBkLnplcm9MZWZ0VGltZSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5jaGVja2luUHVzaFJlbWFyayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5jaGVja2luUHVzaFJlbWFyayA9IFN0cmluZyhkLmNoZWNraW5QdXNoUmVtYXJrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnN0YXJfcHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5zdGFyX3Byb2dyZXNzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uTW9kZVJlc3VsdC5zdGFyX3Byb2dyZXNzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnN0YXJfcHJvZ3Jlc3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuc3Rhcl9wcm9ncmVzcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLnN0YXJfcHJvZ3Jlc3NbaV0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnN0YXJfcHJvZ3Jlc3NbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zdGFyX3Byb2dyZXNzW2ldID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zdGFyX3Byb2dyZXNzW2ldID0gcGFyc2VJbnQoZC5zdGFyX3Byb2dyZXNzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXJfcHJvZ3Jlc3NbaV0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0YXJfcHJvZ3Jlc3NbaV0gPSBkLnN0YXJfcHJvZ3Jlc3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXJfcHJvZ3Jlc3NbaV0gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnN0YXJfcHJvZ3Jlc3NbaV0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5zdGFyX3Byb2dyZXNzW2ldLmxvdyA+Pj4gMCwgZC5zdGFyX3Byb2dyZXNzW2ldLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIE1vZGVSZXN1bHQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTW9kZVJlc3VsdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5Nb2RlUmVzdWx0fSBtIE1vZGVSZXN1bHRcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNb2RlUmVzdWx0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuc3Rhcl9wcm9ncmVzcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5jaGVja2luX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5jaGVja2luX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQuY2hlY2tpbl9zdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgZC5sZXNzb25fc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgIGQubmlja05hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGQubGVzc29uTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC56ZXJvTGVmdFRpbWUgPSAwO1xuICAgICAgICAgICAgICAgIGQuY2hlY2tpblB1c2hSZW1hcmsgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY2hlY2tpbl9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjaGVja2luX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmNoZWNraW5faWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuY2hlY2tpbl9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmNoZWNraW5faWQpIDogbS5jaGVja2luX2lkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5jaGVja2luX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmNoZWNraW5faWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uY2hlY2tpbl9pZC5sb3cgPj4+IDAsIG0uY2hlY2tpbl9pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5jaGVja2luX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY2hlY2tpbl9zdGF0ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjaGVja2luX3N0YXRlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5jaGVja2luX3N0YXRlID0gbS5jaGVja2luX3N0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubGVzc29uX3N0YXRlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImxlc3Nvbl9zdGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgIGQubGVzc29uX3N0YXRlID0gbS5sZXNzb25fc3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5uaWNrTmFtZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJuaWNrTmFtZVwiKSkge1xuICAgICAgICAgICAgICAgIGQubmlja05hbWUgPSBtLm5pY2tOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubGVzc29uTmFtZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJsZXNzb25OYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5sZXNzb25OYW1lID0gbS5sZXNzb25OYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uemVyb0xlZnRUaW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInplcm9MZWZ0VGltZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuemVyb0xlZnRUaW1lID0gbS56ZXJvTGVmdFRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jaGVja2luUHVzaFJlbWFyayAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjaGVja2luUHVzaFJlbWFya1wiKSkge1xuICAgICAgICAgICAgICAgIGQuY2hlY2tpblB1c2hSZW1hcmsgPSBtLmNoZWNraW5QdXNoUmVtYXJrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3Rhcl9wcm9ncmVzcyAmJiBtLnN0YXJfcHJvZ3Jlc3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5zdGFyX3Byb2dyZXNzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnN0YXJfcHJvZ3Jlc3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnN0YXJfcHJvZ3Jlc3Nbal0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnN0YXJfcHJvZ3Jlc3Nbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5zdGFyX3Byb2dyZXNzW2pdKSA6IG0uc3Rhcl9wcm9ncmVzc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5zdGFyX3Byb2dyZXNzW2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnN0YXJfcHJvZ3Jlc3Nbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc3Rhcl9wcm9ncmVzc1tqXS5sb3cgPj4+IDAsIG0uc3Rhcl9wcm9ncmVzc1tqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zdGFyX3Byb2dyZXNzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1vZGVSZXN1bHQgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Nb2RlUmVzdWx0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNb2RlUmVzdWx0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTW9kZVJlc3VsdDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGFuIEV4cGlyZWRVc2VyTGltaXRDb25maWcuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUV4cGlyZWRVc2VyTGltaXRDb25maWdcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyfExvbmc+fG51bGx9IFtjYW5fcGxheV91bml0X2lkc10gRXhwaXJlZFVzZXJMaW1pdENvbmZpZyBjYW5fcGxheV91bml0X2lkc1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtsaW1pdF9yZXNfY291bnRdIEV4cGlyZWRVc2VyTGltaXRDb25maWcgbGltaXRfcmVzX2NvdW50XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2Nhbl91c2VfY2hlY2tpbl0gRXhwaXJlZFVzZXJMaW1pdENvbmZpZyBjYW5fdXNlX2NoZWNraW5cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbY2FuX3VzZV9zcGVjXSBFeHBpcmVkVXNlckxpbWl0Q29uZmlnIGNhbl91c2Vfc3BlY1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBFeHBpcmVkVXNlckxpbWl0Q29uZmlnLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYW4gRXhwaXJlZFVzZXJMaW1pdENvbmZpZy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSUV4cGlyZWRVc2VyTGltaXRDb25maWdcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JRXhwaXJlZFVzZXJMaW1pdENvbmZpZz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gRXhwaXJlZFVzZXJMaW1pdENvbmZpZyhwKSB7XG4gICAgICAgICAgICB0aGlzLmNhbl9wbGF5X3VuaXRfaWRzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRXhwaXJlZFVzZXJMaW1pdENvbmZpZyBjYW5fcGxheV91bml0X2lkcy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcnxMb25nPn0gY2FuX3BsYXlfdW5pdF9pZHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uRXhwaXJlZFVzZXJMaW1pdENvbmZpZ1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEV4cGlyZWRVc2VyTGltaXRDb25maWcucHJvdG90eXBlLmNhbl9wbGF5X3VuaXRfaWRzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXhwaXJlZFVzZXJMaW1pdENvbmZpZyBsaW1pdF9yZXNfY291bnQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBsaW1pdF9yZXNfY291bnRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uRXhwaXJlZFVzZXJMaW1pdENvbmZpZ1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEV4cGlyZWRVc2VyTGltaXRDb25maWcucHJvdG90eXBlLmxpbWl0X3Jlc19jb3VudCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFeHBpcmVkVXNlckxpbWl0Q29uZmlnIGNhbl91c2VfY2hlY2tpbi5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGNhbl91c2VfY2hlY2tpblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgRXhwaXJlZFVzZXJMaW1pdENvbmZpZy5wcm90b3R5cGUuY2FuX3VzZV9jaGVja2luID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4cGlyZWRVc2VyTGltaXRDb25maWcgY2FuX3VzZV9zcGVjLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gY2FuX3VzZV9zcGVjXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkV4cGlyZWRVc2VyTGltaXRDb25maWdcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBFeHBpcmVkVXNlckxpbWl0Q29uZmlnLnByb3RvdHlwZS5jYW5fdXNlX3NwZWMgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEV4cGlyZWRVc2VyTGltaXRDb25maWcgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkV4cGlyZWRVc2VyTGltaXRDb25maWdcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUV4cGlyZWRVc2VyTGltaXRDb25maWd9IG0gRXhwaXJlZFVzZXJMaW1pdENvbmZpZyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBFeHBpcmVkVXNlckxpbWl0Q29uZmlnLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5jYW5fcGxheV91bml0X2lkcyAhPSBudWxsICYmIG0uY2FuX3BsYXlfdW5pdF9pZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uY2FuX3BsYXlfdW5pdF9pZHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50NjQobS5jYW5fcGxheV91bml0X2lkc1tpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmxpbWl0X3Jlc19jb3VudCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibGltaXRfcmVzX2NvdW50XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLmxpbWl0X3Jlc19jb3VudCk7XG4gICAgICAgICAgICBpZiAobS5jYW5fdXNlX2NoZWNraW4gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNhbl91c2VfY2hlY2tpblwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50NjQobS5jYW5fdXNlX2NoZWNraW4pO1xuICAgICAgICAgICAgaWYgKG0uY2FuX3VzZV9zcGVjICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjYW5fdXNlX3NwZWNcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzIpLmludDY0KG0uY2FuX3VzZV9zcGVjKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGFuIEV4cGlyZWRVc2VyTGltaXRDb25maWcgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uRXhwaXJlZFVzZXJMaW1pdENvbmZpZ30gRXhwaXJlZFVzZXJMaW1pdENvbmZpZ1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEV4cGlyZWRVc2VyTGltaXRDb25maWcuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uRXhwaXJlZFVzZXJMaW1pdENvbmZpZygpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0uY2FuX3BsYXlfdW5pdF9pZHMgJiYgbS5jYW5fcGxheV91bml0X2lkcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jYW5fcGxheV91bml0X2lkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jYW5fcGxheV91bml0X2lkcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jYW5fcGxheV91bml0X2lkcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5saW1pdF9yZXNfY291bnQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5jYW5fdXNlX2NoZWNraW4gPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS5jYW5fdXNlX3NwZWMgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhbiBFeHBpcmVkVXNlckxpbWl0Q29uZmlnIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uRXhwaXJlZFVzZXJMaW1pdENvbmZpZ1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkV4cGlyZWRVc2VyTGltaXRDb25maWd9IEV4cGlyZWRVc2VyTGltaXRDb25maWdcbiAgICAgICAgICovXG4gICAgICAgIEV4cGlyZWRVc2VyTGltaXRDb25maWcuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkV4cGlyZWRVc2VyTGltaXRDb25maWcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkV4cGlyZWRVc2VyTGltaXRDb25maWcoKTtcbiAgICAgICAgICAgIGlmIChkLmNhbl9wbGF5X3VuaXRfaWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuY2FuX3BsYXlfdW5pdF9pZHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnLmNhbl9wbGF5X3VuaXRfaWRzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmNhbl9wbGF5X3VuaXRfaWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmNhbl9wbGF5X3VuaXRfaWRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgKG0uY2FuX3BsYXlfdW5pdF9pZHNbaV0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmNhbl9wbGF5X3VuaXRfaWRzW2ldKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuY2FuX3BsYXlfdW5pdF9pZHNbaV0gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNhbl9wbGF5X3VuaXRfaWRzW2ldID0gcGFyc2VJbnQoZC5jYW5fcGxheV91bml0X2lkc1tpXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jYW5fcGxheV91bml0X2lkc1tpXSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uY2FuX3BsYXlfdW5pdF9pZHNbaV0gPSBkLmNhbl9wbGF5X3VuaXRfaWRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jYW5fcGxheV91bml0X2lkc1tpXSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uY2FuX3BsYXlfdW5pdF9pZHNbaV0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5jYW5fcGxheV91bml0X2lkc1tpXS5sb3cgPj4+IDAsIGQuY2FuX3BsYXlfdW5pdF9pZHNbaV0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5saW1pdF9yZXNfY291bnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5saW1pdF9yZXNfY291bnQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmxpbWl0X3Jlc19jb3VudCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubGltaXRfcmVzX2NvdW50ID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmxpbWl0X3Jlc19jb3VudCA9IHBhcnNlSW50KGQubGltaXRfcmVzX2NvdW50LCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubGltaXRfcmVzX2NvdW50ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmxpbWl0X3Jlc19jb3VudCA9IGQubGltaXRfcmVzX2NvdW50O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmxpbWl0X3Jlc19jb3VudCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5saW1pdF9yZXNfY291bnQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5saW1pdF9yZXNfY291bnQubG93ID4+PiAwLCBkLmxpbWl0X3Jlc19jb3VudC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY2FuX3VzZV9jaGVja2luICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uY2FuX3VzZV9jaGVja2luID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5jYW5fdXNlX2NoZWNraW4pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmNhbl91c2VfY2hlY2tpbiA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5jYW5fdXNlX2NoZWNraW4gPSBwYXJzZUludChkLmNhbl91c2VfY2hlY2tpbiwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmNhbl91c2VfY2hlY2tpbiA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5jYW5fdXNlX2NoZWNraW4gPSBkLmNhbl91c2VfY2hlY2tpbjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jYW5fdXNlX2NoZWNraW4gPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uY2FuX3VzZV9jaGVja2luID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuY2FuX3VzZV9jaGVja2luLmxvdyA+Pj4gMCwgZC5jYW5fdXNlX2NoZWNraW4uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNhbl91c2Vfc3BlYyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmNhbl91c2Vfc3BlYyA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuY2FuX3VzZV9zcGVjKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jYW5fdXNlX3NwZWMgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uY2FuX3VzZV9zcGVjID0gcGFyc2VJbnQoZC5jYW5fdXNlX3NwZWMsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5jYW5fdXNlX3NwZWMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uY2FuX3VzZV9zcGVjID0gZC5jYW5fdXNlX3NwZWM7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuY2FuX3VzZV9zcGVjID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmNhbl91c2Vfc3BlYyA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmNhbl91c2Vfc3BlYy5sb3cgPj4+IDAsIGQuY2FuX3VzZV9zcGVjLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGFuIEV4cGlyZWRVc2VyTGltaXRDb25maWcgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uRXhwaXJlZFVzZXJMaW1pdENvbmZpZ1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnfSBtIEV4cGlyZWRVc2VyTGltaXRDb25maWdcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBFeHBpcmVkVXNlckxpbWl0Q29uZmlnLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuY2FuX3BsYXlfdW5pdF9pZHMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQubGltaXRfcmVzX2NvdW50ID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5saW1pdF9yZXNfY291bnQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuY2FuX3VzZV9jaGVja2luID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5jYW5fdXNlX2NoZWNraW4gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuY2FuX3VzZV9zcGVjID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5jYW5fdXNlX3NwZWMgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jYW5fcGxheV91bml0X2lkcyAmJiBtLmNhbl9wbGF5X3VuaXRfaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuY2FuX3BsYXlfdW5pdF9pZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uY2FuX3BsYXlfdW5pdF9pZHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmNhbl9wbGF5X3VuaXRfaWRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5jYW5fcGxheV91bml0X2lkc1tqXSA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmNhbl9wbGF5X3VuaXRfaWRzW2pdKSA6IG0uY2FuX3BsYXlfdW5pdF9pZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuY2FuX3BsYXlfdW5pdF9pZHNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uY2FuX3BsYXlfdW5pdF9pZHNbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uY2FuX3BsYXlfdW5pdF9pZHNbal0ubG93ID4+PiAwLCBtLmNhbl9wbGF5X3VuaXRfaWRzW2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmNhbl9wbGF5X3VuaXRfaWRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmxpbWl0X3Jlc19jb3VudCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJsaW1pdF9yZXNfY291bnRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubGltaXRfcmVzX2NvdW50ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmxpbWl0X3Jlc19jb3VudCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmxpbWl0X3Jlc19jb3VudCkgOiBtLmxpbWl0X3Jlc19jb3VudDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubGltaXRfcmVzX2NvdW50ID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmxpbWl0X3Jlc19jb3VudCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5saW1pdF9yZXNfY291bnQubG93ID4+PiAwLCBtLmxpbWl0X3Jlc19jb3VudC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5saW1pdF9yZXNfY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jYW5fdXNlX2NoZWNraW4gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY2FuX3VzZV9jaGVja2luXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmNhbl91c2VfY2hlY2tpbiA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5jYW5fdXNlX2NoZWNraW4gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5jYW5fdXNlX2NoZWNraW4pIDogbS5jYW5fdXNlX2NoZWNraW47XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmNhbl91c2VfY2hlY2tpbiA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5jYW5fdXNlX2NoZWNraW4pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uY2FuX3VzZV9jaGVja2luLmxvdyA+Pj4gMCwgbS5jYW5fdXNlX2NoZWNraW4uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uY2FuX3VzZV9jaGVja2luO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY2FuX3VzZV9zcGVjICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNhbl91c2Vfc3BlY1wiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5jYW5fdXNlX3NwZWMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuY2FuX3VzZV9zcGVjID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uY2FuX3VzZV9zcGVjKSA6IG0uY2FuX3VzZV9zcGVjO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5jYW5fdXNlX3NwZWMgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uY2FuX3VzZV9zcGVjKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmNhbl91c2Vfc3BlYy5sb3cgPj4+IDAsIG0uY2FuX3VzZV9zcGVjLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmNhbl91c2Vfc3BlYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEV4cGlyZWRVc2VyTGltaXRDb25maWcgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5FeHBpcmVkVXNlckxpbWl0Q29uZmlnXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBFeHBpcmVkVXNlckxpbWl0Q29uZmlnLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gRXhwaXJlZFVzZXJMaW1pdENvbmZpZztcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogR2FtZVR5cGUgZW51bS5cbiAgICAgKiBAbmFtZSBmYXJtLkdhbWVUeXBlXG4gICAgICogQGVudW0ge251bWJlcn1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gR2FtZVR5cGVOb3JtYWw9MCBHYW1lVHlwZU5vcm1hbCB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBHYW1lVHlwZTE9MSBHYW1lVHlwZTEgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gR2FtZVR5cGUyPTIgR2FtZVR5cGUyIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IEdhbWVUeXBlMz0zIEdhbWVUeXBlMyB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBHYW1lVHlwZTQ9NCBHYW1lVHlwZTQgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLkdhbWVUeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiR2FtZVR5cGVOb3JtYWxcIl0gPSAwO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsxXSA9IFwiR2FtZVR5cGUxXCJdID0gMTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMl0gPSBcIkdhbWVUeXBlMlwiXSA9IDI7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzNdID0gXCJHYW1lVHlwZTNcIl0gPSAzO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs0XSA9IFwiR2FtZVR5cGU0XCJdID0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5Xb3JkSXRlbUluZm8gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBXb3JkSXRlbUluZm8uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVdvcmRJdGVtSW5mb1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gV29yZEl0ZW1JbmZvIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2dyYWRlX2lkXSBXb3JkSXRlbUluZm8gZ3JhZGVfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdW5pdF9pZF0gV29yZEl0ZW1JbmZvIHVuaXRfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdHlwZV0gV29yZEl0ZW1JbmZvIHR5cGVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdW5pdF9pbmRleF0gV29yZEl0ZW1JbmZvIHVuaXRfaW5kZXhcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2NuXSBXb3JkSXRlbUluZm8gY25cbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2VuXSBXb3JkSXRlbUluZm8gZW5cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgV29yZEl0ZW1JbmZvLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBXb3JkSXRlbUluZm8uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElXb3JkSXRlbUluZm9cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JV29yZEl0ZW1JbmZvPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBXb3JkSXRlbUluZm8ocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdvcmRJdGVtSW5mbyBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLldvcmRJdGVtSW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFdvcmRJdGVtSW5mby5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV29yZEl0ZW1JbmZvIGdyYWRlX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gZ3JhZGVfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEl0ZW1JbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEl0ZW1JbmZvLnByb3RvdHlwZS5ncmFkZV9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXb3JkSXRlbUluZm8gdW5pdF9pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHVuaXRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEl0ZW1JbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEl0ZW1JbmZvLnByb3RvdHlwZS51bml0X2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdvcmRJdGVtSW5mbyB0eXBlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Xb3JkSXRlbUluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBXb3JkSXRlbUluZm8ucHJvdG90eXBlLnR5cGUgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV29yZEl0ZW1JbmZvIHVuaXRfaW5kZXguXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB1bml0X2luZGV4XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLldvcmRJdGVtSW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFdvcmRJdGVtSW5mby5wcm90b3R5cGUudW5pdF9pbmRleCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXb3JkSXRlbUluZm8gY24uXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gY25cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEl0ZW1JbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEl0ZW1JbmZvLnByb3RvdHlwZS5jbiA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdvcmRJdGVtSW5mbyBlbi5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBlblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Xb3JkSXRlbUluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBXb3JkSXRlbUluZm8ucHJvdG90eXBlLmVuID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFdvcmRJdGVtSW5mbyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLldvcmRJdGVtSW5mby52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Xb3JkSXRlbUluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVdvcmRJdGVtSW5mb30gbSBXb3JkSXRlbUluZm8gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEl0ZW1JbmZvLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5pZCk7XG4gICAgICAgICAgICBpZiAobS5ncmFkZV9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZ3JhZGVfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0uZ3JhZGVfaWQpO1xuICAgICAgICAgICAgaWYgKG0udW5pdF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidW5pdF9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50NjQobS51bml0X2lkKTtcbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInR5cGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzIpLmludDY0KG0udHlwZSk7XG4gICAgICAgICAgICBpZiAobS51bml0X2luZGV4ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ1bml0X2luZGV4XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQwKS5pbnQ2NChtLnVuaXRfaW5kZXgpO1xuICAgICAgICAgICAgaWYgKG0uY24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNuXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDUwKS5zdHJpbmcobS5jbik7XG4gICAgICAgICAgICBpZiAobS5lbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZW5cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTgpLnN0cmluZyhtLmVuKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgV29yZEl0ZW1JbmZvIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEl0ZW1JbmZvXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uV29yZEl0ZW1JbmZvfSBXb3JkSXRlbUluZm9cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBXb3JkSXRlbUluZm8uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uV29yZEl0ZW1JbmZvKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLmdyYWRlX2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0udW5pdF9pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnR5cGUgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgbS51bml0X2luZGV4ID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG0uY24gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG0uZW4gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBXb3JkSXRlbUluZm8gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Xb3JkSXRlbUluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Xb3JkSXRlbUluZm99IFdvcmRJdGVtSW5mb1xuICAgICAgICAgKi9cbiAgICAgICAgV29yZEl0ZW1JbmZvLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5Xb3JkSXRlbUluZm8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLldvcmRJdGVtSW5mbygpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZ3JhZGVfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5ncmFkZV9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuZ3JhZGVfaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmdyYWRlX2lkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmdyYWRlX2lkID0gcGFyc2VJbnQoZC5ncmFkZV9pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmdyYWRlX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmdyYWRlX2lkID0gZC5ncmFkZV9pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5ncmFkZV9pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5ncmFkZV9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmdyYWRlX2lkLmxvdyA+Pj4gMCwgZC5ncmFkZV9pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudW5pdF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLnVuaXRfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnVuaXRfaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVuaXRfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udW5pdF9pZCA9IHBhcnNlSW50KGQudW5pdF9pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVuaXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udW5pdF9pZCA9IGQudW5pdF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51bml0X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLnVuaXRfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC51bml0X2lkLmxvdyA+Pj4gMCwgZC51bml0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0udHlwZSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQudHlwZSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS50eXBlID0gcGFyc2VJbnQoZC50eXBlLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS50eXBlID0gZC50eXBlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnR5cGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0udHlwZSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnR5cGUubG93ID4+PiAwLCBkLnR5cGUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnVuaXRfaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS51bml0X2luZGV4ID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC51bml0X2luZGV4KSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51bml0X2luZGV4ID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnVuaXRfaW5kZXggPSBwYXJzZUludChkLnVuaXRfaW5kZXgsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51bml0X2luZGV4ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnVuaXRfaW5kZXggPSBkLnVuaXRfaW5kZXg7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudW5pdF9pbmRleCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS51bml0X2luZGV4ID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudW5pdF9pbmRleC5sb3cgPj4+IDAsIGQudW5pdF9pbmRleC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY24gPSBTdHJpbmcoZC5jbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5lbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5lbiA9IFN0cmluZyhkLmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBXb3JkSXRlbUluZm8gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEl0ZW1JbmZvXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLldvcmRJdGVtSW5mb30gbSBXb3JkSXRlbUluZm9cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBXb3JkSXRlbUluZm8udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmdyYWRlX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5ncmFkZV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC51bml0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC51bml0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnR5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnR5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQudW5pdF9pbmRleCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudW5pdF9pbmRleCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmNuID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkLmVuID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZ3JhZGVfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZ3JhZGVfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uZ3JhZGVfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuZ3JhZGVfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5ncmFkZV9pZCkgOiBtLmdyYWRlX2lkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5ncmFkZV9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5ncmFkZV9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5ncmFkZV9pZC5sb3cgPj4+IDAsIG0uZ3JhZGVfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uZ3JhZGVfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51bml0X2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVuaXRfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udW5pdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC51bml0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udW5pdF9pZCkgOiBtLnVuaXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnVuaXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udW5pdF9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS51bml0X2lkLmxvdyA+Pj4gMCwgbS51bml0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnVuaXRfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50eXBlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInR5cGVcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC50eXBlID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udHlwZSkgOiBtLnR5cGU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnR5cGUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udHlwZSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS50eXBlLmxvdyA+Pj4gMCwgbS50eXBlLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51bml0X2luZGV4ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVuaXRfaW5kZXhcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udW5pdF9pbmRleCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC51bml0X2luZGV4ID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udW5pdF9pbmRleCkgOiBtLnVuaXRfaW5kZXg7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnVuaXRfaW5kZXggPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udW5pdF9pbmRleCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS51bml0X2luZGV4LmxvdyA+Pj4gMCwgbS51bml0X2luZGV4LmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnVuaXRfaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjblwiKSkge1xuICAgICAgICAgICAgICAgIGQuY24gPSBtLmNuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZW4gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZW5cIikpIHtcbiAgICAgICAgICAgICAgICBkLmVuID0gbS5lbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFdvcmRJdGVtSW5mbyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLldvcmRJdGVtSW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEl0ZW1JbmZvLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gV29yZEl0ZW1JbmZvO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLkdyYWRlTGVhcm5pbmdQcm9ncmVzcyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIEdyYWRlTGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJR3JhZGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW0dyYWRlSURdIEdyYWRlTGVhcm5pbmdQcm9ncmVzcyBHcmFkZUlEXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW1N0YXJdIEdyYWRlTGVhcm5pbmdQcm9ncmVzcyBTdGFyXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEdyYWRlTGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgR3JhZGVMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJR3JhZGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUdyYWRlTGVhcm5pbmdQcm9ncmVzcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gR3JhZGVMZWFybmluZ1Byb2dyZXNzKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MgR3JhZGVJRC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IEdyYWRlSURcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR3JhZGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR3JhZGVMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5HcmFkZUlEID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdyYWRlTGVhcm5pbmdQcm9ncmVzcyBTdGFyLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gU3RhclxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MucHJvdG90eXBlLlN0YXIgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEdyYWRlTGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLkdyYWRlTGVhcm5pbmdQcm9ncmVzcy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUdyYWRlTGVhcm5pbmdQcm9ncmVzc30gbSBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgR3JhZGVMZWFybmluZ1Byb2dyZXNzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5HcmFkZUlEICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJHcmFkZUlEXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uR3JhZGVJRCk7XG4gICAgICAgICAgICBpZiAobS5TdGFyICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJTdGFyXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLlN0YXIpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3N9IEdyYWRlTGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEdyYWRlTGVhcm5pbmdQcm9ncmVzcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLkdyYWRlSUQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5TdGFyID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3N9IEdyYWRlTGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKi9cbiAgICAgICAgR3JhZGVMZWFybmluZ1Byb2dyZXNzLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5HcmFkZUxlYXJuaW5nUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkdyYWRlTGVhcm5pbmdQcm9ncmVzcygpO1xuICAgICAgICAgICAgaWYgKGQuR3JhZGVJRCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLkdyYWRlSUQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLkdyYWRlSUQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLkdyYWRlSUQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uR3JhZGVJRCA9IHBhcnNlSW50KGQuR3JhZGVJRCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLkdyYWRlSUQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uR3JhZGVJRCA9IGQuR3JhZGVJRDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5HcmFkZUlEID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLkdyYWRlSUQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5HcmFkZUlELmxvdyA+Pj4gMCwgZC5HcmFkZUlELmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5TdGFyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uU3RhciA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuU3RhcikpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuU3RhciA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5TdGFyID0gcGFyc2VJbnQoZC5TdGFyLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuU3RhciA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5TdGFyID0gZC5TdGFyO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLlN0YXIgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uU3RhciA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLlN0YXIubG93ID4+PiAwLCBkLlN0YXIuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR3JhZGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLkdyYWRlTGVhcm5pbmdQcm9ncmVzc30gbSBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuR3JhZGVJRCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuR3JhZGVJRCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5TdGFyID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5TdGFyID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uR3JhZGVJRCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJHcmFkZUlEXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLkdyYWRlSUQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuR3JhZGVJRCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLkdyYWRlSUQpIDogbS5HcmFkZUlEO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5HcmFkZUlEID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLkdyYWRlSUQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uR3JhZGVJRC5sb3cgPj4+IDAsIG0uR3JhZGVJRC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5HcmFkZUlEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uU3RhciAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJTdGFyXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLlN0YXIgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuU3RhciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLlN0YXIpIDogbS5TdGFyO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5TdGFyID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLlN0YXIpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uU3Rhci5sb3cgPj4+IDAsIG0uU3Rhci5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5TdGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgR3JhZGVMZWFybmluZ1Byb2dyZXNzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR3JhZGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3MucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBHcmFkZUxlYXJuaW5nUHJvZ3Jlc3M7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3MgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYW4gVW5pdExlYXJuaW5nUHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW1VuaXRJRF0gVW5pdExlYXJuaW5nUHJvZ3Jlc3MgVW5pdElEXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsZmFybS5JR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzPnxudWxsfSBbR2FtZXNMZWFybmluZ1Byb2dyZXNzXSBVbml0TGVhcm5pbmdQcm9ncmVzcyBHYW1lc0xlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVW5pdExlYXJuaW5nUHJvZ3Jlc3MuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhbiBVbml0TGVhcm5pbmdQcm9ncmVzcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVVuaXRMZWFybmluZ1Byb2dyZXNzPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBVbml0TGVhcm5pbmdQcm9ncmVzcyhwKSB7XG4gICAgICAgICAgICB0aGlzLkdhbWVzTGVhcm5pbmdQcm9ncmVzcyA9IHt9O1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVuaXRMZWFybmluZ1Byb2dyZXNzIFVuaXRJRC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IFVuaXRJRFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Vbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFVuaXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5Vbml0SUQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVW5pdExlYXJuaW5nUHJvZ3Jlc3MgR2FtZXNMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxmYXJtLklHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3M+fSBHYW1lc0xlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBVbml0TGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUuR2FtZXNMZWFybmluZ1Byb2dyZXNzID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlVuaXRMZWFybmluZ1Byb2dyZXNzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklVbml0TGVhcm5pbmdQcm9ncmVzc30gbSBVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBVbml0TGVhcm5pbmdQcm9ncmVzcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uVW5pdElEICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJVbml0SURcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5Vbml0SUQpO1xuICAgICAgICAgICAgaWYgKG0uR2FtZXNMZWFybmluZ1Byb2dyZXNzICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJHYW1lc0xlYXJuaW5nUHJvZ3Jlc3NcIikpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0uR2FtZXNMZWFybmluZ1Byb2dyZXNzKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMigxOCkuZm9yaygpLnVpbnQzMig4KS5pbnQ2NChrc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICRyb290LmZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLmVuY29kZShtLkdhbWVzTGVhcm5pbmdQcm9ncmVzc1trc1tpXV0sIHcudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGFuIFVuaXRMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Vbml0TGVhcm5pbmdQcm9ncmVzc30gVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBVbml0TGVhcm5pbmdQcm9ncmVzcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5Vbml0TGVhcm5pbmdQcm9ncmVzcygpLCBrO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uVW5pdElEID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBpZiAobS5HYW1lc0xlYXJuaW5nUHJvZ3Jlc3MgPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5HYW1lc0xlYXJuaW5nUHJvZ3Jlc3MgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgayA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgci5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgbS5HYW1lc0xlYXJuaW5nUHJvZ3Jlc3NbdHlwZW9mIGsgPT09IFwib2JqZWN0XCIgPyAkdXRpbC5sb25nVG9IYXNoKGspIDoga10gPSAkcm9vdC5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcy5kZWNvZGUociwgci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhbiBVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3N9IFVuaXRMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqL1xuICAgICAgICBVbml0TGVhcm5pbmdQcm9ncmVzcy5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlVuaXRMZWFybmluZ1Byb2dyZXNzKCk7XG4gICAgICAgICAgICBpZiAoZC5Vbml0SUQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5Vbml0SUQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLlVuaXRJRCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuVW5pdElEID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLlVuaXRJRCA9IHBhcnNlSW50KGQuVW5pdElELCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuVW5pdElEID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLlVuaXRJRCA9IGQuVW5pdElEO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLlVuaXRJRCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5Vbml0SUQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5Vbml0SUQubG93ID4+PiAwLCBkLlVuaXRJRC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuR2FtZXNMZWFybmluZ1Byb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLkdhbWVzTGVhcm5pbmdQcm9ncmVzcyAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3MuR2FtZXNMZWFybmluZ1Byb2dyZXNzOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5HYW1lc0xlYXJuaW5nUHJvZ3Jlc3MgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKGQuR2FtZXNMZWFybmluZ1Byb2dyZXNzKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuR2FtZXNMZWFybmluZ1Byb2dyZXNzW2tzW2ldXSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlVuaXRMZWFybmluZ1Byb2dyZXNzLkdhbWVzTGVhcm5pbmdQcm9ncmVzczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLkdhbWVzTGVhcm5pbmdQcm9ncmVzc1trc1tpXV0gPSAkcm9vdC5mYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcy5mcm9tT2JqZWN0KGQuR2FtZXNMZWFybmluZ1Byb2dyZXNzW2tzW2ldXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBVbml0TGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Vbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5Vbml0TGVhcm5pbmdQcm9ncmVzc30gbSBVbml0TGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFVuaXRMZWFybmluZ1Byb2dyZXNzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5vYmplY3RzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLkdhbWVzTGVhcm5pbmdQcm9ncmVzcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5Vbml0SUQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLlVuaXRJRCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLlVuaXRJRCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJVbml0SURcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uVW5pdElEID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLlVuaXRJRCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLlVuaXRJRCkgOiBtLlVuaXRJRDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuVW5pdElEID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLlVuaXRJRCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5Vbml0SUQubG93ID4+PiAwLCBtLlVuaXRJRC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5Vbml0SUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIga3MyO1xuICAgICAgICAgICAgaWYgKG0uR2FtZXNMZWFybmluZ1Byb2dyZXNzICYmIChrczIgPSBPYmplY3Qua2V5cyhtLkdhbWVzTGVhcm5pbmdQcm9ncmVzcykpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuR2FtZXNMZWFybmluZ1Byb2dyZXNzID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrczIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5HYW1lc0xlYXJuaW5nUHJvZ3Jlc3Nba3MyW2pdXSA9ICRyb290LmZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLnRvT2JqZWN0KG0uR2FtZXNMZWFybmluZ1Byb2dyZXNzW2tzMltqXV0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFVuaXRMZWFybmluZ1Byb2dyZXNzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uVW5pdExlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFVuaXRMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gVW5pdExlYXJuaW5nUHJvZ3Jlc3M7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLkdhbWVUeXBlfG51bGx9IFtHYW1lVHlwZV0gR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzIEdhbWVUeXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3N0YXJdIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcyBzdGFyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtIaXN0b3J5TWF4U2NvcmVdIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcyBIaXN0b3J5TWF4U2NvcmVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcyBHYW1lVHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5HYW1lVHlwZX0gR2FtZVR5cGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5HYW1lVHlwZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcyBzdGFyLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gc3RhclxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MucHJvdG90eXBlLnN0YXIgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzIEhpc3RvcnlNYXhTY29yZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBIaXN0b3J5TWF4U2NvcmVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLnByb3RvdHlwZS5IaXN0b3J5TWF4U2NvcmUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzfSBtIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLkdhbWVUeXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJHYW1lVHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLkdhbWVUeXBlKTtcbiAgICAgICAgICAgIGlmIChtLnN0YXIgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInN0YXJcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDY0KG0uc3Rhcik7XG4gICAgICAgICAgICBpZiAobS5IaXN0b3J5TWF4U2NvcmUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIkhpc3RvcnlNYXhTY29yZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyOSkuZmxvYXQobS5IaXN0b3J5TWF4U2NvcmUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3N9IEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLkdhbWVUeXBlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uc3RhciA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLkhpc3RvcnlNYXhTY29yZSA9IHIuZmxvYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzfSBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcy5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZC5HYW1lVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkdhbWVUeXBlTm9ybWFsXCI6XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgbS5HYW1lVHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiR2FtZVR5cGUxXCI6XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbS5HYW1lVHlwZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiR2FtZVR5cGUyXCI6XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbS5HYW1lVHlwZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiR2FtZVR5cGUzXCI6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgbS5HYW1lVHlwZSA9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiR2FtZVR5cGU0XCI6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgbS5HYW1lVHlwZSA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5zdGFyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uc3RhciA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuc3RhcikpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc3RhciA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5zdGFyID0gcGFyc2VJbnQoZC5zdGFyLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc3RhciA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5zdGFyID0gZC5zdGFyO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnN0YXIgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uc3RhciA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnN0YXIubG93ID4+PiAwLCBkLnN0YXIuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLkhpc3RvcnlNYXhTY29yZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5IaXN0b3J5TWF4U2NvcmUgPSBOdW1iZXIoZC5IaXN0b3J5TWF4U2NvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uR2FtZVR5cGVMZWFybmluZ1Byb2dyZXNzfSBtIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLkdhbWVUeXBlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gXCJHYW1lVHlwZU5vcm1hbFwiIDogMDtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFyID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFyID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQuSGlzdG9yeU1heFNjb3JlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLkdhbWVUeXBlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIkdhbWVUeXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5HYW1lVHlwZSA9IG8uZW51bXMgPT09IFN0cmluZyA/ICRyb290LmZhcm0uR2FtZVR5cGVbbS5HYW1lVHlwZV0gOiBtLkdhbWVUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3RhciAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdGFyXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnN0YXIgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuc3RhciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnN0YXIpIDogbS5zdGFyO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5zdGFyID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnN0YXIpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc3Rhci5sb3cgPj4+IDAsIG0uc3Rhci5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zdGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uSGlzdG9yeU1heFNjb3JlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIkhpc3RvcnlNYXhTY29yZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuSGlzdG9yeU1heFNjb3JlID0gby5qc29uICYmICFpc0Zpbml0ZShtLkhpc3RvcnlNYXhTY29yZSkgPyBTdHJpbmcobS5IaXN0b3J5TWF4U2NvcmUpIDogbS5IaXN0b3J5TWF4U2NvcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBHYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3MgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5HYW1lVHlwZUxlYXJuaW5nUHJvZ3Jlc3NcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEdhbWVUeXBlTGVhcm5pbmdQcm9ncmVzcztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFNYXRlcmlhbHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFNYXRlcmlhbHMuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcU1hdGVyaWFsc1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFt1c2VyX2lkXSBSZXFNYXRlcmlhbHMgdXNlcl9pZFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXFNYXRlcmlhbHMuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcU1hdGVyaWFscy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcU1hdGVyaWFsc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFNYXRlcmlhbHM9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlcU1hdGVyaWFscyhwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxTWF0ZXJpYWxzIHVzZXJfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB1c2VyX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU1hdGVyaWFsc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcU1hdGVyaWFscy5wcm90b3R5cGUudXNlcl9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxTWF0ZXJpYWxzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxTWF0ZXJpYWxzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU1hdGVyaWFsc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxTWF0ZXJpYWxzfSBtIFJlcU1hdGVyaWFscyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFNYXRlcmlhbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnVzZXJfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInVzZXJfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS51c2VyX2lkKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxTWF0ZXJpYWxzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxTWF0ZXJpYWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxTWF0ZXJpYWxzfSBSZXFNYXRlcmlhbHNcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFNYXRlcmlhbHMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVxTWF0ZXJpYWxzKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS51c2VyX2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFNYXRlcmlhbHMgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFNYXRlcmlhbHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFNYXRlcmlhbHN9IFJlcU1hdGVyaWFsc1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxTWF0ZXJpYWxzLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFNYXRlcmlhbHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcU1hdGVyaWFscygpO1xuICAgICAgICAgICAgaWYgKGQudXNlcl9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLnVzZXJfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnVzZXJfaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVzZXJfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udXNlcl9pZCA9IHBhcnNlSW50KGQudXNlcl9pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVzZXJfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udXNlcl9pZCA9IGQudXNlcl9pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51c2VyX2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLnVzZXJfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC51c2VyX2lkLmxvdyA+Pj4gMCwgZC51c2VyX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxTWF0ZXJpYWxzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU1hdGVyaWFsc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFNYXRlcmlhbHN9IG0gUmVxTWF0ZXJpYWxzXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxTWF0ZXJpYWxzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnVzZXJfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnVzZXJfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51c2VyX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVzZXJfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udXNlcl9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC51c2VyX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udXNlcl9pZCkgOiBtLnVzZXJfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnVzZXJfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udXNlcl9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS51c2VyX2lkLmxvdyA+Pj4gMCwgbS51c2VyX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnVzZXJfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFNYXRlcmlhbHMgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFNYXRlcmlhbHNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcU1hdGVyaWFscy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcU1hdGVyaWFscztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwTWF0ZXJpYWxzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcE1hdGVyaWFscy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcE1hdGVyaWFsc1xuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklNYXRlcmlhbEl0ZW0+fG51bGx9IFtNYXRzXSBSZXNwTWF0ZXJpYWxzIE1hdHNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcE1hdGVyaWFscy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcE1hdGVyaWFscy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BNYXRlcmlhbHNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcE1hdGVyaWFscz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcE1hdGVyaWFscyhwKSB7XG4gICAgICAgICAgICB0aGlzLk1hdHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwTWF0ZXJpYWxzIE1hdHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklNYXRlcmlhbEl0ZW0+fSBNYXRzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYXRlcmlhbHNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWF0ZXJpYWxzLnByb3RvdHlwZS5NYXRzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BNYXRlcmlhbHMgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwTWF0ZXJpYWxzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYXRlcmlhbHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BNYXRlcmlhbHN9IG0gUmVzcE1hdGVyaWFscyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWF0ZXJpYWxzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5NYXRzICE9IG51bGwgJiYgbS5NYXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5NYXRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLk1hdGVyaWFsSXRlbS5lbmNvZGUobS5NYXRzW2ldLCB3LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcE1hdGVyaWFscyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYXRlcmlhbHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwTWF0ZXJpYWxzfSBSZXNwTWF0ZXJpYWxzXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hdGVyaWFscy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwTWF0ZXJpYWxzKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5NYXRzICYmIG0uTWF0cy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5NYXRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0uTWF0cy5wdXNoKCRyb290LmZhcm0uTWF0ZXJpYWxJdGVtLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BNYXRlcmlhbHMgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0ZXJpYWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcE1hdGVyaWFsc30gUmVzcE1hdGVyaWFsc1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hdGVyaWFscy5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcE1hdGVyaWFscylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcE1hdGVyaWFscygpO1xuICAgICAgICAgICAgaWYgKGQuTWF0cykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLk1hdHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwTWF0ZXJpYWxzLk1hdHM6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uTWF0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5NYXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5NYXRzW2ldICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcE1hdGVyaWFscy5NYXRzOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0uTWF0c1tpXSA9ICRyb290LmZhcm0uTWF0ZXJpYWxJdGVtLmZyb21PYmplY3QoZC5NYXRzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcE1hdGVyaWFscyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0ZXJpYWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BNYXRlcmlhbHN9IG0gUmVzcE1hdGVyaWFsc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYXRlcmlhbHMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5NYXRzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5NYXRzICYmIG0uTWF0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLk1hdHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uTWF0cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLk1hdHNbal0gPSAkcm9vdC5mYXJtLk1hdGVyaWFsSXRlbS50b09iamVjdChtLk1hdHNbal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BNYXRlcmlhbHMgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWF0ZXJpYWxzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWF0ZXJpYWxzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcE1hdGVyaWFscztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5NYXRlcmlhbEl0ZW0gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBNYXRlcmlhbEl0ZW0uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSU1hdGVyaWFsSXRlbVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttYXRfaWRdIE1hdGVyaWFsSXRlbSBtYXRfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW21hdF9uYW1lXSBNYXRlcmlhbEl0ZW0gbWF0X25hbWVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWF0ZXJpYWxJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBNYXRlcmlhbEl0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNYXRlcmlhbEl0ZW1cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWF0ZXJpYWxJdGVtPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBNYXRlcmlhbEl0ZW0ocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hdGVyaWFsSXRlbSBtYXRfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBtYXRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWF0ZXJpYWxJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWF0ZXJpYWxJdGVtLnByb3RvdHlwZS5tYXRfaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWF0ZXJpYWxJdGVtIG1hdF9uYW1lLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IG1hdF9uYW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1hdGVyaWFsSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1hdGVyaWFsSXRlbS5wcm90b3R5cGUubWF0X25hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTWF0ZXJpYWxJdGVtIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uTWF0ZXJpYWxJdGVtLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1hdGVyaWFsSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWF0ZXJpYWxJdGVtfSBtIE1hdGVyaWFsSXRlbSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBNYXRlcmlhbEl0ZW0uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLm1hdF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWF0X2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0ubWF0X2lkKTtcbiAgICAgICAgICAgIGlmIChtLm1hdF9uYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtYXRfbmFtZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxOCkuc3RyaW5nKG0ubWF0X25hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBNYXRlcmlhbEl0ZW0gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYXRlcmlhbEl0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NYXRlcmlhbEl0ZW19IE1hdGVyaWFsSXRlbVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE1hdGVyaWFsSXRlbS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5NYXRlcmlhbEl0ZW0oKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9uYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgTWF0ZXJpYWxJdGVtIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWF0ZXJpYWxJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWF0ZXJpYWxJdGVtfSBNYXRlcmlhbEl0ZW1cbiAgICAgICAgICovXG4gICAgICAgIE1hdGVyaWFsSXRlbS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uTWF0ZXJpYWxJdGVtKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5NYXRlcmlhbEl0ZW0oKTtcbiAgICAgICAgICAgIGlmIChkLm1hdF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm1hdF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubWF0X2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gcGFyc2VJbnQoZC5tYXRfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gZC5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1hdF9pZC5sb3cgPj4+IDAsIGQubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tYXRfbmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5tYXRfbmFtZSA9IFN0cmluZyhkLm1hdF9uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNYXRlcmlhbEl0ZW0gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWF0ZXJpYWxJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLk1hdGVyaWFsSXRlbX0gbSBNYXRlcmlhbEl0ZW1cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNYXRlcmlhbEl0ZW0udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5tYXRfbmFtZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tYXRfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibWF0X2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLm1hdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5tYXRfaWQpIDogbS5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5tYXRfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ubWF0X2lkLmxvdyA+Pj4gMCwgbS5tYXRfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ubWF0X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubWF0X25hbWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibWF0X25hbWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLm1hdF9uYW1lID0gbS5tYXRfbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1hdGVyaWFsSXRlbSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1hdGVyaWFsSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTWF0ZXJpYWxJdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTWF0ZXJpYWxJdGVtO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVVwZGF0ZU1hdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcVVwZGF0ZU1hdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxVXBkYXRlTWF0XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3VpZF9pZF0gUmVxVXBkYXRlTWF0IHVpZF9pZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttYXRfaWRdIFJlcVVwZGF0ZU1hdCBtYXRfaWRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxVXBkYXRlTWF0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXFVcGRhdGVNYXQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXFVcGRhdGVNYXRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVXBkYXRlTWF0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXFVcGRhdGVNYXQocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcVVwZGF0ZU1hdCB1aWRfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB1aWRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlTWF0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTWF0LnByb3RvdHlwZS51aWRfaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxVXBkYXRlTWF0IG1hdF9pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IG1hdF9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVNYXRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVNYXQucHJvdG90eXBlLm1hdF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxVXBkYXRlTWF0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxVXBkYXRlTWF0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVwZGF0ZU1hdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVXBkYXRlTWF0fSBtIFJlcVVwZGF0ZU1hdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVNYXQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnVpZF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidWlkX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0udWlkX2lkKTtcbiAgICAgICAgICAgIGlmIChtLm1hdF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWF0X2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLm1hdF9pZCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlcVVwZGF0ZU1hdCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVwZGF0ZU1hdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVVwZGF0ZU1hdH0gUmVxVXBkYXRlTWF0XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTWF0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVVwZGF0ZU1hdCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0udWlkX2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFVcGRhdGVNYXQgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVNYXRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVcGRhdGVNYXR9IFJlcVVwZGF0ZU1hdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTWF0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFVcGRhdGVNYXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVVwZGF0ZU1hdCgpO1xuICAgICAgICAgICAgaWYgKGQudWlkX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0udWlkX2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC51aWRfaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVpZF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS51aWRfaWQgPSBwYXJzZUludChkLnVpZF9pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnVpZF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS51aWRfaWQgPSBkLnVpZF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC51aWRfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0udWlkX2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudWlkX2lkLmxvdyA+Pj4gMCwgZC51aWRfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm1hdF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm1hdF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubWF0X2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gcGFyc2VJbnQoZC5tYXRfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gZC5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1hdF9pZC5sb3cgPj4+IDAsIGQubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxVXBkYXRlTWF0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVwZGF0ZU1hdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFVcGRhdGVNYXR9IG0gUmVxVXBkYXRlTWF0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTWF0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnVpZF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudWlkX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udWlkX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVpZF9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS51aWRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQudWlkX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udWlkX2lkKSA6IG0udWlkX2lkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC51aWRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udWlkX2lkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnVpZF9pZC5sb3cgPj4+IDAsIG0udWlkX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnVpZF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1hdF9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJtYXRfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubWF0X2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLm1hdF9pZCkgOiBtLm1hdF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLm1hdF9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5tYXRfaWQubG93ID4+PiAwLCBtLm1hdF9pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5tYXRfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFVcGRhdGVNYXQgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVNYXRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZU1hdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcVVwZGF0ZU1hdDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwVXBkYXRlTWF0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcFVwZGF0ZU1hdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcFVwZGF0ZU1hdFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttYXRfaWRdIFJlc3BVcGRhdGVNYXQgbWF0X2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcnxMb25nPnxudWxsfSBbbGFzdF9zdHVkeV0gUmVzcFVwZGF0ZU1hdCBsYXN0X3N0dWR5XG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BVcGRhdGVNYXQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BVcGRhdGVNYXQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwVXBkYXRlTWF0XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BVcGRhdGVNYXQ9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BVcGRhdGVNYXQocCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0X3N0dWR5ID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcFVwZGF0ZU1hdCBtYXRfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBtYXRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZU1hdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVNYXQucHJvdG90eXBlLm1hdF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwVXBkYXRlTWF0IGxhc3Rfc3R1ZHkuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXJ8TG9uZz59IGxhc3Rfc3R1ZHlcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZU1hdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVNYXQucHJvdG90eXBlLmxhc3Rfc3R1ZHkgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVzcFVwZGF0ZU1hdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BVcGRhdGVNYXQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZU1hdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFVwZGF0ZU1hdH0gbSBSZXNwVXBkYXRlTWF0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVNYXQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLm1hdF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWF0X2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0ubWF0X2lkKTtcbiAgICAgICAgICAgIGlmIChtLmxhc3Rfc3R1ZHkgIT0gbnVsbCAmJiBtLmxhc3Rfc3R1ZHkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0ubGFzdF9zdHVkeS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLmxhc3Rfc3R1ZHlbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BVcGRhdGVNYXQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXBkYXRlTWF0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFVwZGF0ZU1hdH0gUmVzcFVwZGF0ZU1hdFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVNYXQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcFVwZGF0ZU1hdCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0ubGFzdF9zdHVkeSAmJiBtLmxhc3Rfc3R1ZHkubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubGFzdF9zdHVkeSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5sYXN0X3N0dWR5LnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmxhc3Rfc3R1ZHkucHVzaChyLmludDY0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwVXBkYXRlTWF0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZU1hdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BVcGRhdGVNYXR9IFJlc3BVcGRhdGVNYXRcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVNYXQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BVcGRhdGVNYXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BVcGRhdGVNYXQoKTtcbiAgICAgICAgICAgIGlmIChkLm1hdF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm1hdF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubWF0X2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gcGFyc2VJbnQoZC5tYXRfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5tYXRfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWF0X2lkID0gZC5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWF0X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm1hdF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1hdF9pZC5sb3cgPj4+IDAsIGQubWF0X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5sYXN0X3N0dWR5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQubGFzdF9zdHVkeSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BVcGRhdGVNYXQubGFzdF9zdHVkeTogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5sYXN0X3N0dWR5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmxhc3Rfc3R1ZHkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAobS5sYXN0X3N0dWR5W2ldID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5sYXN0X3N0dWR5W2ldKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubGFzdF9zdHVkeVtpXSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubGFzdF9zdHVkeVtpXSA9IHBhcnNlSW50KGQubGFzdF9zdHVkeVtpXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5sYXN0X3N0dWR5W2ldID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5sYXN0X3N0dWR5W2ldID0gZC5sYXN0X3N0dWR5W2ldO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5sYXN0X3N0dWR5W2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5sYXN0X3N0dWR5W2ldID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQubGFzdF9zdHVkeVtpXS5sb3cgPj4+IDAsIGQubGFzdF9zdHVkeVtpXS5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwVXBkYXRlTWF0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVcGRhdGVNYXRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFVwZGF0ZU1hdH0gbSBSZXNwVXBkYXRlTWF0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZU1hdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmxhc3Rfc3R1ZHkgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQubWF0X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tYXRfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibWF0X2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLm1hdF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5tYXRfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5tYXRfaWQpIDogbS5tYXRfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLm1hdF9pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5tYXRfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ubWF0X2lkLmxvdyA+Pj4gMCwgbS5tYXRfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ubWF0X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubGFzdF9zdHVkeSAmJiBtLmxhc3Rfc3R1ZHkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5sYXN0X3N0dWR5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmxhc3Rfc3R1ZHkubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmxhc3Rfc3R1ZHlbal0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLmxhc3Rfc3R1ZHlbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5sYXN0X3N0dWR5W2pdKSA6IG0ubGFzdF9zdHVkeVtqXTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5sYXN0X3N0dWR5W2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmxhc3Rfc3R1ZHlbal0pIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0ubGFzdF9zdHVkeVtqXS5sb3cgPj4+IDAsIG0ubGFzdF9zdHVkeVtqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5sYXN0X3N0dWR5W2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BVcGRhdGVNYXQgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXBkYXRlTWF0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVXBkYXRlTWF0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFVwZGF0ZU1hdDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5Qb3MgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBQb3MuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVBvc1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbeF0gUG9zIHhcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3ldIFBvcyB5XG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFBvcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUG9zLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUG9zXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVBvcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUG9zKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQb3MgeC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB4XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlBvc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFBvcy5wcm90b3R5cGUueCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBvcyB5LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHlcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUG9zXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUG9zLnByb3RvdHlwZS55ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFBvcyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlBvcy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qb3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVBvc30gbSBQb3MgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUG9zLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS54ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ4XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0ueCk7XG4gICAgICAgICAgICBpZiAobS55ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ5XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLnkpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBQb3MgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qb3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Qb3N9IFBvc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFBvcy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5Qb3MoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLnggPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS55ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBQb3MgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qb3NcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Qb3N9IFBvc1xuICAgICAgICAgKi9cbiAgICAgICAgUG9zLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5Qb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlBvcygpO1xuICAgICAgICAgICAgaWYgKGQueCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS54ID0gZC54IHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ueSA9IGQueSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUG9zIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlBvc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5Qb3N9IG0gUG9zXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUG9zLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQueCA9IDA7XG4gICAgICAgICAgICAgICAgZC55ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnggIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwieFwiKSkge1xuICAgICAgICAgICAgICAgIGQueCA9IG0ueDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnkgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwieVwiKSkge1xuICAgICAgICAgICAgICAgIGQueSA9IG0ueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFBvcyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlBvc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUG9zLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUG9zO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZGluZ1N0YXRlVHlwZSBlbnVtLlxuICAgICAqIEBuYW1lIGZhcm0uQnVpbGRpbmdTdGF0ZVR5cGVcbiAgICAgKiBAZW51bSB7bnVtYmVyfVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBJbnZhbGlkPTAgSW52YWxpZCB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBCdWlsZGluZz0xIEJ1aWxkaW5nIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFVwZ3JhZGluZz0yIFVwZ3JhZGluZyB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQcmVDb21wbGV0ZT0zIFByZUNvbXBsZXRlIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE5vcm1hbD00IE5vcm1hbCB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBBYmFuZG9uZWQ9NSBBYmFuZG9uZWQgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gTG9jaz02IExvY2sgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLkJ1aWxkaW5nU3RhdGVUeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiSW52YWxpZFwiXSA9IDA7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzFdID0gXCJCdWlsZGluZ1wiXSA9IDE7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzJdID0gXCJVcGdyYWRpbmdcIl0gPSAyO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFszXSA9IFwiUHJlQ29tcGxldGVcIl0gPSAzO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs0XSA9IFwiTm9ybWFsXCJdID0gNDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNV0gPSBcIkFiYW5kb25lZFwiXSA9IDU7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzZdID0gXCJMb2NrXCJdID0gNjtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JvcFN0YXRlVHlwZSBlbnVtLlxuICAgICAqIEBuYW1lIGZhcm0uQ3JvcFN0YXRlVHlwZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE5vdEV4aXN0PTAgTm90RXhpc3QgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gU2VlZGxpbmc9MSBTZWVkbGluZyB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTbWFsbExlYWY9MiBTbWFsbExlYWYgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gTGFyZ2VMZWFmPTMgTGFyZ2VMZWFmIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE1hdHVyZT00IE1hdHVyZSB2YWx1ZVxuICAgICAqL1xuICAgIGZhcm0uQ3JvcFN0YXRlVHlwZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlc0J5SWQgPSB7fSwgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh2YWx1ZXNCeUlkKTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMF0gPSBcIk5vdEV4aXN0XCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIlNlZWRsaW5nXCJdID0gMTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMl0gPSBcIlNtYWxsTGVhZlwiXSA9IDI7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzNdID0gXCJMYXJnZUxlYWZcIl0gPSAzO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs0XSA9IFwiTWF0dXJlXCJdID0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogQXJhYmxlTGFuZFN0YXRlVHlwZSBlbnVtLlxuICAgICAqIEBuYW1lIGZhcm0uQXJhYmxlTGFuZFN0YXRlVHlwZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFNwYWNlPTAgU3BhY2UgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gVXNpbmc9MSBVc2luZyB2YWx1ZVxuICAgICAqL1xuICAgIGZhcm0uQXJhYmxlTGFuZFN0YXRlVHlwZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlc0J5SWQgPSB7fSwgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh2YWx1ZXNCeUlkKTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMF0gPSBcIlNwYWNlXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIlVzaW5nXCJdID0gMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogTWFpbFR5cGUgZW51bS5cbiAgICAgKiBAbmFtZSBmYXJtLk1haWxUeXBlXG4gICAgICogQGVudW0ge251bWJlcn1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gU1lTPTAgU1lTIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE5QQz0xIE5QQyB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQbGF5ZXI9MiBQbGF5ZXIgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLk1haWxUeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiU1lTXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIk5QQ1wiXSA9IDE7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzJdID0gXCJQbGF5ZXJcIl0gPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBNYWlsU3RhdGUgZW51bS5cbiAgICAgKiBAbmFtZSBmYXJtLk1haWxTdGF0ZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE5vX1JlYWQ9MCBOb19SZWFkIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFJlYWQ9MSBSZWFkIHZhbHVlXG4gICAgICovXG4gICAgZmFybS5NYWlsU3RhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZXNCeUlkID0ge30sIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUodmFsdWVzQnlJZCk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJOb19SZWFkXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIlJlYWRcIl0gPSAxO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBNYWlsVGFwVHlwZSBlbnVtLlxuICAgICAqIEBuYW1lIGZhcm0uTWFpbFRhcFR5cGVcbiAgICAgKiBAZW51bSB7bnVtYmVyfVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBOb3RpZmljYXRpb249MCBOb3RpZmljYXRpb24gdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gQW5uZXhlcz0xIEFubmV4ZXMgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLk1haWxUYXBUeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiTm90aWZpY2F0aW9uXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIkFubmV4ZXNcIl0gPSAxO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBBbm5leFN0YXRlIGVudW0uXG4gICAgICogQG5hbWUgZmFybS5Bbm5leFN0YXRlXG4gICAgICogQGVudW0ge251bWJlcn1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gTm9fUmVjZWl2ZT0wIE5vX1JlY2VpdmUgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gUmVjZWl2ZWQ9MSBSZWNlaXZlZCB2YWx1ZVxuICAgICAqL1xuICAgIGZhcm0uQW5uZXhTdGF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlc0J5SWQgPSB7fSwgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh2YWx1ZXNCeUlkKTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMF0gPSBcIk5vX1JlY2VpdmVcIl0gPSAwO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsxXSA9IFwiUmVjZWl2ZWRcIl0gPSAxO1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW5jeVR5cGUgZW51bS5cbiAgICAgKiBAbmFtZSBmYXJtLkN1cnJlbmN5VHlwZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IENOb3RoaW5nPTAgQ05vdGhpbmcgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gQ0dvbGQ9MSBDR29sZCB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBDQ3J5c3RhbD0yIENDcnlzdGFsIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IENMb3ZlPTMgQ0xvdmUgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLkN1cnJlbmN5VHlwZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlc0J5SWQgPSB7fSwgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh2YWx1ZXNCeUlkKTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMF0gPSBcIkNOb3RoaW5nXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIkNHb2xkXCJdID0gMTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMl0gPSBcIkNDcnlzdGFsXCJdID0gMjtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbM10gPSBcIkNMb3ZlXCJdID0gMztcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogVW5sb2NrQ29uZGl0aW9uVHlwZSBlbnVtLlxuICAgICAqIEBuYW1lIGZhcm0uVW5sb2NrQ29uZGl0aW9uVHlwZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE5vdGhpbmc9MCBOb3RoaW5nIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IExvdmU9MSBMb3ZlIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IEdvbGQ9MiBHb2xkIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFRhc2s9MyBUYXNrIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFByb3A9NCBQcm9wIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE1hbm9ySGVhcnQ9NSBNYW5vckhlYXJ0IHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IExldmVsPTYgTGV2ZWwgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gQ3J5c3RhbD03IENyeXN0YWwgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLlVubG9ja0NvbmRpdGlvblR5cGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZXNCeUlkID0ge30sIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUodmFsdWVzQnlJZCk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJOb3RoaW5nXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIkxvdmVcIl0gPSAxO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsyXSA9IFwiR29sZFwiXSA9IDI7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzNdID0gXCJUYXNrXCJdID0gMztcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNF0gPSBcIlByb3BcIl0gPSA0O1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs1XSA9IFwiTWFub3JIZWFydFwiXSA9IDU7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzZdID0gXCJMZXZlbFwiXSA9IDY7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzddID0gXCJDcnlzdGFsXCJdID0gNztcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5CdWlsZGluZ0l0ZW0gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBCdWlsZGluZ0l0ZW0uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gQnVpbGRpbmdJdGVtIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjb25maWdJRF0gQnVpbGRpbmdJdGVtIGNvbmZpZ0lEXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtsZXZlbF0gQnVpbGRpbmdJdGVtIGxldmVsXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbcm90YXRlZF0gQnVpbGRpbmdJdGVtIHJvdGF0ZWRcbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLklQb3N8bnVsbH0gW3Bvc10gQnVpbGRpbmdJdGVtIHBvc1xuICAgICAgICAgKiBAcHJvcGVydHkge2Zhcm0uQnVpbGRpbmdTdGF0ZVR5cGV8bnVsbH0gW3N0YXRlXSBCdWlsZGluZ0l0ZW0gc3RhdGVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2xlZnREdXJdIEJ1aWxkaW5nSXRlbSBsZWZ0RHVyXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEJ1aWxkaW5nSXRlbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgQnVpbGRpbmdJdGVtLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJQnVpbGRpbmdJdGVtXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUJ1aWxkaW5nSXRlbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gQnVpbGRpbmdJdGVtKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZGluZ0l0ZW0gaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZGluZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZGluZ0l0ZW0ucHJvdG90eXBlLmlkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkaW5nSXRlbSBjb25maWdJRC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBjb25maWdJRFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZGluZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZGluZ0l0ZW0ucHJvdG90eXBlLmNvbmZpZ0lEID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRpbmdJdGVtIGxldmVsLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGxldmVsXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkaW5nSXRlbS5wcm90b3R5cGUubGV2ZWwgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZGluZ0l0ZW0gcm90YXRlZC5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gcm90YXRlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZGluZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZGluZ0l0ZW0ucHJvdG90eXBlLnJvdGF0ZWQgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRpbmdJdGVtIHBvcy5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5JUG9zfG51bGx8dW5kZWZpbmVkfSBwb3NcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQnVpbGRpbmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRpbmdJdGVtLnByb3RvdHlwZS5wb3MgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZGluZ0l0ZW0gc3RhdGUuXG4gICAgICAgICAqIEBtZW1iZXIge2Zhcm0uQnVpbGRpbmdTdGF0ZVR5cGV9IHN0YXRlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkaW5nSXRlbS5wcm90b3R5cGUuc3RhdGUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZGluZ0l0ZW0gbGVmdER1ci5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBsZWZ0RHVyXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkaW5nSXRlbS5wcm90b3R5cGUubGVmdER1ciA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBCdWlsZGluZ0l0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5CdWlsZGluZ0l0ZW0udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQnVpbGRpbmdJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklCdWlsZGluZ0l0ZW19IG0gQnVpbGRpbmdJdGVtIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkaW5nSXRlbS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0uY29uZmlnSUQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNvbmZpZ0lEXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmNvbmZpZ0lEKTtcbiAgICAgICAgICAgIGlmIChtLmxldmVsICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJsZXZlbFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50MzIobS5sZXZlbCk7XG4gICAgICAgICAgICBpZiAobS5yb3RhdGVkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyb3RhdGVkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5ib29sKG0ucm90YXRlZCk7XG4gICAgICAgICAgICBpZiAobS5wb3MgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInBvc1wiKSlcbiAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLlBvcy5lbmNvZGUobS5wb3MsIHcudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgaWYgKG0uc3RhdGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInN0YXRlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQ4KS5pbnQzMihtLnN0YXRlKTtcbiAgICAgICAgICAgIGlmIChtLmxlZnREdXIgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImxlZnREdXJcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTYpLmludDMyKG0ubGVmdER1cik7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIEJ1aWxkaW5nSXRlbSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkJ1aWxkaW5nSXRlbX0gQnVpbGRpbmdJdGVtXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRpbmdJdGVtLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLkJ1aWxkaW5nSXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5jb25maWdJRCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLmxldmVsID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0ucm90YXRlZCA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG0ucG9zID0gJHJvb3QuZmFybS5Qb3MuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG0uc3RhdGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbS5sZWZ0RHVyID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBCdWlsZGluZ0l0ZW0gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZGluZ0l0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5CdWlsZGluZ0l0ZW19IEJ1aWxkaW5nSXRlbVxuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRpbmdJdGVtLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5CdWlsZGluZ0l0ZW0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkJ1aWxkaW5nSXRlbSgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY29uZmlnSUQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY29uZmlnSUQgPSBkLmNvbmZpZ0lEIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmxldmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmxldmVsID0gZC5sZXZlbCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5yb3RhdGVkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnJvdGF0ZWQgPSBCb29sZWFuKGQucm90YXRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5wb3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5wb3MgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkJ1aWxkaW5nSXRlbS5wb3M6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnBvcyA9ICRyb290LmZhcm0uUG9zLmZyb21PYmplY3QoZC5wb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwiSW52YWxpZFwiOlxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkJ1aWxkaW5nXCI6XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiVXBncmFkaW5nXCI6XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUHJlQ29tcGxldGVcIjpcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBtLnN0YXRlID0gMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJOb3JtYWxcIjpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBtLnN0YXRlID0gNDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJBYmFuZG9uZWRcIjpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBtLnN0YXRlID0gNTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJMb2NrXCI6XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5sZWZ0RHVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmxlZnREdXIgPSBkLmxlZnREdXIgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIEJ1aWxkaW5nSXRlbSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZGluZ0l0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uQnVpbGRpbmdJdGVtfSBtIEJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkaW5nSXRlbS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5jb25maWdJRCA9IDA7XG4gICAgICAgICAgICAgICAgZC5sZXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgZC5yb3RhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZC5wb3MgPSBudWxsO1xuICAgICAgICAgICAgICAgIGQuc3RhdGUgPSBvLmVudW1zID09PSBTdHJpbmcgPyBcIkludmFsaWRcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5sZWZ0RHVyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY29uZmlnSUQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY29uZmlnSURcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvbmZpZ0lEID0gbS5jb25maWdJRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmxldmVsICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImxldmVsXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5sZXZlbCA9IG0ubGV2ZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5yb3RhdGVkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInJvdGF0ZWRcIikpIHtcbiAgICAgICAgICAgICAgICBkLnJvdGF0ZWQgPSBtLnJvdGF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5wb3MgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicG9zXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5wb3MgPSAkcm9vdC5mYXJtLlBvcy50b09iamVjdChtLnBvcywgbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGF0ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuc3RhdGUgPSBvLmVudW1zID09PSBTdHJpbmcgPyAkcm9vdC5mYXJtLkJ1aWxkaW5nU3RhdGVUeXBlW20uc3RhdGVdIDogbS5zdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmxlZnREdXIgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibGVmdER1clwiKSkge1xuICAgICAgICAgICAgICAgIGQubGVmdER1ciA9IG0ubGVmdER1cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEJ1aWxkaW5nSXRlbSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkaW5nSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRpbmdJdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQnVpbGRpbmdJdGVtO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcUJ1aWxkaW5nTGlzdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcUJ1aWxkaW5nTGlzdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxQnVpbGRpbmdMaXN0XG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcUJ1aWxkaW5nTGlzdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxQnVpbGRpbmdMaXN0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcUJ1aWxkaW5nTGlzdD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxQnVpbGRpbmdMaXN0KHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxQnVpbGRpbmdMaXN0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxQnVpbGRpbmdMaXN0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQnVpbGRpbmdMaXN0fSBtIFJlcUJ1aWxkaW5nTGlzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCdWlsZGluZ0xpc3QuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxQnVpbGRpbmdMaXN0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxQnVpbGRpbmdMaXN0fSBSZXFCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCdWlsZGluZ0xpc3QuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVxQnVpbGRpbmdMaXN0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcUJ1aWxkaW5nTGlzdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcUJ1aWxkaW5nTGlzdH0gUmVxQnVpbGRpbmdMaXN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFCdWlsZGluZ0xpc3QuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcUJ1aWxkaW5nTGlzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgJHJvb3QuZmFybS5SZXFCdWlsZGluZ0xpc3QoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxQnVpbGRpbmdMaXN0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFCdWlsZGluZ0xpc3R9IG0gUmVxQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQnVpbGRpbmdMaXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxQnVpbGRpbmdMaXN0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFCdWlsZGluZ0xpc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFCdWlsZGluZ0xpc3Q7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcEJ1aWxkaW5nTGlzdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BCdWlsZGluZ0xpc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48ZmFybS5JQnVpbGRpbmdJdGVtPnxudWxsfSBbYnVpbGRpbmdzXSBSZXNwQnVpbGRpbmdMaXN0IGJ1aWxkaW5nc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwQnVpbGRpbmdMaXN0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwQnVpbGRpbmdMaXN0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwQnVpbGRpbmdMaXN0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwQnVpbGRpbmdMaXN0KHApIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRpbmdzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEJ1aWxkaW5nTGlzdCBidWlsZGluZ3MuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklCdWlsZGluZ0l0ZW0+fSBidWlsZGluZ3NcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCdWlsZGluZ0xpc3QucHJvdG90eXBlLmJ1aWxkaW5ncyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwQnVpbGRpbmdMaXN0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcEJ1aWxkaW5nTGlzdC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwQnVpbGRpbmdMaXN0fSBtIFJlc3BCdWlsZGluZ0xpc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJ1aWxkaW5nTGlzdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdzICE9IG51bGwgJiYgbS5idWlsZGluZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmJ1aWxkaW5ncy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5CdWlsZGluZ0l0ZW0uZW5jb2RlKG0uYnVpbGRpbmdzW2ldLCB3LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcEJ1aWxkaW5nTGlzdCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwQnVpbGRpbmdMaXN0fSBSZXNwQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJ1aWxkaW5nTGlzdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwQnVpbGRpbmdMaXN0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5idWlsZGluZ3MgJiYgbS5idWlsZGluZ3MubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdzLnB1c2goJHJvb3QuZmFybS5CdWlsZGluZ0l0ZW0uZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcEJ1aWxkaW5nTGlzdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwQnVpbGRpbmdMaXN0fSBSZXNwQnVpbGRpbmdMaXN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQnVpbGRpbmdMaXN0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwQnVpbGRpbmdMaXN0KVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwQnVpbGRpbmdMaXN0KCk7XG4gICAgICAgICAgICBpZiAoZC5idWlsZGluZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5idWlsZGluZ3MpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwQnVpbGRpbmdMaXN0LmJ1aWxkaW5nczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5idWlsZGluZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuYnVpbGRpbmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5idWlsZGluZ3NbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwQnVpbGRpbmdMaXN0LmJ1aWxkaW5nczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nc1tpXSA9ICRyb290LmZhcm0uQnVpbGRpbmdJdGVtLmZyb21PYmplY3QoZC5idWlsZGluZ3NbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwQnVpbGRpbmdMaXN0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcEJ1aWxkaW5nTGlzdH0gbSBSZXNwQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJ1aWxkaW5nTGlzdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkaW5ncyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdzICYmIG0uYnVpbGRpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmJ1aWxkaW5ncy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nc1tqXSA9ICRyb290LmZhcm0uQnVpbGRpbmdJdGVtLnRvT2JqZWN0KG0uYnVpbGRpbmdzW2pdLCBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwQnVpbGRpbmdMaXN0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJ1aWxkaW5nTGlzdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BCdWlsZGluZ0xpc3Q7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3Q9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0KHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3R9IG0gUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0fSBSZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdH0gUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgJHJvb3QuZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdH0gbSBSZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcUNhbkJ1aWxkQnVpbGRpbmdMaXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQ2FuQnVpbGRCdWlsZGluZ0xpc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFDYW5CdWlsZEJ1aWxkaW5nTGlzdDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXI+fG51bGx9IFtidWlsZGluZ0NvbmZpZ0lkc10gUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0IGJ1aWxkaW5nQ29uZmlnSWRzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0KHApIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRpbmdDb25maWdJZHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QgYnVpbGRpbmdDb25maWdJZHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXI+fSBidWlsZGluZ0NvbmZpZ0lkc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QucHJvdG90eXBlLmJ1aWxkaW5nQ29uZmlnSWRzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdH0gbSBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5idWlsZGluZ0NvbmZpZ0lkcyAhPSBudWxsICYmIG0uYnVpbGRpbmdDb25maWdJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uYnVpbGRpbmdDb25maWdJZHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50MzIobS5idWlsZGluZ0NvbmZpZ0lkc1tpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0fSBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5idWlsZGluZ0NvbmZpZ0lkcyAmJiBtLmJ1aWxkaW5nQ29uZmlnSWRzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nQ29uZmlnSWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSByLnVpbnQzMigpICsgci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nQ29uZmlnSWRzLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nQ29uZmlnSWRzLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0fSBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0KVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QoKTtcbiAgICAgICAgICAgIGlmIChkLmJ1aWxkaW5nQ29uZmlnSWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuYnVpbGRpbmdDb25maWdJZHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QuYnVpbGRpbmdDb25maWdJZHM6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdDb25maWdJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuYnVpbGRpbmdDb25maWdJZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ0NvbmZpZ0lkc1tpXSA9IGQuYnVpbGRpbmdDb25maWdJZHNbaV0gfCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdH0gbSBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3RcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ2FuQnVpbGRCdWlsZGluZ0xpc3QudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5idWlsZGluZ0NvbmZpZ0lkcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdDb25maWdJZHMgJiYgbS5idWlsZGluZ0NvbmZpZ0lkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nQ29uZmlnSWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmJ1aWxkaW5nQ29uZmlnSWRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdDb25maWdJZHNbal0gPSBtLmJ1aWxkaW5nQ29uZmlnSWRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BDYW5CdWlsZEJ1aWxkaW5nTGlzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcENhbkJ1aWxkQnVpbGRpbmdMaXN0O1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcUJ1aWxkID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxQnVpbGQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcUJ1aWxkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjb25maWdJRF0gUmVxQnVpbGQgY29uZmlnSURcbiAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufG51bGx9IFtyb3RhdGVkXSBSZXFCdWlsZCByb3RhdGVkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7ZmFybS5JUG9zfG51bGx9IFtwb3NdIFJlcUJ1aWxkIHBvc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXFCdWlsZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxQnVpbGQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXFCdWlsZFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFCdWlsZD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxQnVpbGQocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUJ1aWxkIGNvbmZpZ0lELlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGNvbmZpZ0lEXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQnVpbGQucHJvdG90eXBlLmNvbmZpZ0lEID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxQnVpbGQgcm90YXRlZC5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gcm90YXRlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCdWlsZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJ1aWxkLnByb3RvdHlwZS5yb3RhdGVkID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUJ1aWxkIHBvcy5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5JUG9zfG51bGx8dW5kZWZpbmVkfSBwb3NcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnVpbGRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCdWlsZC5wcm90b3R5cGUucG9zID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcUJ1aWxkIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxQnVpbGQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnVpbGRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcUJ1aWxkfSBtIFJlcUJ1aWxkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJ1aWxkLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5jb25maWdJRCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiY29uZmlnSURcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5jb25maWdJRCk7XG4gICAgICAgICAgICBpZiAobS5yb3RhdGVkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyb3RhdGVkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5ib29sKG0ucm90YXRlZCk7XG4gICAgICAgICAgICBpZiAobS5wb3MgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInBvc1wiKSlcbiAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLlBvcy5lbmNvZGUobS5wb3MsIHcudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFCdWlsZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxQnVpbGR9IFJlcUJ1aWxkXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxQnVpbGQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVxQnVpbGQoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmNvbmZpZ0lEID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0ucm90YXRlZCA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0ucG9zID0gJHJvb3QuZmFybS5Qb3MuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFCdWlsZCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxQnVpbGR9IFJlcUJ1aWxkXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCdWlsZC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVxQnVpbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUJ1aWxkKCk7XG4gICAgICAgICAgICBpZiAoZC5jb25maWdJRCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5jb25maWdJRCA9IGQuY29uZmlnSUQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucm90YXRlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5yb3RhdGVkID0gQm9vbGVhbihkLnJvdGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucG9zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucG9zICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXFCdWlsZC5wb3M6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnBvcyA9ICRyb290LmZhcm0uUG9zLmZyb21PYmplY3QoZC5wb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcUJ1aWxkIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ1aWxkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcUJ1aWxkfSBtIFJlcUJ1aWxkXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQnVpbGQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5jb25maWdJRCA9IDA7XG4gICAgICAgICAgICAgICAgZC5yb3RhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZC5wb3MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY29uZmlnSUQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY29uZmlnSURcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvbmZpZ0lEID0gbS5jb25maWdJRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnJvdGF0ZWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwicm90YXRlZFwiKSkge1xuICAgICAgICAgICAgICAgIGQucm90YXRlZCA9IG0ucm90YXRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnBvcyAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJwb3NcIikpIHtcbiAgICAgICAgICAgICAgICBkLnBvcyA9ICRyb290LmZhcm0uUG9zLnRvT2JqZWN0KG0ucG9zLCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcUJ1aWxkIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnVpbGRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJ1aWxkLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxQnVpbGQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVxQnlJZCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcUJ5SWQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcUJ5SWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFJlcUJ5SWQgaWRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxQnlJZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxQnlJZC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcUJ5SWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQnlJZD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxQnlJZChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxQnlJZCBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ5SWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCeUlkLnByb3RvdHlwZS5pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxQnlJZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcUJ5SWQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnlJZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQnlJZH0gbSBSZXFCeUlkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJ5SWQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmlkKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxQnlJZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ5SWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFCeUlkfSBSZXFCeUlkXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxQnlJZC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFCeUlkKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxQnlJZCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJ5SWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFCeUlkfSBSZXFCeUlkXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCeUlkLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFCeUlkKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFCeUlkKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmlkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBwYXJzZUludChkLmlkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaWQubG93ID4+PiAwLCBkLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxQnlJZCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCeUlkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcUJ5SWR9IG0gUmVxQnlJZFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJ5SWQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFCeUlkIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQnlJZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQnlJZC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcUJ5SWQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZCBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge2Zhcm0uQnVpbGRpbmdTdGF0ZVR5cGV8bnVsbH0gW3N0YXRlXSBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQgc3RhdGVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZCBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZC5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkIHN0YXRlLlxuICAgICAgICAgKiBAbWVtYmVyIHtmYXJtLkJ1aWxkaW5nU3RhdGVUeXBlfSBzdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQucHJvdG90eXBlLnN0YXRlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLk1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSU1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZH0gbSBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5pZCk7XG4gICAgICAgICAgICBpZiAobS5zdGF0ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic3RhdGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0uc3RhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWR9IE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5NZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uc3RhdGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIE1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLk1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZH0gTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLk1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmlkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBwYXJzZUludChkLmlkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaWQubG93ID4+PiAwLCBkLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGQuc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJJbnZhbGlkXCI6XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQnVpbGRpbmdcIjpcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBtLnN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJVcGdyYWRpbmdcIjpcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtLnN0YXRlID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJQcmVDb21wbGV0ZVwiOlxuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIk5vcm1hbFwiOlxuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkFiYW5kb25lZFwiOlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSA1O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkxvY2tcIjpcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBtLnN0YXRlID0gNjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLk1lc3NhZ2VCdWlsZGluZ1N0YXRlQ2hhbmdlZH0gbSBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQuc3RhdGUgPSBvLmVudW1zID09PSBTdHJpbmcgPyBcIkludmFsaWRcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnN0YXRlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInN0YXRlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5zdGF0ZSA9IG8uZW51bXMgPT09IFN0cmluZyA/ICRyb290LmZhcm0uQnVpbGRpbmdTdGF0ZVR5cGVbbS5zdGF0ZV0gOiBtLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZUJ1aWxkaW5nU3RhdGVDaGFuZ2VkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBNZXNzYWdlQnVpbGRpbmdTdGF0ZUNoYW5nZWQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2NvaW5dIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZCBjb2luXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjcnlzdGFsXSBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQgY3J5c3RhbFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbaGVhcnRdIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZCBoZWFydFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSU1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQ9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkIGNvaW4uXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gY29pblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQucHJvdG90eXBlLmNvaW4gPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQgY3J5c3RhbC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBjcnlzdGFsXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZC5wcm90b3R5cGUuY3J5c3RhbCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZCBoZWFydC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBoZWFydFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQucHJvdG90eXBlLmhlYXJ0ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLk1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSU1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZH0gbSBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5jb2luICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjb2luXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0uY29pbik7XG4gICAgICAgICAgICBpZiAobS5jcnlzdGFsICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjcnlzdGFsXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmNyeXN0YWwpO1xuICAgICAgICAgICAgaWYgKG0uaGVhcnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImhlYXJ0XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI0KS5pbnQzMihtLmhlYXJ0KTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkfSBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5jb2luID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uY3J5c3RhbCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLmhlYXJ0ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWR9IE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZFxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLk1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZCgpO1xuICAgICAgICAgICAgaWYgKGQuY29pbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5jb2luID0gZC5jb2luIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNyeXN0YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY3J5c3RhbCA9IGQuY3J5c3RhbCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5oZWFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5oZWFydCA9IGQuaGVhcnQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkfSBtIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VDdXJyZW5jeVN0YXRlQ2hhbmdlZC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmNvaW4gPSAwO1xuICAgICAgICAgICAgICAgIGQuY3J5c3RhbCA9IDA7XG4gICAgICAgICAgICAgICAgZC5oZWFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jb2luICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNvaW5cIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvaW4gPSBtLmNvaW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jcnlzdGFsICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNyeXN0YWxcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNyeXN0YWwgPSBtLmNyeXN0YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5oZWFydCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJoZWFydFwiKSkge1xuICAgICAgICAgICAgICAgIGQuaGVhcnQgPSBtLmhlYXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZUN1cnJlbmN5U3RhdGVDaGFuZ2VkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBNZXNzYWdlQ3VycmVuY3lTdGF0ZUNoYW5nZWQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVxRWRpdEJ1aWxkaW5nID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxRWRpdEJ1aWxkaW5nLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFFZGl0QnVpbGRpbmdcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFJlcUVkaXRCdWlsZGluZyBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW3JvdGF0ZWRdIFJlcUVkaXRCdWlsZGluZyByb3RhdGVkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7ZmFybS5JUG9zfG51bGx9IFtwb3NdIFJlcUVkaXRCdWlsZGluZyBwb3NcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxRWRpdEJ1aWxkaW5nLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXFFZGl0QnVpbGRpbmcuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXFFZGl0QnVpbGRpbmdcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxRWRpdEJ1aWxkaW5nPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXFFZGl0QnVpbGRpbmcocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUVkaXRCdWlsZGluZyBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUVkaXRCdWlsZGluZ1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUVkaXRCdWlsZGluZy5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxRWRpdEJ1aWxkaW5nIHJvdGF0ZWQuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IHJvdGF0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxRWRpdEJ1aWxkaW5nXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxRWRpdEJ1aWxkaW5nLnByb3RvdHlwZS5yb3RhdGVkID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUVkaXRCdWlsZGluZyBwb3MuXG4gICAgICAgICAqIEBtZW1iZXIge2Zhcm0uSVBvc3xudWxsfHVuZGVmaW5lZH0gcG9zXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUVkaXRCdWlsZGluZ1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUVkaXRCdWlsZGluZy5wcm90b3R5cGUucG9zID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcUVkaXRCdWlsZGluZyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcUVkaXRCdWlsZGluZy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFFZGl0QnVpbGRpbmdcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcUVkaXRCdWlsZGluZ30gbSBSZXFFZGl0QnVpbGRpbmcgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxRWRpdEJ1aWxkaW5nLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5pZCk7XG4gICAgICAgICAgICBpZiAobS5yb3RhdGVkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyb3RhdGVkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5ib29sKG0ucm90YXRlZCk7XG4gICAgICAgICAgICBpZiAobS5wb3MgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInBvc1wiKSlcbiAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLlBvcy5lbmNvZGUobS5wb3MsIHcudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFFZGl0QnVpbGRpbmcgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFFZGl0QnVpbGRpbmdcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFFZGl0QnVpbGRpbmd9IFJlcUVkaXRCdWlsZGluZ1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcUVkaXRCdWlsZGluZy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFFZGl0QnVpbGRpbmcoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0ucm90YXRlZCA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0ucG9zID0gJHJvb3QuZmFybS5Qb3MuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFFZGl0QnVpbGRpbmcgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFFZGl0QnVpbGRpbmdcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFFZGl0QnVpbGRpbmd9IFJlcUVkaXRCdWlsZGluZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxRWRpdEJ1aWxkaW5nLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFFZGl0QnVpbGRpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUVkaXRCdWlsZGluZygpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucm90YXRlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5yb3RhdGVkID0gQm9vbGVhbihkLnJvdGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucG9zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucG9zICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXFFZGl0QnVpbGRpbmcucG9zOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5wb3MgPSAkcm9vdC5mYXJtLlBvcy5mcm9tT2JqZWN0KGQucG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFFZGl0QnVpbGRpbmcgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxRWRpdEJ1aWxkaW5nXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcUVkaXRCdWlsZGluZ30gbSBSZXFFZGl0QnVpbGRpbmdcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFFZGl0QnVpbGRpbmcudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQucm90YXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGQucG9zID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucm90YXRlZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyb3RhdGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5yb3RhdGVkID0gbS5yb3RhdGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucG9zICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInBvc1wiKSkge1xuICAgICAgICAgICAgICAgIGQucG9zID0gJHJvb3QuZmFybS5Qb3MudG9PYmplY3QobS5wb3MsIG8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxRWRpdEJ1aWxkaW5nIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxRWRpdEJ1aWxkaW5nXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFFZGl0QnVpbGRpbmcucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFFZGl0QnVpbGRpbmc7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcFJlY292ZXJ5ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcFJlY292ZXJ5LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwUmVjb3ZlcnlcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFJlc3BSZWNvdmVyeSBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdGtDcnlzdGFsTGVmdF0gUmVzcFJlY292ZXJ5IHRrQ3J5c3RhbExlZnRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcFJlY292ZXJ5LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwUmVjb3ZlcnkuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwUmVjb3ZlcnlcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFJlY292ZXJ5PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwUmVjb3ZlcnkocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BSZWNvdmVyeSBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BSZWNvdmVyeVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BSZWNvdmVyeS5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcFJlY292ZXJ5IHRrQ3J5c3RhbExlZnQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gdGtDcnlzdGFsTGVmdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUmVjb3ZlcnlcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUmVjb3ZlcnkucHJvdG90eXBlLnRrQ3J5c3RhbExlZnQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVzcFJlY292ZXJ5IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcFJlY292ZXJ5LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BSZWNvdmVyeVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFJlY292ZXJ5fSBtIFJlc3BSZWNvdmVyeSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUmVjb3ZlcnkuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmlkKTtcbiAgICAgICAgICAgIGlmIChtLnRrQ3J5c3RhbExlZnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInRrQ3J5c3RhbExlZnRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0udGtDcnlzdGFsTGVmdCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BSZWNvdmVyeSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BSZWNvdmVyeVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BSZWNvdmVyeX0gUmVzcFJlY292ZXJ5XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFJlY292ZXJ5LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BSZWNvdmVyeSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS50a0NyeXN0YWxMZWZ0ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwUmVjb3ZlcnkgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUmVjb3ZlcnlcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwUmVjb3Zlcnl9IFJlc3BSZWNvdmVyeVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFJlY292ZXJ5LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwUmVjb3ZlcnkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BSZWNvdmVyeSgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudGtDcnlzdGFsTGVmdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS50a0NyeXN0YWxMZWZ0ID0gZC50a0NyeXN0YWxMZWZ0IHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwUmVjb3ZlcnkgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFJlY292ZXJ5XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BSZWNvdmVyeX0gbSBSZXNwUmVjb3ZlcnlcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUmVjb3ZlcnkudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQudGtDcnlzdGFsTGVmdCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRrQ3J5c3RhbExlZnQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidGtDcnlzdGFsTGVmdFwiKSkge1xuICAgICAgICAgICAgICAgIGQudGtDcnlzdGFsTGVmdCA9IG0udGtDcnlzdGFsTGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BSZWNvdmVyeSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BSZWNvdmVyeVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFJlY292ZXJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFJlY292ZXJ5O1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BDb21wbGV0ZUltbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BDb21wbGV0ZUltbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcENvbXBsZXRlSW1tXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2lkXSBSZXNwQ29tcGxldGVJbW0gaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3RrQ3J5c3RhbExlZnRdIFJlc3BDb21wbGV0ZUltbSB0a0NyeXN0YWxMZWZ0XG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BDb21wbGV0ZUltbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcENvbXBsZXRlSW1tLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcENvbXBsZXRlSW1tXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BDb21wbGV0ZUltbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcENvbXBsZXRlSW1tKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwQ29tcGxldGVJbW0gaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQ29tcGxldGVJbW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ29tcGxldGVJbW0ucHJvdG90eXBlLmlkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BDb21wbGV0ZUltbSB0a0NyeXN0YWxMZWZ0LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHRrQ3J5c3RhbExlZnRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcENvbXBsZXRlSW1tXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcENvbXBsZXRlSW1tLnByb3RvdHlwZS50a0NyeXN0YWxMZWZ0ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BDb21wbGV0ZUltbSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BDb21wbGV0ZUltbS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQ29tcGxldGVJbW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BDb21wbGV0ZUltbX0gbSBSZXNwQ29tcGxldGVJbW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcENvbXBsZXRlSW1tLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5pZCk7XG4gICAgICAgICAgICBpZiAobS50a0NyeXN0YWxMZWZ0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ0a0NyeXN0YWxMZWZ0XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLnRrQ3J5c3RhbExlZnQpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwQ29tcGxldGVJbW0gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQ29tcGxldGVJbW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwQ29tcGxldGVJbW19IFJlc3BDb21wbGV0ZUltbVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BDb21wbGV0ZUltbS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwQ29tcGxldGVJbW0oKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0udGtDcnlzdGFsTGVmdCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcENvbXBsZXRlSW1tIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcENvbXBsZXRlSW1tXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcENvbXBsZXRlSW1tfSBSZXNwQ29tcGxldGVJbW1cbiAgICAgICAgICovXG4gICAgICAgIFJlc3BDb21wbGV0ZUltbS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcENvbXBsZXRlSW1tKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwQ29tcGxldGVJbW0oKTtcbiAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRrQ3J5c3RhbExlZnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0udGtDcnlzdGFsTGVmdCA9IGQudGtDcnlzdGFsTGVmdCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcENvbXBsZXRlSW1tIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BDb21wbGV0ZUltbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXNwQ29tcGxldGVJbW19IG0gUmVzcENvbXBsZXRlSW1tXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcENvbXBsZXRlSW1tLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLnRrQ3J5c3RhbExlZnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50a0NyeXN0YWxMZWZ0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRrQ3J5c3RhbExlZnRcIikpIHtcbiAgICAgICAgICAgICAgICBkLnRrQ3J5c3RhbExlZnQgPSBtLnRrQ3J5c3RhbExlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwQ29tcGxldGVJbW0gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQ29tcGxldGVJbW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BDb21wbGV0ZUltbS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BDb21wbGV0ZUltbTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFOb0JvZHlQYXJhbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcU5vQm9keVBhcmFtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFOb0JvZHlQYXJhbVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXFOb0JvZHlQYXJhbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxTm9Cb2R5UGFyYW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXFOb0JvZHlQYXJhbVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFOb0JvZHlQYXJhbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxTm9Cb2R5UGFyYW0ocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFOb0JvZHlQYXJhbSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcU5vQm9keVBhcmFtLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU5vQm9keVBhcmFtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFOb0JvZHlQYXJhbX0gbSBSZXFOb0JvZHlQYXJhbSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFOb0JvZHlQYXJhbS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFOb0JvZHlQYXJhbSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU5vQm9keVBhcmFtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxTm9Cb2R5UGFyYW19IFJlcU5vQm9keVBhcmFtXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxTm9Cb2R5UGFyYW0uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVxTm9Cb2R5UGFyYW0oKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxTm9Cb2R5UGFyYW0gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFOb0JvZHlQYXJhbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcU5vQm9keVBhcmFtfSBSZXFOb0JvZHlQYXJhbVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxTm9Cb2R5UGFyYW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcU5vQm9keVBhcmFtKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAkcm9vdC5mYXJtLlJlcU5vQm9keVBhcmFtKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcU5vQm9keVBhcmFtIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU5vQm9keVBhcmFtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcU5vQm9keVBhcmFtfSBtIFJlcU5vQm9keVBhcmFtXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxTm9Cb2R5UGFyYW0udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdCgpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFOb0JvZHlQYXJhbSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcU5vQm9keVBhcmFtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFOb0JvZHlQYXJhbS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcU5vQm9keVBhcmFtO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BOb0JvZHlQYXJhbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BOb0JvZHlQYXJhbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcE5vQm9keVBhcmFtXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BOb0JvZHlQYXJhbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcE5vQm9keVBhcmFtLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcE5vQm9keVBhcmFtXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BOb0JvZHlQYXJhbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcE5vQm9keVBhcmFtKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVzcE5vQm9keVBhcmFtIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcE5vQm9keVBhcmFtLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BOb0JvZHlQYXJhbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcE5vQm9keVBhcmFtfSBtIFJlc3BOb0JvZHlQYXJhbSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTm9Cb2R5UGFyYW0uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcE5vQm9keVBhcmFtIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE5vQm9keVBhcmFtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcE5vQm9keVBhcmFtfSBSZXNwTm9Cb2R5UGFyYW1cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTm9Cb2R5UGFyYW0uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcE5vQm9keVBhcmFtKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BOb0JvZHlQYXJhbSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BOb0JvZHlQYXJhbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BOb0JvZHlQYXJhbX0gUmVzcE5vQm9keVBhcmFtXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTm9Cb2R5UGFyYW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BOb0JvZHlQYXJhbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgJHJvb3QuZmFybS5SZXNwTm9Cb2R5UGFyYW0oKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcE5vQm9keVBhcmFtIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BOb0JvZHlQYXJhbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXNwTm9Cb2R5UGFyYW19IG0gUmVzcE5vQm9keVBhcmFtXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE5vQm9keVBhcmFtLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcE5vQm9keVBhcmFtIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE5vQm9keVBhcmFtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTm9Cb2R5UGFyYW0ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwTm9Cb2R5UGFyYW07XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcE1hbm9ySGVhcnRJbmZvLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFJlc3BNYW5vckhlYXJ0SW5mbyBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbbmlrZV9uYW1lXSBSZXNwTWFub3JIZWFydEluZm8gbmlrZV9uYW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt1c2VyX2NvZGVdIFJlc3BNYW5vckhlYXJ0SW5mbyB1c2VyX2NvZGVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdGtfZ29sZF0gUmVzcE1hbm9ySGVhcnRJbmZvIHRrX2dvbGRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdGtfbG92ZV0gUmVzcE1hbm9ySGVhcnRJbmZvIHRrX2xvdmVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdGtfY3J5c3RhbF0gUmVzcE1hbm9ySGVhcnRJbmZvIHRrX2NyeXN0YWxcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2F2YXRhcl9pZF0gUmVzcE1hbm9ySGVhcnRJbmZvIGF2YXRhcl9pZFxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbT58bnVsbH0gW2J1aWxkaW5nc10gUmVzcE1hbm9ySGVhcnRJbmZvIGJ1aWxkaW5nc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwTWFub3JIZWFydEluZm8uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BNYW5vckhlYXJ0SW5mby5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwTWFub3JIZWFydEluZm89fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BNYW5vckhlYXJ0SW5mbyhwKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkaW5ncyA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BNYW5vckhlYXJ0SW5mbyBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYW5vckhlYXJ0SW5mby5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1hbm9ySGVhcnRJbmZvIG5pa2VfbmFtZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBuaWtlX25hbWVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hbm9ySGVhcnRJbmZvLnByb3RvdHlwZS5uaWtlX25hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwTWFub3JIZWFydEluZm8gdXNlcl9jb2RlLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVzZXJfY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWFub3JIZWFydEluZm8ucHJvdG90eXBlLnVzZXJfY29kZSA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BNYW5vckhlYXJ0SW5mbyB0a19nb2xkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gdGtfZ29sZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWFub3JIZWFydEluZm8ucHJvdG90eXBlLnRrX2dvbGQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1hbm9ySGVhcnRJbmZvIHRrX2xvdmUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB0a19sb3ZlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYW5vckhlYXJ0SW5mby5wcm90b3R5cGUudGtfbG92ZSA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwTWFub3JIZWFydEluZm8gdGtfY3J5c3RhbC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHRrX2NyeXN0YWxcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hbm9ySGVhcnRJbmZvLnByb3RvdHlwZS50a19jcnlzdGFsID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BNYW5vckhlYXJ0SW5mbyBhdmF0YXJfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gYXZhdGFyX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYW5vckhlYXJ0SW5mby5wcm90b3R5cGUuYXZhdGFyX2lkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1hbm9ySGVhcnRJbmZvIGJ1aWxkaW5ncy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGZhcm0uSU1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtPn0gYnVpbGRpbmdzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYW5vckhlYXJ0SW5mby5wcm90b3R5cGUuYnVpbGRpbmdzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BNYW5vckhlYXJ0SW5mbyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BNYW5vckhlYXJ0SW5mby52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BNYW5vckhlYXJ0SW5mb30gbSBSZXNwTWFub3JIZWFydEluZm8gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1hbm9ySGVhcnRJbmZvLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5pZCk7XG4gICAgICAgICAgICBpZiAobS5uaWtlX25hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm5pa2VfbmFtZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxOCkuc3RyaW5nKG0ubmlrZV9uYW1lKTtcbiAgICAgICAgICAgIGlmIChtLnVzZXJfY29kZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidXNlcl9jb2RlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI2KS5zdHJpbmcobS51c2VyX2NvZGUpO1xuICAgICAgICAgICAgaWYgKG0udGtfZ29sZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGtfZ29sZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50NjQobS50a19nb2xkKTtcbiAgICAgICAgICAgIGlmIChtLnRrX2xvdmUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInRrX2xvdmVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDApLmludDY0KG0udGtfbG92ZSk7XG4gICAgICAgICAgICBpZiAobS50a19jcnlzdGFsICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ0a19jcnlzdGFsXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQ4KS5pbnQ2NChtLnRrX2NyeXN0YWwpO1xuICAgICAgICAgICAgaWYgKG0uYXZhdGFyX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJhdmF0YXJfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTYpLmludDMyKG0uYXZhdGFyX2lkKTtcbiAgICAgICAgICAgIGlmIChtLmJ1aWxkaW5ncyAhPSBudWxsICYmIG0uYnVpbGRpbmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5idWlsZGluZ3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICRyb290LmZhcm0uTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0uZW5jb2RlKG0uYnVpbGRpbmdzW2ldLCB3LnVpbnQzMig4MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcE1hbm9ySGVhcnRJbmZvIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcE1hbm9ySGVhcnRJbmZvfSBSZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWFub3JIZWFydEluZm8uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLm5pa2VfbmFtZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS51c2VyX2NvZGUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0udGtfZ29sZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtLnRrX2xvdmUgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbS50a19jcnlzdGFsID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG0uYXZhdGFyX2lkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmJ1aWxkaW5ncyAmJiBtLmJ1aWxkaW5ncy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ3MucHVzaCgkcm9vdC5mYXJtLk1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BNYW5vckhlYXJ0SW5mbyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BNYW5vckhlYXJ0SW5mb30gUmVzcE1hbm9ySGVhcnRJbmZvXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWFub3JIZWFydEluZm8uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BNYW5vckhlYXJ0SW5mbylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmlkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBwYXJzZUludChkLmlkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaWQubG93ID4+PiAwLCBkLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5uaWtlX25hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubmlrZV9uYW1lID0gU3RyaW5nKGQubmlrZV9uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnVzZXJfY29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS51c2VyX2NvZGUgPSBTdHJpbmcoZC51c2VyX2NvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudGtfZ29sZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLnRrX2dvbGQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnRrX2dvbGQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRrX2dvbGQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udGtfZ29sZCA9IHBhcnNlSW50KGQudGtfZ29sZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRrX2dvbGQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udGtfZ29sZCA9IGQudGtfZ29sZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19nb2xkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2dvbGQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC50a19nb2xkLmxvdyA+Pj4gMCwgZC50a19nb2xkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50a19sb3ZlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0udGtfbG92ZSA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQudGtfbG92ZSkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGtfbG92ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS50a19sb3ZlID0gcGFyc2VJbnQoZC50a19sb3ZlLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGtfbG92ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS50a19sb3ZlID0gZC50a19sb3ZlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRrX2xvdmUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0udGtfbG92ZSA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnRrX2xvdmUubG93ID4+PiAwLCBkLnRrX2xvdmUuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRrX2NyeXN0YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS50a19jcnlzdGFsID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC50a19jcnlzdGFsKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19jcnlzdGFsID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2NyeXN0YWwgPSBwYXJzZUludChkLnRrX2NyeXN0YWwsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19jcnlzdGFsID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2NyeXN0YWwgPSBkLnRrX2NyeXN0YWw7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGtfY3J5c3RhbCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS50a19jcnlzdGFsID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudGtfY3J5c3RhbC5sb3cgPj4+IDAsIGQudGtfY3J5c3RhbC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuYXZhdGFyX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmF2YXRhcl9pZCA9IGQuYXZhdGFyX2lkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmJ1aWxkaW5ncykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmJ1aWxkaW5ncykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BNYW5vckhlYXJ0SW5mby5idWlsZGluZ3M6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmJ1aWxkaW5ncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuYnVpbGRpbmdzW2ldICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcE1hbm9ySGVhcnRJbmZvLmJ1aWxkaW5nczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nc1tpXSA9ICRyb290LmZhcm0uTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0uZnJvbU9iamVjdChkLmJ1aWxkaW5nc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BNYW5vckhlYXJ0SW5mbyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcE1hbm9ySGVhcnRJbmZvfSBtIFJlc3BNYW5vckhlYXJ0SW5mb1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYW5vckhlYXJ0SW5mby50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkaW5ncyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5uaWtlX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGQudXNlcl9jb2RlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC50a19nb2xkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC50a19nb2xkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnRrX2xvdmUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2xvdmUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQudGtfY3J5c3RhbCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudGtfY3J5c3RhbCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmF2YXRhcl9pZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm5pa2VfbmFtZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJuaWtlX25hbWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLm5pa2VfbmFtZSA9IG0ubmlrZV9uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udXNlcl9jb2RlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInVzZXJfY29kZVwiKSkge1xuICAgICAgICAgICAgICAgIGQudXNlcl9jb2RlID0gbS51c2VyX2NvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50a19nb2xkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRrX2dvbGRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udGtfZ29sZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC50a19nb2xkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udGtfZ29sZCkgOiBtLnRrX2dvbGQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2dvbGQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udGtfZ29sZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS50a19nb2xkLmxvdyA+Pj4gMCwgbS50a19nb2xkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnRrX2dvbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50a19sb3ZlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRrX2xvdmVcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udGtfbG92ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC50a19sb3ZlID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udGtfbG92ZSkgOiBtLnRrX2xvdmU7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2xvdmUgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udGtfbG92ZSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS50a19sb3ZlLmxvdyA+Pj4gMCwgbS50a19sb3ZlLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnRrX2xvdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50a19jcnlzdGFsICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRrX2NyeXN0YWxcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0udGtfY3J5c3RhbCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC50a19jcnlzdGFsID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0udGtfY3J5c3RhbCkgOiBtLnRrX2NyeXN0YWw7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2NyeXN0YWwgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0udGtfY3J5c3RhbCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS50a19jcnlzdGFsLmxvdyA+Pj4gMCwgbS50a19jcnlzdGFsLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLnRrX2NyeXN0YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5hdmF0YXJfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiYXZhdGFyX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5hdmF0YXJfaWQgPSBtLmF2YXRhcl9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJ1aWxkaW5ncyAmJiBtLmJ1aWxkaW5ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkaW5ncyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5idWlsZGluZ3MubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5idWlsZGluZ3Nbal0gPSAkcm9vdC5mYXJtLk1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtLnRvT2JqZWN0KG0uYnVpbGRpbmdzW2pdLCBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwTWFub3JIZWFydEluZm8gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFub3JIZWFydEluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYW5vckhlYXJ0SW5mby5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BNYW5vckhlYXJ0SW5mbztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIE1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0gaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2NvbmZpZ0lEXSBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbSBjb25maWdJRFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0ocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtIGlkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbS5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0gY29uZmlnSUQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gY29uZmlnSURcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbS5wcm90b3R5cGUuY29uZmlnSUQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW19IG0gTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmlkKTtcbiAgICAgICAgICAgIGlmIChtLmNvbmZpZ0lEICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjb25maWdJRFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50MzIobS5jb25maWdJRCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbX0gTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW1cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5jb25maWdJRCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLk1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtfSBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKi9cbiAgICAgICAgTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLk1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbSgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY29uZmlnSUQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY29uZmlnSUQgPSBkLmNvbmZpZ0lEIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5NYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbX0gbSBNYW5vckhlYXJ0QnVpbGRpbmdMaXN0SXRlbVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmNvbmZpZ0lEID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY29uZmlnSUQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY29uZmlnSURcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvbmZpZ0lEID0gbS5jb25maWdJRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1hbm9ySGVhcnRCdWlsZGluZ0xpc3RJdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTWFub3JIZWFydEJ1aWxkaW5nTGlzdEl0ZW07XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcFVzZXJBdmF0YXJzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcFVzZXJBdmF0YXJzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwVXNlckF2YXRhcnNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPnxudWxsfSBbYXZhdGFySWRzXSBSZXNwVXNlckF2YXRhcnMgYXZhdGFySWRzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BVc2VyQXZhdGFycy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcFVzZXJBdmF0YXJzLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcFVzZXJBdmF0YXJzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BVc2VyQXZhdGFycz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcFVzZXJBdmF0YXJzKHApIHtcbiAgICAgICAgICAgIHRoaXMuYXZhdGFySWRzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcFVzZXJBdmF0YXJzIGF2YXRhcklkcy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IGF2YXRhcklkc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXNlckF2YXRhcnNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVXNlckF2YXRhcnMucHJvdG90eXBlLmF2YXRhcklkcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwVXNlckF2YXRhcnMgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwVXNlckF2YXRhcnMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVzZXJBdmF0YXJzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwVXNlckF2YXRhcnN9IG0gUmVzcFVzZXJBdmF0YXJzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVc2VyQXZhdGFycy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uYXZhdGFySWRzICE9IG51bGwgJiYgbS5hdmF0YXJJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uYXZhdGFySWRzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICB3LmludDMyKG0uYXZhdGFySWRzW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwVXNlckF2YXRhcnMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXNlckF2YXRhcnNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwVXNlckF2YXRhcnN9IFJlc3BVc2VyQXZhdGFyc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVc2VyQXZhdGFycy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwVXNlckF2YXRhcnMoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmF2YXRhcklkcyAmJiBtLmF2YXRhcklkcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5hdmF0YXJJZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYXZhdGFySWRzLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmF2YXRhcklkcy5wdXNoKHIuaW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BVc2VyQXZhdGFycyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVc2VyQXZhdGFyc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BVc2VyQXZhdGFyc30gUmVzcFVzZXJBdmF0YXJzXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVXNlckF2YXRhcnMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BVc2VyQXZhdGFycylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcFVzZXJBdmF0YXJzKCk7XG4gICAgICAgICAgICBpZiAoZC5hdmF0YXJJZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5hdmF0YXJJZHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwVXNlckF2YXRhcnMuYXZhdGFySWRzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmF2YXRhcklkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5hdmF0YXJJZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5hdmF0YXJJZHNbaV0gPSBkLmF2YXRhcklkc1tpXSB8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BVc2VyQXZhdGFycyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXNlckF2YXRhcnNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFVzZXJBdmF0YXJzfSBtIFJlc3BVc2VyQXZhdGFyc1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVc2VyQXZhdGFycy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmF2YXRhcklkcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYXZhdGFySWRzICYmIG0uYXZhdGFySWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuYXZhdGFySWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmF2YXRhcklkcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLmF2YXRhcklkc1tqXSA9IG0uYXZhdGFySWRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BVc2VyQXZhdGFycyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVc2VyQXZhdGFyc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVzZXJBdmF0YXJzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFVzZXJBdmF0YXJzO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVVwZGF0ZUF2YXRhciA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcVVwZGF0ZUF2YXRhci5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtpZF0gUmVxVXBkYXRlQXZhdGFyIGlkXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcVVwZGF0ZUF2YXRhci5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxVXBkYXRlQXZhdGFyLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcVVwZGF0ZUF2YXRhcj19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxVXBkYXRlQXZhdGFyKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFVcGRhdGVBdmF0YXIgaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlQXZhdGFyLnByb3RvdHlwZS5pZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFVcGRhdGVBdmF0YXIgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXFVcGRhdGVBdmF0YXIudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFVcGRhdGVBdmF0YXJ9IG0gUmVxVXBkYXRlQXZhdGFyIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZUF2YXRhci5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0uaWQpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFVcGRhdGVBdmF0YXIgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVBdmF0YXJcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVcGRhdGVBdmF0YXJ9IFJlcVVwZGF0ZUF2YXRhclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZUF2YXRhci5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFVcGRhdGVBdmF0YXIoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFVcGRhdGVBdmF0YXIgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVBdmF0YXJcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVcGRhdGVBdmF0YXJ9IFJlcVVwZGF0ZUF2YXRhclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlQXZhdGFyLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFVcGRhdGVBdmF0YXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVVwZGF0ZUF2YXRhcigpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFVcGRhdGVBdmF0YXIgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcVVwZGF0ZUF2YXRhcn0gbSBSZXFVcGRhdGVBdmF0YXJcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVBdmF0YXIudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5pZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGQuaWQgPSBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxVXBkYXRlQXZhdGFyIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVBdmF0YXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFVcGRhdGVBdmF0YXI7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcFVwZGF0ZUF2YXRhciA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BVcGRhdGVBdmF0YXIuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BVcGRhdGVBdmF0YXJcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2lkXSBSZXNwVXBkYXRlQXZhdGFyIGlkXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BVcGRhdGVBdmF0YXIuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BVcGRhdGVBdmF0YXIuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BVcGRhdGVBdmF0YXI9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BVcGRhdGVBdmF0YXIocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BVcGRhdGVBdmF0YXIgaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZUF2YXRhclxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVBdmF0YXIucHJvdG90eXBlLmlkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BVcGRhdGVBdmF0YXIgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwVXBkYXRlQXZhdGFyLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVcGRhdGVBdmF0YXJcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BVcGRhdGVBdmF0YXJ9IG0gUmVzcFVwZGF0ZUF2YXRhciBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVXBkYXRlQXZhdGFyLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5pZCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BVcGRhdGVBdmF0YXIgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFVwZGF0ZUF2YXRhcn0gUmVzcFVwZGF0ZUF2YXRhclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVBdmF0YXIuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcFVwZGF0ZUF2YXRhcigpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BVcGRhdGVBdmF0YXIgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFVwZGF0ZUF2YXRhcn0gUmVzcFVwZGF0ZUF2YXRhclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZUF2YXRhci5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcFVwZGF0ZUF2YXRhcilcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcFVwZGF0ZUF2YXRhcigpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXNwVXBkYXRlQXZhdGFyIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVcGRhdGVBdmF0YXJcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFVwZGF0ZUF2YXRhcn0gbSBSZXNwVXBkYXRlQXZhdGFyXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZUF2YXRhci50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmlkID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5pZCA9IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwVXBkYXRlQXZhdGFyIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZUF2YXRhclxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZUF2YXRhci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BVcGRhdGVBdmF0YXI7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVxVXBkYXRlTmlja05hbWUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFVcGRhdGVOaWNrTmFtZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxVXBkYXRlTmlja05hbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW25pY2tfbmFtZV0gUmVxVXBkYXRlTmlja05hbWUgbmlja19uYW1lXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcVVwZGF0ZU5pY2tOYW1lLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXFVcGRhdGVOaWNrTmFtZS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcVVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcVVwZGF0ZU5pY2tOYW1lPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXFVcGRhdGVOaWNrTmFtZShwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxVXBkYXRlTmlja05hbWUgbmlja19uYW1lLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IG5pY2tfbmFtZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVOaWNrTmFtZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZU5pY2tOYW1lLnByb3RvdHlwZS5uaWNrX25hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxVXBkYXRlTmlja05hbWUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXFVcGRhdGVOaWNrTmFtZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVcGRhdGVOaWNrTmFtZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVXBkYXRlTmlja05hbWV9IG0gUmVxVXBkYXRlTmlja05hbWUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTmlja05hbWUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLm5pY2tfbmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibmlja19uYW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5zdHJpbmcobS5uaWNrX25hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFVcGRhdGVOaWNrTmFtZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxVXBkYXRlTmlja05hbWV9IFJlcVVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTmlja05hbWUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVxVXBkYXRlTmlja05hbWUoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLm5pY2tfbmFtZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcVVwZGF0ZU5pY2tOYW1lIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlTmlja05hbWVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVcGRhdGVOaWNrTmFtZX0gUmVxVXBkYXRlTmlja05hbWVcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZU5pY2tOYW1lLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFVcGRhdGVOaWNrTmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVxVXBkYXRlTmlja05hbWUoKTtcbiAgICAgICAgICAgIGlmIChkLm5pY2tfbmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5uaWNrX25hbWUgPSBTdHJpbmcoZC5uaWNrX25hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcVVwZGF0ZU5pY2tOYW1lIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcVVwZGF0ZU5pY2tOYW1lfSBtIFJlcVVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlTmlja05hbWUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5uaWNrX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubmlja19uYW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm5pY2tfbmFtZVwiKSkge1xuICAgICAgICAgICAgICAgIGQubmlja19uYW1lID0gbS5uaWNrX25hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFVcGRhdGVOaWNrTmFtZSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVOaWNrTmFtZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcVVwZGF0ZU5pY2tOYW1lO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BVcGRhdGVOaWNrTmFtZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BVcGRhdGVOaWNrTmFtZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcFVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtuaWNrX25hbWVdIFJlc3BVcGRhdGVOaWNrTmFtZSBuaWNrX25hbWVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcFVwZGF0ZU5pY2tOYW1lLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwVXBkYXRlTmlja05hbWUuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwVXBkYXRlTmlja05hbWVcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFVwZGF0ZU5pY2tOYW1lPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwVXBkYXRlTmlja05hbWUocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BVcGRhdGVOaWNrTmFtZSBuaWNrX25hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbmlja19uYW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVcGRhdGVOaWNrTmFtZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BVcGRhdGVOaWNrTmFtZS5wcm90b3R5cGUubmlja19uYW1lID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BVcGRhdGVOaWNrTmFtZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BVcGRhdGVOaWNrTmFtZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXBkYXRlTmlja05hbWVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BVcGRhdGVOaWNrTmFtZX0gbSBSZXNwVXBkYXRlTmlja05hbWUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZU5pY2tOYW1lLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5uaWNrX25hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm5pY2tfbmFtZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuc3RyaW5nKG0ubmlja19uYW1lKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcFVwZGF0ZU5pY2tOYW1lIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFVwZGF0ZU5pY2tOYW1lfSBSZXNwVXBkYXRlTmlja05hbWVcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVXBkYXRlTmlja05hbWUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcFVwZGF0ZU5pY2tOYW1lKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5uaWNrX25hbWUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwVXBkYXRlTmlja05hbWUgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwVXBkYXRlTmlja05hbWVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwVXBkYXRlTmlja05hbWV9IFJlc3BVcGRhdGVOaWNrTmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZU5pY2tOYW1lLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwVXBkYXRlTmlja05hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BVcGRhdGVOaWNrTmFtZSgpO1xuICAgICAgICAgICAgaWYgKGQubmlja19uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLm5pY2tfbmFtZSA9IFN0cmluZyhkLm5pY2tfbmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcFVwZGF0ZU5pY2tOYW1lIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BVcGRhdGVOaWNrTmFtZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXNwVXBkYXRlTmlja05hbWV9IG0gUmVzcFVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFVwZGF0ZU5pY2tOYW1lLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQubmlja19uYW1lID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm5pY2tfbmFtZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJuaWNrX25hbWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLm5pY2tfbmFtZSA9IG0ubmlja19uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcFVwZGF0ZU5pY2tOYW1lIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFVwZGF0ZU5pY2tOYW1lXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwVXBkYXRlTmlja05hbWUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwVXBkYXRlTmlja05hbWU7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcEJhcm5JbmZvID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcEJhcm5JbmZvLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwQmFybkluZm9cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFJlc3BCYXJuSW5mbyBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdG90YWxfY2FwYWNpdHldIFJlc3BCYXJuSW5mbyB0b3RhbF9jYXBhY2l0eVxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklCYXJuQ3JvcEl0ZW0+fG51bGx9IFtjcm9wX2l0ZW1zXSBSZXNwQmFybkluZm8gY3JvcF9pdGVtc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwQmFybkluZm8uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BCYXJuSW5mby5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BCYXJuSW5mb1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwQmFybkluZm89fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BCYXJuSW5mbyhwKSB7XG4gICAgICAgICAgICB0aGlzLmNyb3BfaXRlbXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwQmFybkluZm8gaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFybkluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQmFybkluZm8ucHJvdG90eXBlLmlkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BCYXJuSW5mbyB0b3RhbF9jYXBhY2l0eS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB0b3RhbF9jYXBhY2l0eVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFybkluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQmFybkluZm8ucHJvdG90eXBlLnRvdGFsX2NhcGFjaXR5ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEJhcm5JbmZvIGNyb3BfaXRlbXMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklCYXJuQ3JvcEl0ZW0+fSBjcm9wX2l0ZW1zXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCYXJuSW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuSW5mby5wcm90b3R5cGUuY3JvcF9pdGVtcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwQmFybkluZm8gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwQmFybkluZm8udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJhcm5JbmZvXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwQmFybkluZm99IG0gUmVzcEJhcm5JbmZvIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuSW5mby5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0udG90YWxfY2FwYWNpdHkgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInRvdGFsX2NhcGFjaXR5XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLnRvdGFsX2NhcGFjaXR5KTtcbiAgICAgICAgICAgIGlmIChtLmNyb3BfaXRlbXMgIT0gbnVsbCAmJiBtLmNyb3BfaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmNyb3BfaXRlbXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICRyb290LmZhcm0uQmFybkNyb3BJdGVtLmVuY29kZShtLmNyb3BfaXRlbXNbaV0sIHcudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwQmFybkluZm8gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFybkluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwQmFybkluZm99IFJlc3BCYXJuSW5mb1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuSW5mby5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwQmFybkluZm8oKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0udG90YWxfY2FwYWNpdHkgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5jcm9wX2l0ZW1zICYmIG0uY3JvcF9pdGVtcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5jcm9wX2l0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0uY3JvcF9pdGVtcy5wdXNoKCRyb290LmZhcm0uQmFybkNyb3BJdGVtLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BCYXJuSW5mbyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCYXJuSW5mb1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BCYXJuSW5mb30gUmVzcEJhcm5JbmZvXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQmFybkluZm8uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BCYXJuSW5mbylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcEJhcm5JbmZvKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmlkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBwYXJzZUludChkLmlkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaWQubG93ID4+PiAwLCBkLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50b3RhbF9jYXBhY2l0eSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS50b3RhbF9jYXBhY2l0eSA9IGQudG90YWxfY2FwYWNpdHkgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuY3JvcF9pdGVtcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmNyb3BfaXRlbXMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwQmFybkluZm8uY3JvcF9pdGVtczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5jcm9wX2l0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmNyb3BfaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLmNyb3BfaXRlbXNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwQmFybkluZm8uY3JvcF9pdGVtczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLmNyb3BfaXRlbXNbaV0gPSAkcm9vdC5mYXJtLkJhcm5Dcm9wSXRlbS5mcm9tT2JqZWN0KGQuY3JvcF9pdGVtc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BCYXJuSW5mbyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFybkluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcEJhcm5JbmZvfSBtIFJlc3BCYXJuSW5mb1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuSW5mby50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmNyb3BfaXRlbXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQudG90YWxfY2FwYWNpdHkgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50b3RhbF9jYXBhY2l0eSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0b3RhbF9jYXBhY2l0eVwiKSkge1xuICAgICAgICAgICAgICAgIGQudG90YWxfY2FwYWNpdHkgPSBtLnRvdGFsX2NhcGFjaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY3JvcF9pdGVtcyAmJiBtLmNyb3BfaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5jcm9wX2l0ZW1zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmNyb3BfaXRlbXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5jcm9wX2l0ZW1zW2pdID0gJHJvb3QuZmFybS5CYXJuQ3JvcEl0ZW0udG9PYmplY3QobS5jcm9wX2l0ZW1zW2pdLCBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwQmFybkluZm8gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFybkluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuSW5mby5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BCYXJuSW5mbztcbiAgICB9KSgpO1xuXG4gICAgZmFybS5CYXJuQ3JvcEl0ZW0gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBCYXJuQ3JvcEl0ZW0uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUJhcm5Dcm9wSXRlbVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gQmFybkNyb3BJdGVtIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjb25maWdJRF0gQmFybkNyb3BJdGVtIGNvbmZpZ0lEXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFt0b3RhbF9udW1dIEJhcm5Dcm9wSXRlbSB0b3RhbF9udW1cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQmFybkNyb3BJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBCYXJuQ3JvcEl0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElCYXJuQ3JvcEl0ZW1cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JQmFybkNyb3BJdGVtPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBCYXJuQ3JvcEl0ZW0ocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJhcm5Dcm9wSXRlbSBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJhcm5Dcm9wSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJhcm5Dcm9wSXRlbS5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQmFybkNyb3BJdGVtIGNvbmZpZ0lELlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGNvbmZpZ0lEXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJhcm5Dcm9wSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJhcm5Dcm9wSXRlbS5wcm90b3R5cGUuY29uZmlnSUQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYXJuQ3JvcEl0ZW0gdG90YWxfbnVtLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHRvdGFsX251bVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CYXJuQ3JvcEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCYXJuQ3JvcEl0ZW0ucHJvdG90eXBlLnRvdGFsX251bSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBCYXJuQ3JvcEl0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5CYXJuQ3JvcEl0ZW0udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQmFybkNyb3BJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklCYXJuQ3JvcEl0ZW19IG0gQmFybkNyb3BJdGVtIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEJhcm5Dcm9wSXRlbS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0uY29uZmlnSUQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNvbmZpZ0lEXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmNvbmZpZ0lEKTtcbiAgICAgICAgICAgIGlmIChtLnRvdGFsX251bSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidG90YWxfbnVtXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI0KS5pbnQzMihtLnRvdGFsX251bSk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIEJhcm5Dcm9wSXRlbSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJhcm5Dcm9wSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkJhcm5Dcm9wSXRlbX0gQmFybkNyb3BJdGVtXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgQmFybkNyb3BJdGVtLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLkJhcm5Dcm9wSXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5jb25maWdJRCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLnRvdGFsX251bSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgQmFybkNyb3BJdGVtIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQmFybkNyb3BJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uQmFybkNyb3BJdGVtfSBCYXJuQ3JvcEl0ZW1cbiAgICAgICAgICovXG4gICAgICAgIEJhcm5Dcm9wSXRlbS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uQmFybkNyb3BJdGVtKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5CYXJuQ3JvcEl0ZW0oKTtcbiAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNvbmZpZ0lEICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmNvbmZpZ0lEID0gZC5jb25maWdJRCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50b3RhbF9udW0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0udG90YWxfbnVtID0gZC50b3RhbF9udW0gfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIEJhcm5Dcm9wSXRlbSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CYXJuQ3JvcEl0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uQmFybkNyb3BJdGVtfSBtIEJhcm5Dcm9wSXRlbVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEJhcm5Dcm9wSXRlbS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5jb25maWdJRCA9IDA7XG4gICAgICAgICAgICAgICAgZC50b3RhbF9udW0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jb25maWdJRCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjb25maWdJRFwiKSkge1xuICAgICAgICAgICAgICAgIGQuY29uZmlnSUQgPSBtLmNvbmZpZ0lEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udG90YWxfbnVtICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRvdGFsX251bVwiKSkge1xuICAgICAgICAgICAgICAgIGQudG90YWxfbnVtID0gbS50b3RhbF9udW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBCYXJuQ3JvcEl0ZW0gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CYXJuQ3JvcEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEJhcm5Dcm9wSXRlbS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEJhcm5Dcm9wSXRlbTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFCYXJuU2VsbCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcUJhcm5TZWxsLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFCYXJuU2VsbFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gUmVxQmFyblNlbGwgaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW251bV0gUmVxQmFyblNlbGwgbnVtXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcUJhcm5TZWxsLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXFCYXJuU2VsbC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcUJhcm5TZWxsXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcUJhcm5TZWxsPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXFCYXJuU2VsbChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxQmFyblNlbGwgaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCYXJuU2VsbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJhcm5TZWxsLnByb3RvdHlwZS5pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFCYXJuU2VsbCBudW0uXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gbnVtXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJhcm5TZWxsXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQmFyblNlbGwucHJvdG90eXBlLm51bSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFCYXJuU2VsbCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcUJhcm5TZWxsLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUJhcm5TZWxsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFCYXJuU2VsbH0gbSBSZXFCYXJuU2VsbCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFCYXJuU2VsbC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0ubnVtICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJudW1cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0ubnVtKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxQmFyblNlbGwgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCYXJuU2VsbFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcUJhcm5TZWxsfSBSZXFCYXJuU2VsbFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJhcm5TZWxsLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUJhcm5TZWxsKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLm51bSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxQmFyblNlbGwgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCYXJuU2VsbFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcUJhcm5TZWxsfSBSZXFCYXJuU2VsbFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQmFyblNlbGwuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcUJhcm5TZWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFCYXJuU2VsbCgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLm51bSA9IGQubnVtIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFCYXJuU2VsbCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCYXJuU2VsbFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFCYXJuU2VsbH0gbSBSZXFCYXJuU2VsbFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcUJhcm5TZWxsLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLm51bSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm51bSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJudW1cIikpIHtcbiAgICAgICAgICAgICAgICBkLm51bSA9IG0ubnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxQmFyblNlbGwgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFCYXJuU2VsbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQmFyblNlbGwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFCYXJuU2VsbDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwQmFyblNlbGwgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXNwQmFyblNlbGwuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BCYXJuU2VsbFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtpZF0gUmVzcEJhcm5TZWxsIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtudW1dIFJlc3BCYXJuU2VsbCBudW1cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbdGtfZ29sZF0gUmVzcEJhcm5TZWxsIHRrX2dvbGRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcEJhcm5TZWxsLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwQmFyblNlbGwuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwQmFyblNlbGxcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcEJhcm5TZWxsPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwQmFyblNlbGwocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BCYXJuU2VsbCBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCYXJuU2VsbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuU2VsbC5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEJhcm5TZWxsIG51bS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBudW1cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJhcm5TZWxsXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJhcm5TZWxsLnByb3RvdHlwZS5udW0gPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwQmFyblNlbGwgdGtfZ29sZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHRrX2dvbGRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJhcm5TZWxsXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJhcm5TZWxsLnByb3RvdHlwZS50a19nb2xkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwQmFyblNlbGwgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwQmFyblNlbGwudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJhcm5TZWxsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwQmFyblNlbGx9IG0gUmVzcEJhcm5TZWxsIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuU2VsbC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0ubnVtICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJudW1cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0ubnVtKTtcbiAgICAgICAgICAgIGlmIChtLnRrX2dvbGQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInRrX2dvbGRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDY0KG0udGtfZ29sZCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BCYXJuU2VsbCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BCYXJuU2VsbFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BCYXJuU2VsbH0gUmVzcEJhcm5TZWxsXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJhcm5TZWxsLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BCYXJuU2VsbCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5udW0gPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS50a19nb2xkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwQmFyblNlbGwgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFyblNlbGxcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwQmFyblNlbGx9IFJlc3BCYXJuU2VsbFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEJhcm5TZWxsLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwQmFyblNlbGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BCYXJuU2VsbCgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubnVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLm51bSA9IGQubnVtIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRrX2dvbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS50a19nb2xkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC50a19nb2xkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19nb2xkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2dvbGQgPSBwYXJzZUludChkLnRrX2dvbGQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19nb2xkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2dvbGQgPSBkLnRrX2dvbGQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGtfZ29sZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS50a19nb2xkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudGtfZ29sZC5sb3cgPj4+IDAsIGQudGtfZ29sZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BCYXJuU2VsbCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQmFyblNlbGxcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcEJhcm5TZWxsfSBtIFJlc3BCYXJuU2VsbFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BCYXJuU2VsbC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC5udW0gPSAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnRrX2dvbGQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2dvbGQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm51bSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJudW1cIikpIHtcbiAgICAgICAgICAgICAgICBkLm51bSA9IG0ubnVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udGtfZ29sZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0a19nb2xkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnRrX2dvbGQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQudGtfZ29sZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLnRrX2dvbGQpIDogbS50a19nb2xkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC50a19nb2xkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnRrX2dvbGQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0udGtfZ29sZC5sb3cgPj4+IDAsIG0udGtfZ29sZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS50a19nb2xkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcEJhcm5TZWxsIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEJhcm5TZWxsXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQmFyblNlbGwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwQmFyblNlbGw7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUHJvcENmZ0l0ZW0gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBQcm9wQ2ZnSXRlbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUHJvcENmZ0l0ZW1cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2lkXSBQcm9wQ2ZnSXRlbSBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbbmFtZV0gUHJvcENmZ0l0ZW0gbmFtZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbZGlzcGxheV0gUHJvcENmZ0l0ZW0gZGlzcGxheVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdHlwZV0gUHJvcENmZ0l0ZW0gdHlwZVxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbZGVzY10gUHJvcENmZ0l0ZW0gZGVzY1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbd29ybGRdIFByb3BDZmdJdGVtIHdvcmxkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtpY29uX3BhdGhdIFByb3BDZmdJdGVtIGljb25fcGF0aFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbc2FsZV9wcmljZV0gUHJvcENmZ0l0ZW0gc2FsZV9wcmljZVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBQcm9wQ2ZnSXRlbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUHJvcENmZ0l0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElQcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklQcm9wQ2ZnSXRlbT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUHJvcENmZ0l0ZW0ocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BDZmdJdGVtIGlkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlByb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUHJvcENmZ0l0ZW0ucHJvdG90eXBlLmlkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcENmZ0l0ZW0gbmFtZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBuYW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlByb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUHJvcENmZ0l0ZW0ucHJvdG90eXBlLm5hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wQ2ZnSXRlbSBkaXNwbGF5LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGRpc3BsYXlcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUHJvcENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBQcm9wQ2ZnSXRlbS5wcm90b3R5cGUuZGlzcGxheSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BDZmdJdGVtIHR5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFByb3BDZmdJdGVtLnByb3RvdHlwZS50eXBlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcENmZ0l0ZW0gZGVzYy5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBkZXNjXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlByb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUHJvcENmZ0l0ZW0ucHJvdG90eXBlLmRlc2MgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wQ2ZnSXRlbSB3b3JsZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB3b3JsZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFByb3BDZmdJdGVtLnByb3RvdHlwZS53b3JsZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BDZmdJdGVtIGljb25fcGF0aC5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBpY29uX3BhdGhcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUHJvcENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBQcm9wQ2ZnSXRlbS5wcm90b3R5cGUuaWNvbl9wYXRoID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcENmZ0l0ZW0gc2FsZV9wcmljZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBzYWxlX3ByaWNlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlByb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUHJvcENmZ0l0ZW0ucHJvdG90eXBlLnNhbGVfcHJpY2UgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUHJvcENmZ0l0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5Qcm9wQ2ZnSXRlbS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUHJvcENmZ0l0ZW19IG0gUHJvcENmZ0l0ZW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUHJvcENmZ0l0ZW0uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmlkKTtcbiAgICAgICAgICAgIGlmIChtLm5hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm5hbWVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLnN0cmluZyhtLm5hbWUpO1xuICAgICAgICAgICAgaWYgKG0uZGlzcGxheSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZGlzcGxheVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50MzIobS5kaXNwbGF5KTtcbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInR5cGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzIpLmludDMyKG0udHlwZSk7XG4gICAgICAgICAgICBpZiAobS5kZXNjICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJkZXNjXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQyKS5zdHJpbmcobS5kZXNjKTtcbiAgICAgICAgICAgIGlmIChtLndvcmxkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ3b3JsZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig0OCkuaW50MzIobS53b3JsZCk7XG4gICAgICAgICAgICBpZiAobS5pY29uX3BhdGggIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImljb25fcGF0aFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1OCkuc3RyaW5nKG0uaWNvbl9wYXRoKTtcbiAgICAgICAgICAgIGlmIChtLnNhbGVfcHJpY2UgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInNhbGVfcHJpY2VcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNjQpLmludDMyKG0uc2FsZV9wcmljZSk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFByb3BDZmdJdGVtIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUHJvcENmZ0l0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Qcm9wQ2ZnSXRlbX0gUHJvcENmZ0l0ZW1cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBQcm9wQ2ZnSXRlbS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5Qcm9wQ2ZnSXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5uYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLmRpc3BsYXkgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS50eXBlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG0uZGVzYyA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgbS53b3JsZCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBtLmljb25fcGF0aCA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgbS5zYWxlX3ByaWNlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBQcm9wQ2ZnSXRlbSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlByb3BDZmdJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUHJvcENmZ0l0ZW19IFByb3BDZmdJdGVtXG4gICAgICAgICAqL1xuICAgICAgICBQcm9wQ2ZnSXRlbS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUHJvcENmZ0l0ZW0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlByb3BDZmdJdGVtKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5uYW1lID0gU3RyaW5nKGQubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5kaXNwbGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmRpc3BsYXkgPSBkLmRpc3BsYXkgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS50eXBlID0gZC50eXBlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmRlc2MgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uZGVzYyA9IFN0cmluZyhkLmRlc2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQud29ybGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ud29ybGQgPSBkLndvcmxkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmljb25fcGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5pY29uX3BhdGggPSBTdHJpbmcoZC5pY29uX3BhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuc2FsZV9wcmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5zYWxlX3ByaWNlID0gZC5zYWxlX3ByaWNlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBQcm9wQ2ZnSXRlbSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5Qcm9wQ2ZnSXRlbX0gbSBQcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFByb3BDZmdJdGVtLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuaWQgPSAwO1xuICAgICAgICAgICAgICAgIGQubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC5kaXNwbGF5ID0gMDtcbiAgICAgICAgICAgICAgICBkLnR5cGUgPSAwO1xuICAgICAgICAgICAgICAgIGQuZGVzYyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC53b3JsZCA9IDA7XG4gICAgICAgICAgICAgICAgZC5pY29uX3BhdGggPSBcIlwiO1xuICAgICAgICAgICAgICAgIGQuc2FsZV9wcmljZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGQuaWQgPSBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubmFtZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5uYW1lID0gbS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGlzcGxheSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5kaXNwbGF5ID0gbS5kaXNwbGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gbS50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGVzYyAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkZXNjXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5kZXNjID0gbS5kZXNjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ud29ybGQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwid29ybGRcIikpIHtcbiAgICAgICAgICAgICAgICBkLndvcmxkID0gbS53b3JsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmljb25fcGF0aCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpY29uX3BhdGhcIikpIHtcbiAgICAgICAgICAgICAgICBkLmljb25fcGF0aCA9IG0uaWNvbl9wYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc2FsZV9wcmljZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzYWxlX3ByaWNlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5zYWxlX3ByaWNlID0gbS5zYWxlX3ByaWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUHJvcENmZ0l0ZW0gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Qcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUHJvcENmZ0l0ZW0ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBQcm9wQ2ZnSXRlbTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5Db25kaXRpb25JdGVtID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgQ29uZGl0aW9uSXRlbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJQ29uZGl0aW9uSXRlbVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdHlwZV0gQ29uZGl0aW9uSXRlbSB0eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj58bnVsbH0gW3ZhbHVlXSBDb25kaXRpb25JdGVtIHZhbHVlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENvbmRpdGlvbkl0ZW0uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIENvbmRpdGlvbkl0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElDb25kaXRpb25JdGVtXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUNvbmRpdGlvbkl0ZW09fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIENvbmRpdGlvbkl0ZW0ocCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmRpdGlvbkl0ZW0gdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB0eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkNvbmRpdGlvbkl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBDb25kaXRpb25JdGVtLnByb3RvdHlwZS50eXBlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uZGl0aW9uSXRlbSB2YWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IHZhbHVlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkNvbmRpdGlvbkl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBDb25kaXRpb25JdGVtLnByb3RvdHlwZS52YWx1ZSA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBDb25kaXRpb25JdGVtIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uQ29uZGl0aW9uSXRlbS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Db25kaXRpb25JdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklDb25kaXRpb25JdGVtfSBtIENvbmRpdGlvbkl0ZW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgQ29uZGl0aW9uSXRlbS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLnR5cGUpO1xuICAgICAgICAgICAgaWYgKG0udmFsdWUgIT0gbnVsbCAmJiBtLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5mb3JrKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLnZhbHVlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICB3LmludDMyKG0udmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIENvbmRpdGlvbkl0ZW0gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Db25kaXRpb25JdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uQ29uZGl0aW9uSXRlbX0gQ29uZGl0aW9uSXRlbVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIENvbmRpdGlvbkl0ZW0uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uQ29uZGl0aW9uSXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0udHlwZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnZhbHVlICYmIG0udmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udmFsdWUucHVzaChyLmludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udmFsdWUucHVzaChyLmludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBDb25kaXRpb25JdGVtIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ29uZGl0aW9uSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkNvbmRpdGlvbkl0ZW19IENvbmRpdGlvbkl0ZW1cbiAgICAgICAgICovXG4gICAgICAgIENvbmRpdGlvbkl0ZW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0oKTtcbiAgICAgICAgICAgIGlmIChkLnR5cGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0udHlwZSA9IGQudHlwZSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uQ29uZGl0aW9uSXRlbS52YWx1ZTogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC52YWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLnZhbHVlW2ldID0gZC52YWx1ZVtpXSB8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIENvbmRpdGlvbkl0ZW0gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ29uZGl0aW9uSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5Db25kaXRpb25JdGVtfSBtIENvbmRpdGlvbkl0ZW1cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBDb25kaXRpb25JdGVtLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQudmFsdWUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidHlwZVwiKSkge1xuICAgICAgICAgICAgICAgIGQudHlwZSA9IG0udHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnZhbHVlICYmIG0udmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS52YWx1ZS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLnZhbHVlW2pdID0gbS52YWx1ZVtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBDb25kaXRpb25JdGVtIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ29uZGl0aW9uSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQ29uZGl0aW9uSXRlbS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIENvbmRpdGlvbkl0ZW07XG4gICAgfSkoKTtcblxuICAgIGZhcm0uVXBncmFkZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhbiBVcGdyYWRlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElVcGdyYWRlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtsZXZlbF0gVXBncmFkZSBsZXZlbFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbYnVpbGRfZHVyXSBVcGdyYWRlIGJ1aWxkX2R1clxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklDb25kaXRpb25JdGVtPnxudWxsfSBbYnVpbGRfY29zdHNdIFVwZ3JhZGUgYnVpbGRfY29zdHNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48ZmFybS5JQ29uZGl0aW9uSXRlbT58bnVsbH0gW2J1aWxkX2NvbmRpdGlvbl0gVXBncmFkZSBidWlsZF9jb25kaXRpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPnxudWxsfSBbdXBncmFkZV9wYXJhbV0gVXBncmFkZSB1cGdyYWRlX3BhcmFtXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtidWlsZF9kZXNjXSBVcGdyYWRlIGJ1aWxkX2Rlc2NcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3ByZWZhYl0gVXBncmFkZSBwcmVmYWJcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVXBncmFkZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGFuIFVwZ3JhZGUuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElVcGdyYWRlXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVVwZ3JhZGU9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFVwZ3JhZGUocCkge1xuICAgICAgICAgICAgdGhpcy5idWlsZF9jb3N0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5idWlsZF9jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgIHRoaXMudXBncmFkZV9wYXJhbSA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZ3JhZGUgbGV2ZWwuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gbGV2ZWxcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uVXBncmFkZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFVwZ3JhZGUucHJvdG90eXBlLmxldmVsID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBncmFkZSBidWlsZF9kdXIuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gYnVpbGRfZHVyXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVwZ3JhZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBVcGdyYWRlLnByb3RvdHlwZS5idWlsZF9kdXIgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGdyYWRlIGJ1aWxkX2Nvc3RzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JQ29uZGl0aW9uSXRlbT59IGJ1aWxkX2Nvc3RzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVwZ3JhZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBVcGdyYWRlLnByb3RvdHlwZS5idWlsZF9jb3N0cyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZ3JhZGUgYnVpbGRfY29uZGl0aW9uLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JQ29uZGl0aW9uSXRlbT59IGJ1aWxkX2NvbmRpdGlvblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5VcGdyYWRlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgVXBncmFkZS5wcm90b3R5cGUuYnVpbGRfY29uZGl0aW9uID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBncmFkZSB1cGdyYWRlX3BhcmFtLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48bnVtYmVyPn0gdXBncmFkZV9wYXJhbVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5VcGdyYWRlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgVXBncmFkZS5wcm90b3R5cGUudXBncmFkZV9wYXJhbSA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVwZ3JhZGUgYnVpbGRfZGVzYy5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBidWlsZF9kZXNjXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVwZ3JhZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBVcGdyYWRlLnByb3RvdHlwZS5idWlsZF9kZXNjID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVXBncmFkZSBwcmVmYWIuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gcHJlZmFiXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVwZ3JhZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBVcGdyYWRlLnByb3RvdHlwZS5wcmVmYWIgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVXBncmFkZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlVwZ3JhZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uVXBncmFkZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JVXBncmFkZX0gbSBVcGdyYWRlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFVwZ3JhZGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmxldmVsICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJsZXZlbFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmxldmVsKTtcbiAgICAgICAgICAgIGlmIChtLmJ1aWxkX2R1ciAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiYnVpbGRfZHVyXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmJ1aWxkX2R1cik7XG4gICAgICAgICAgICBpZiAobS5idWlsZF9jb3N0cyAhPSBudWxsICYmIG0uYnVpbGRfY29zdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmJ1aWxkX2Nvc3RzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0uZW5jb2RlKG0uYnVpbGRfY29zdHNbaV0sIHcudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRfY29uZGl0aW9uICE9IG51bGwgJiYgbS5idWlsZF9jb25kaXRpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmJ1aWxkX2NvbmRpdGlvbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5Db25kaXRpb25JdGVtLmVuY29kZShtLmJ1aWxkX2NvbmRpdGlvbltpXSwgdy51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51cGdyYWRlX3BhcmFtICE9IG51bGwgJiYgbS51cGdyYWRlX3BhcmFtLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHcudWludDMyKDQyKS5mb3JrKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLnVwZ3JhZGVfcGFyYW0ubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50MzIobS51cGdyYWRlX3BhcmFtW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRfZGVzYyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiYnVpbGRfZGVzY1wiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1MCkuc3RyaW5nKG0uYnVpbGRfZGVzYyk7XG4gICAgICAgICAgICBpZiAobS5wcmVmYWIgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInByZWZhYlwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1OCkuc3RyaW5nKG0ucHJlZmFiKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGFuIFVwZ3JhZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5VcGdyYWRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uVXBncmFkZX0gVXBncmFkZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFVwZ3JhZGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uVXBncmFkZSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0ubGV2ZWwgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZF9kdXIgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5idWlsZF9jb3N0cyAmJiBtLmJ1aWxkX2Nvc3RzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkX2Nvc3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRfY29zdHMucHVzaCgkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0uZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmJ1aWxkX2NvbmRpdGlvbiAmJiBtLmJ1aWxkX2NvbmRpdGlvbi5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5idWlsZF9jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZF9jb25kaXRpb24ucHVzaCgkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0uZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnVwZ3JhZGVfcGFyYW0gJiYgbS51cGdyYWRlX3BhcmFtLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnVwZ3JhZGVfcGFyYW0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udXBncmFkZV9wYXJhbS5wdXNoKHIuaW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS51cGdyYWRlX3BhcmFtLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkX2Rlc2MgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG0ucHJlZmFiID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGFuIFVwZ3JhZGUgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5VcGdyYWRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uVXBncmFkZX0gVXBncmFkZVxuICAgICAgICAgKi9cbiAgICAgICAgVXBncmFkZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uVXBncmFkZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uVXBncmFkZSgpO1xuICAgICAgICAgICAgaWYgKGQubGV2ZWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubGV2ZWwgPSBkLmxldmVsIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmJ1aWxkX2R1ciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5idWlsZF9kdXIgPSBkLmJ1aWxkX2R1ciB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5idWlsZF9jb3N0cykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmJ1aWxkX2Nvc3RzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uVXBncmFkZS5idWlsZF9jb3N0czogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5idWlsZF9jb3N0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5idWlsZF9jb3N0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuYnVpbGRfY29zdHNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5VcGdyYWRlLmJ1aWxkX2Nvc3RzOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRfY29zdHNbaV0gPSAkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0uZnJvbU9iamVjdChkLmJ1aWxkX2Nvc3RzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5idWlsZF9jb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5idWlsZF9jb25kaXRpb24pKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5VcGdyYWRlLmJ1aWxkX2NvbmRpdGlvbjogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5idWlsZF9jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuYnVpbGRfY29uZGl0aW9uLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5idWlsZF9jb25kaXRpb25baV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5VcGdyYWRlLmJ1aWxkX2NvbmRpdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkX2NvbmRpdGlvbltpXSA9ICRyb290LmZhcm0uQ29uZGl0aW9uSXRlbS5mcm9tT2JqZWN0KGQuYnVpbGRfY29uZGl0aW9uW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC51cGdyYWRlX3BhcmFtKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQudXBncmFkZV9wYXJhbSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlVwZ3JhZGUudXBncmFkZV9wYXJhbTogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS51cGdyYWRlX3BhcmFtID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLnVwZ3JhZGVfcGFyYW0ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS51cGdyYWRlX3BhcmFtW2ldID0gZC51cGdyYWRlX3BhcmFtW2ldIHwgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5idWlsZF9kZXNjICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmJ1aWxkX2Rlc2MgPSBTdHJpbmcoZC5idWlsZF9kZXNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnByZWZhYiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5wcmVmYWIgPSBTdHJpbmcoZC5wcmVmYWIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBVcGdyYWRlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVwZ3JhZGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uVXBncmFkZX0gbSBVcGdyYWRlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgVXBncmFkZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkX2Nvc3RzID0gW107XG4gICAgICAgICAgICAgICAgZC5idWlsZF9jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICBkLnVwZ3JhZGVfcGFyYW0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5sZXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgZC5idWlsZF9kdXIgPSAwO1xuICAgICAgICAgICAgICAgIGQuYnVpbGRfZGVzYyA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC5wcmVmYWIgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubGV2ZWwgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibGV2ZWxcIikpIHtcbiAgICAgICAgICAgICAgICBkLmxldmVsID0gbS5sZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJ1aWxkX2R1ciAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJidWlsZF9kdXJcIikpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkX2R1ciA9IG0uYnVpbGRfZHVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRfY29zdHMgJiYgbS5idWlsZF9jb3N0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmJ1aWxkX2Nvc3RzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmJ1aWxkX2Nvc3RzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuYnVpbGRfY29zdHNbal0gPSAkcm9vdC5mYXJtLkNvbmRpdGlvbkl0ZW0udG9PYmplY3QobS5idWlsZF9jb3N0c1tqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRfY29uZGl0aW9uICYmIG0uYnVpbGRfY29uZGl0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuYnVpbGRfY29uZGl0aW9uID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmJ1aWxkX2NvbmRpdGlvbi5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkX2NvbmRpdGlvbltqXSA9ICRyb290LmZhcm0uQ29uZGl0aW9uSXRlbS50b09iamVjdChtLmJ1aWxkX2NvbmRpdGlvbltqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udXBncmFkZV9wYXJhbSAmJiBtLnVwZ3JhZGVfcGFyYW0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC51cGdyYWRlX3BhcmFtID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnVwZ3JhZGVfcGFyYW0ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC51cGdyYWRlX3BhcmFtW2pdID0gbS51cGdyYWRlX3BhcmFtW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJ1aWxkX2Rlc2MgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiYnVpbGRfZGVzY1wiKSkge1xuICAgICAgICAgICAgICAgIGQuYnVpbGRfZGVzYyA9IG0uYnVpbGRfZGVzYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnByZWZhYiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJwcmVmYWJcIikpIHtcbiAgICAgICAgICAgICAgICBkLnByZWZhYiA9IG0ucHJlZmFiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgVXBncmFkZSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVwZ3JhZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFVwZ3JhZGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBVcGdyYWRlO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLkJ1aWxkQ2ZnSXRlbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIEJ1aWxkQ2ZnSXRlbS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJQnVpbGRDZmdJdGVtXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtpZF0gQnVpbGRDZmdJdGVtIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtuYW1lXSBCdWlsZENmZ0l0ZW0gbmFtZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdHlwZV0gQnVpbGRDZmdJdGVtIHR5cGVcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPnxudWxsfSBbZmxvb3Jfc3BhY2VdIEJ1aWxkQ2ZnSXRlbSBmbG9vcl9zcGFjZVxuICAgICAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW3JvdGF0ZWFibGVdIEJ1aWxkQ2ZnSXRlbSByb3RhdGVhYmxlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbbW92ZWFibGVdIEJ1aWxkQ2ZnSXRlbSBtb3ZlYWJsZVxuICAgICAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW3JlY292ZXJhYmxlXSBCdWlsZENmZ0l0ZW0gcmVjb3ZlcmFibGVcbiAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufG51bGx9IFtvbmx5X29uZV0gQnVpbGRDZmdJdGVtIG9ubHlfb25lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGZhcm0uSVVwZ3JhZGU+fG51bGx9IFt1cGdyYWRlc10gQnVpbGRDZmdJdGVtIHVwZ3JhZGVzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGZhcm0uSVBvcz58bnVsbH0gW3Bvc2l0aW9uXSBCdWlsZENmZ0l0ZW0gcG9zaXRpb25cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQnVpbGRDZmdJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBCdWlsZENmZ0l0ZW0uXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElCdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JQnVpbGRDZmdJdGVtPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBCdWlsZENmZ0l0ZW0ocCkge1xuICAgICAgICAgICAgdGhpcy5mbG9vcl9zcGFjZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy51cGdyYWRlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkQ2ZnSXRlbSBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0ucHJvdG90eXBlLmlkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRDZmdJdGVtIG5hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbmFtZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0ucHJvdG90eXBlLm5hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZENmZ0l0ZW0gdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB0eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkQ2ZnSXRlbS5wcm90b3R5cGUudHlwZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkQ2ZnSXRlbSBmbG9vcl9zcGFjZS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IGZsb29yX3NwYWNlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkQ2ZnSXRlbS5wcm90b3R5cGUuZmxvb3Jfc3BhY2UgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZENmZ0l0ZW0gcm90YXRlYWJsZS5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gcm90YXRlYWJsZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0ucHJvdG90eXBlLnJvdGF0ZWFibGUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRDZmdJdGVtIG1vdmVhYmxlLlxuICAgICAgICAgKiBAbWVtYmVyIHtib29sZWFufSBtb3ZlYWJsZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0ucHJvdG90eXBlLm1vdmVhYmxlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ1aWxkQ2ZnSXRlbSByZWNvdmVyYWJsZS5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gcmVjb3ZlcmFibGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQnVpbGRDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRDZmdJdGVtLnByb3RvdHlwZS5yZWNvdmVyYWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZENmZ0l0ZW0gb25seV9vbmUuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IG9ubHlfb25lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkQ2ZnSXRlbS5wcm90b3R5cGUub25seV9vbmUgPSBmYWxzZTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGRDZmdJdGVtIHVwZ3JhZGVzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JVXBncmFkZT59IHVwZ3JhZGVzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkQ2ZnSXRlbS5wcm90b3R5cGUudXBncmFkZXMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZENmZ0l0ZW0gcG9zaXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklQb3M+fSBwb3NpdGlvblxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0ucHJvdG90eXBlLnBvc2l0aW9uID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEJ1aWxkQ2ZnSXRlbSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLkJ1aWxkQ2ZnSXRlbS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUJ1aWxkQ2ZnSXRlbX0gbSBCdWlsZENmZ0l0ZW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRDZmdJdGVtLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5pZCk7XG4gICAgICAgICAgICBpZiAobS5uYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJuYW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS5uYW1lKTtcbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInR5cGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDMyKG0udHlwZSk7XG4gICAgICAgICAgICBpZiAobS5mbG9vcl9zcGFjZSAhPSBudWxsICYmIG0uZmxvb3Jfc3BhY2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzQpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uZmxvb3Jfc3BhY2UubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuaW50MzIobS5mbG9vcl9zcGFjZVtpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnJvdGF0ZWFibGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInJvdGF0ZWFibGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDApLmJvb2wobS5yb3RhdGVhYmxlKTtcbiAgICAgICAgICAgIGlmIChtLm1vdmVhYmxlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtb3ZlYWJsZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig0OCkuYm9vbChtLm1vdmVhYmxlKTtcbiAgICAgICAgICAgIGlmIChtLnJlY292ZXJhYmxlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJyZWNvdmVyYWJsZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig1NikuYm9vbChtLnJlY292ZXJhYmxlKTtcbiAgICAgICAgICAgIGlmIChtLm9ubHlfb25lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJvbmx5X29uZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig2NCkuYm9vbChtLm9ubHlfb25lKTtcbiAgICAgICAgICAgIGlmIChtLnVwZ3JhZGVzICE9IG51bGwgJiYgbS51cGdyYWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0udXBncmFkZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICRyb290LmZhcm0uVXBncmFkZS5lbmNvZGUobS51cGdyYWRlc1tpXSwgdy51aW50MzIoNzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5wb3NpdGlvbiAhPSBudWxsICYmIG0ucG9zaXRpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLnBvc2l0aW9uLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLlBvcy5lbmNvZGUobS5wb3NpdGlvbltpXSwgdy51aW50MzIoODIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIEJ1aWxkQ2ZnSXRlbSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkJ1aWxkQ2ZnSXRlbX0gQnVpbGRDZmdJdGVtXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgQnVpbGRDZmdJdGVtLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLkJ1aWxkQ2ZnSXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5uYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLnR5cGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5mbG9vcl9zcGFjZSAmJiBtLmZsb29yX3NwYWNlLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmZsb29yX3NwYWNlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSByLnVpbnQzMigpICsgci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmZsb29yX3NwYWNlLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmZsb29yX3NwYWNlLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtLnJvdGF0ZWFibGUgPSByLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtLm1vdmVhYmxlID0gci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgbS5yZWNvdmVyYWJsZSA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG0ub25seV9vbmUgPSByLmJvb2woKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnVwZ3JhZGVzICYmIG0udXBncmFkZXMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0udXBncmFkZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS51cGdyYWRlcy5wdXNoKCRyb290LmZhcm0uVXBncmFkZS5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnBvc2l0aW9uICYmIG0ucG9zaXRpb24ubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucG9zaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5wb3NpdGlvbi5wdXNoKCRyb290LmZhcm0uUG9zLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIEJ1aWxkQ2ZnSXRlbSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkJ1aWxkQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkJ1aWxkQ2ZnSXRlbX0gQnVpbGRDZmdJdGVtXG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkJ1aWxkQ2ZnSXRlbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uQnVpbGRDZmdJdGVtKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5uYW1lID0gU3RyaW5nKGQubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC50eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnR5cGUgPSBkLnR5cGUgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZmxvb3Jfc3BhY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5mbG9vcl9zcGFjZSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkJ1aWxkQ2ZnSXRlbS5mbG9vcl9zcGFjZTogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5mbG9vcl9zcGFjZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5mbG9vcl9zcGFjZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLmZsb29yX3NwYWNlW2ldID0gZC5mbG9vcl9zcGFjZVtpXSB8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucm90YXRlYWJsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5yb3RhdGVhYmxlID0gQm9vbGVhbihkLnJvdGF0ZWFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubW92ZWFibGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubW92ZWFibGUgPSBCb29sZWFuKGQubW92ZWFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQucmVjb3ZlcmFibGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ucmVjb3ZlcmFibGUgPSBCb29sZWFuKGQucmVjb3ZlcmFibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQub25seV9vbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ub25seV9vbmUgPSBCb29sZWFuKGQub25seV9vbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudXBncmFkZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC51cGdyYWRlcykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkJ1aWxkQ2ZnSXRlbS51cGdyYWRlczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS51cGdyYWRlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC51cGdyYWRlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQudXBncmFkZXNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5CdWlsZENmZ0l0ZW0udXBncmFkZXM6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbS51cGdyYWRlc1tpXSA9ICRyb290LmZhcm0uVXBncmFkZS5mcm9tT2JqZWN0KGQudXBncmFkZXNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQucG9zaXRpb24pKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5CdWlsZENmZ0l0ZW0ucG9zaXRpb246IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0ucG9zaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQucG9zaXRpb24ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLnBvc2l0aW9uW2ldICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uQnVpbGRDZmdJdGVtLnBvc2l0aW9uOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0ucG9zaXRpb25baV0gPSAkcm9vdC5mYXJtLlBvcy5mcm9tT2JqZWN0KGQucG9zaXRpb25baV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBCdWlsZENmZ0l0ZW0gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQnVpbGRDZmdJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLkJ1aWxkQ2ZnSXRlbX0gbSBCdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBCdWlsZENmZ0l0ZW0udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5mbG9vcl9zcGFjZSA9IFtdO1xuICAgICAgICAgICAgICAgIGQudXBncmFkZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBkLnBvc2l0aW9uID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuaWQgPSAwO1xuICAgICAgICAgICAgICAgIGQubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gMDtcbiAgICAgICAgICAgICAgICBkLnJvdGF0ZWFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBkLm1vdmVhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZC5yZWNvdmVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGQub25seV9vbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5pZCA9IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5uYW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm5hbWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLm5hbWUgPSBtLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50eXBlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInR5cGVcIikpIHtcbiAgICAgICAgICAgICAgICBkLnR5cGUgPSBtLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5mbG9vcl9zcGFjZSAmJiBtLmZsb29yX3NwYWNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuZmxvb3Jfc3BhY2UgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uZmxvb3Jfc3BhY2UubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5mbG9vcl9zcGFjZVtqXSA9IG0uZmxvb3Jfc3BhY2Vbal07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucm90YXRlYWJsZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJyb3RhdGVhYmxlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5yb3RhdGVhYmxlID0gbS5yb3RhdGVhYmxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubW92ZWFibGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibW92ZWFibGVcIikpIHtcbiAgICAgICAgICAgICAgICBkLm1vdmVhYmxlID0gbS5tb3ZlYWJsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnJlY292ZXJhYmxlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInJlY292ZXJhYmxlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5yZWNvdmVyYWJsZSA9IG0ucmVjb3ZlcmFibGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5vbmx5X29uZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJvbmx5X29uZVwiKSkge1xuICAgICAgICAgICAgICAgIGQub25seV9vbmUgPSBtLm9ubHlfb25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udXBncmFkZXMgJiYgbS51cGdyYWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnVwZ3JhZGVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnVwZ3JhZGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQudXBncmFkZXNbal0gPSAkcm9vdC5mYXJtLlVwZ3JhZGUudG9PYmplY3QobS51cGdyYWRlc1tqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ucG9zaXRpb24gJiYgbS5wb3NpdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnBvc2l0aW9uID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLnBvc2l0aW9uLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucG9zaXRpb25bal0gPSAkcm9vdC5mYXJtLlBvcy50b09iamVjdChtLnBvc2l0aW9uW2pdLCBvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBCdWlsZENmZ0l0ZW0gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5CdWlsZENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEJ1aWxkQ2ZnSXRlbS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEJ1aWxkQ2ZnSXRlbTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5VbmxvY2tDb25kaXRpb24gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYW4gVW5sb2NrQ29uZGl0aW9uLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElVbmxvY2tDb25kaXRpb25cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3R5cGVdIFVubG9ja0NvbmRpdGlvbiB0eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj58bnVsbH0gW3ZhbHVlXSBVbmxvY2tDb25kaXRpb24gdmFsdWVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVW5sb2NrQ29uZGl0aW9uLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYW4gVW5sb2NrQ29uZGl0aW9uLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJVW5sb2NrQ29uZGl0aW9uXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVVubG9ja0NvbmRpdGlvbj19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gVW5sb2NrQ29uZGl0aW9uKHApIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbmxvY2tDb25kaXRpb24gdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB0eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVubG9ja0NvbmRpdGlvblxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFVubG9ja0NvbmRpdGlvbi5wcm90b3R5cGUudHlwZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVubG9ja0NvbmRpdGlvbiB2YWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IHZhbHVlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVubG9ja0NvbmRpdGlvblxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFVubG9ja0NvbmRpdGlvbi5wcm90b3R5cGUudmFsdWUgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVW5sb2NrQ29uZGl0aW9uIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uVW5sb2NrQ29uZGl0aW9uLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVubG9ja0NvbmRpdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JVW5sb2NrQ29uZGl0aW9ufSBtIFVubG9ja0NvbmRpdGlvbiBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBVbmxvY2tDb25kaXRpb24uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInR5cGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS50eXBlKTtcbiAgICAgICAgICAgIGlmIChtLnZhbHVlICE9IG51bGwgJiYgbS52YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxOCkuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS52YWx1ZS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQzMihtLnZhbHVlW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYW4gVW5sb2NrQ29uZGl0aW9uIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uVW5sb2NrQ29uZGl0aW9uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uVW5sb2NrQ29uZGl0aW9ufSBVbmxvY2tDb25kaXRpb25cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBVbmxvY2tDb25kaXRpb24uZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uVW5sb2NrQ29uZGl0aW9uKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS50eXBlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0udmFsdWUgJiYgbS52YWx1ZS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS52YWx1ZS5wdXNoKHIuaW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS52YWx1ZS5wdXNoKHIuaW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhbiBVbmxvY2tDb25kaXRpb24gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5VbmxvY2tDb25kaXRpb25cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5VbmxvY2tDb25kaXRpb259IFVubG9ja0NvbmRpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgVW5sb2NrQ29uZGl0aW9uLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5VbmxvY2tDb25kaXRpb24pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlVubG9ja0NvbmRpdGlvbigpO1xuICAgICAgICAgICAgaWYgKGQudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS50eXBlID0gZC50eXBlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQudmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5VbmxvY2tDb25kaXRpb24udmFsdWU6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0udmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQudmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS52YWx1ZVtpXSA9IGQudmFsdWVbaV0gfCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYW4gVW5sb2NrQ29uZGl0aW9uIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlVubG9ja0NvbmRpdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5VbmxvY2tDb25kaXRpb259IG0gVW5sb2NrQ29uZGl0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgVW5sb2NrQ29uZGl0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQudmFsdWUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidHlwZVwiKSkge1xuICAgICAgICAgICAgICAgIGQudHlwZSA9IG0udHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnZhbHVlICYmIG0udmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC52YWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS52YWx1ZS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLnZhbHVlW2pdID0gbS52YWx1ZVtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBVbmxvY2tDb25kaXRpb24gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5VbmxvY2tDb25kaXRpb25cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFVubG9ja0NvbmRpdGlvbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFVubG9ja0NvbmRpdGlvbjtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5Dcm9wQ2ZnSXRlbSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIENyb3BDZmdJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElDcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbaWRdIENyb3BDZmdJdGVtIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtuYW1lXSBDcm9wQ2ZnSXRlbSBuYW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFt0eXBlXSBDcm9wQ2ZnSXRlbSB0eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtncm93X3RpbWVdIENyb3BDZmdJdGVtIGdyb3dfdGltZVxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklVbmxvY2tDb25kaXRpb24+fG51bGx9IFt1bmxvY2tfY29uZGl0aW9uXSBDcm9wQ2ZnSXRlbSB1bmxvY2tfY29uZGl0aW9uXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IENyb3BDZmdJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBDcm9wQ2ZnSXRlbS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSUNyb3BDZmdJdGVtXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUNyb3BDZmdJdGVtPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBDcm9wQ2ZnSXRlbShwKSB7XG4gICAgICAgICAgICB0aGlzLnVubG9ja19jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcm9wQ2ZnSXRlbSBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBpZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Dcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIENyb3BDZmdJdGVtLnByb3RvdHlwZS5pZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyb3BDZmdJdGVtIG5hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbmFtZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Dcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIENyb3BDZmdJdGVtLnByb3RvdHlwZS5uYW1lID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JvcENmZ0l0ZW0gdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSB0eXBlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkNyb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQ3JvcENmZ0l0ZW0ucHJvdG90eXBlLnR5cGUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcm9wQ2ZnSXRlbSBncm93X3RpbWUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gZ3Jvd190aW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkNyb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQ3JvcENmZ0l0ZW0ucHJvdG90eXBlLmdyb3dfdGltZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyb3BDZmdJdGVtIHVubG9ja19jb25kaXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklVbmxvY2tDb25kaXRpb24+fSB1bmxvY2tfY29uZGl0aW9uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkNyb3BDZmdJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQ3JvcENmZ0l0ZW0ucHJvdG90eXBlLnVubG9ja19jb25kaXRpb24gPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgQ3JvcENmZ0l0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5Dcm9wQ2ZnSXRlbS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Dcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JQ3JvcENmZ0l0ZW19IG0gQ3JvcENmZ0l0ZW0gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgQ3JvcENmZ0l0ZW0uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmlkKTtcbiAgICAgICAgICAgIGlmIChtLm5hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcIm5hbWVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLnN0cmluZyhtLm5hbWUpO1xuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50MzIobS50eXBlKTtcbiAgICAgICAgICAgIGlmIChtLmdyb3dfdGltZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZ3Jvd190aW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQzMihtLmdyb3dfdGltZSk7XG4gICAgICAgICAgICBpZiAobS51bmxvY2tfY29uZGl0aW9uICE9IG51bGwgJiYgbS51bmxvY2tfY29uZGl0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS51bmxvY2tfY29uZGl0aW9uLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLlVubG9ja0NvbmRpdGlvbi5lbmNvZGUobS51bmxvY2tfY29uZGl0aW9uW2ldLCB3LnVpbnQzMig0MikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgQ3JvcENmZ0l0ZW0gbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Dcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkNyb3BDZmdJdGVtfSBDcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIENyb3BDZmdJdGVtLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLkNyb3BDZmdJdGVtKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLm5hbWUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0udHlwZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLmdyb3dfdGltZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnVubG9ja19jb25kaXRpb24gJiYgbS51bmxvY2tfY29uZGl0aW9uLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnVubG9ja19jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS51bmxvY2tfY29uZGl0aW9uLnB1c2goJHJvb3QuZmFybS5VbmxvY2tDb25kaXRpb24uZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgQ3JvcENmZ0l0ZW0gbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Dcm9wQ2ZnSXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkNyb3BDZmdJdGVtfSBDcm9wQ2ZnSXRlbVxuICAgICAgICAgKi9cbiAgICAgICAgQ3JvcENmZ0l0ZW0uZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkNyb3BDZmdJdGVtKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5Dcm9wQ2ZnSXRlbSgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubmFtZSA9IFN0cmluZyhkLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS50eXBlID0gZC50eXBlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmdyb3dfdGltZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5ncm93X3RpbWUgPSBkLmdyb3dfdGltZSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC51bmxvY2tfY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQudW5sb2NrX2NvbmRpdGlvbikpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLkNyb3BDZmdJdGVtLnVubG9ja19jb25kaXRpb246IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0udW5sb2NrX2NvbmRpdGlvbiA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC51bmxvY2tfY29uZGl0aW9uLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC51bmxvY2tfY29uZGl0aW9uW2ldICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uQ3JvcENmZ0l0ZW0udW5sb2NrX2NvbmRpdGlvbjogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLnVubG9ja19jb25kaXRpb25baV0gPSAkcm9vdC5mYXJtLlVubG9ja0NvbmRpdGlvbi5mcm9tT2JqZWN0KGQudW5sb2NrX2NvbmRpdGlvbltpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIENyb3BDZmdJdGVtIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkNyb3BDZmdJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLkNyb3BDZmdJdGVtfSBtIENyb3BDZmdJdGVtXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQ3JvcENmZ0l0ZW0udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC51bmxvY2tfY29uZGl0aW9uID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuaWQgPSAwO1xuICAgICAgICAgICAgICAgIGQubmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gMDtcbiAgICAgICAgICAgICAgICBkLmdyb3dfdGltZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGQuaWQgPSBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubmFtZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJuYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5uYW1lID0gbS5uYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gbS50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZ3Jvd190aW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImdyb3dfdGltZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuZ3Jvd190aW1lID0gbS5ncm93X3RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51bmxvY2tfY29uZGl0aW9uICYmIG0udW5sb2NrX2NvbmRpdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnVubG9ja19jb25kaXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0udW5sb2NrX2NvbmRpdGlvbi5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLnVubG9ja19jb25kaXRpb25bal0gPSAkcm9vdC5mYXJtLlVubG9ja0NvbmRpdGlvbi50b09iamVjdChtLnVubG9ja19jb25kaXRpb25bal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIENyb3BDZmdJdGVtIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ3JvcENmZ0l0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIENyb3BDZmdJdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQ3JvcENmZ0l0ZW07XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcFBsYW50Q3JvcHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXNwUGxhbnRDcm9wcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcFBsYW50Q3JvcHNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48ZmFybS5JUGxhbnRDcm9wPnxudWxsfSBbcGxhbnRfY3JvcHNdIFJlc3BQbGFudENyb3BzIHBsYW50X2Nyb3BzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BQbGFudENyb3BzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwUGxhbnRDcm9wcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BQbGFudENyb3BzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BQbGFudENyb3BzPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwUGxhbnRDcm9wcyhwKSB7XG4gICAgICAgICAgICB0aGlzLnBsYW50X2Nyb3BzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcFBsYW50Q3JvcHMgcGxhbnRfY3JvcHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklQbGFudENyb3A+fSBwbGFudF9jcm9wc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUGxhbnRDcm9wc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BQbGFudENyb3BzLnByb3RvdHlwZS5wbGFudF9jcm9wcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwUGxhbnRDcm9wcyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlc3BQbGFudENyb3BzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BQbGFudENyb3BzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwUGxhbnRDcm9wc30gbSBSZXNwUGxhbnRDcm9wcyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUGxhbnRDcm9wcy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ucGxhbnRfY3JvcHMgIT0gbnVsbCAmJiBtLnBsYW50X2Nyb3BzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5wbGFudF9jcm9wcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5QbGFudENyb3AuZW5jb2RlKG0ucGxhbnRfY3JvcHNbaV0sIHcudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwUGxhbnRDcm9wcyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BQbGFudENyb3BzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFBsYW50Q3JvcHN9IFJlc3BQbGFudENyb3BzXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFBsYW50Q3JvcHMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcFBsYW50Q3JvcHMoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnBsYW50X2Nyb3BzICYmIG0ucGxhbnRfY3JvcHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucGxhbnRfY3JvcHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5wbGFudF9jcm9wcy5wdXNoKCRyb290LmZhcm0uUGxhbnRDcm9wLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BQbGFudENyb3BzIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFBsYW50Q3JvcHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwUGxhbnRDcm9wc30gUmVzcFBsYW50Q3JvcHNcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BQbGFudENyb3BzLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwUGxhbnRDcm9wcylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcFBsYW50Q3JvcHMoKTtcbiAgICAgICAgICAgIGlmIChkLnBsYW50X2Nyb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQucGxhbnRfY3JvcHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwUGxhbnRDcm9wcy5wbGFudF9jcm9wczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5wbGFudF9jcm9wcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5wbGFudF9jcm9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucGxhbnRfY3JvcHNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwUGxhbnRDcm9wcy5wbGFudF9jcm9wczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLnBsYW50X2Nyb3BzW2ldID0gJHJvb3QuZmFybS5QbGFudENyb3AuZnJvbU9iamVjdChkLnBsYW50X2Nyb3BzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcFBsYW50Q3JvcHMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFBsYW50Q3JvcHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFBsYW50Q3JvcHN9IG0gUmVzcFBsYW50Q3JvcHNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUGxhbnRDcm9wcy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLnBsYW50X2Nyb3BzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5wbGFudF9jcm9wcyAmJiBtLnBsYW50X2Nyb3BzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQucGxhbnRfY3JvcHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0ucGxhbnRfY3JvcHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5wbGFudF9jcm9wc1tqXSA9ICRyb290LmZhcm0uUGxhbnRDcm9wLnRvT2JqZWN0KG0ucGxhbnRfY3JvcHNbal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BQbGFudENyb3BzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFBsYW50Q3JvcHNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BQbGFudENyb3BzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFBsYW50Q3JvcHM7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUGxhbnRDcm9wID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUGxhbnRDcm9wLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElQbGFudENyb3BcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIFBsYW50Q3JvcCBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbY29uZmlnX2lkXSBQbGFudENyb3AgY29uZmlnX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbaXNfdW5sb2NrXSBQbGFudENyb3AgaXNfdW5sb2NrXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7ZmFybS5DdXJyZW5jeVR5cGV8bnVsbH0gW2N1cnJlbmN5X3R5cGVdIFBsYW50Q3JvcCBjdXJyZW5jeV90eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW251bWJlcl0gUGxhbnRDcm9wIG51bWJlclxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBQbGFudENyb3AuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFBsYW50Q3JvcC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVBsYW50Q3JvcFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklQbGFudENyb3A9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFBsYW50Q3JvcChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUGxhbnRDcm9wIGlkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUGxhbnRDcm9wXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUGxhbnRDcm9wLnByb3RvdHlwZS5pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQbGFudENyb3AgY29uZmlnX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGNvbmZpZ19pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5QbGFudENyb3BcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBQbGFudENyb3AucHJvdG90eXBlLmNvbmZpZ19pZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBsYW50Q3JvcCBpc191bmxvY2suXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IGlzX3VubG9ja1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5QbGFudENyb3BcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBQbGFudENyb3AucHJvdG90eXBlLmlzX3VubG9jayA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQbGFudENyb3AgY3VycmVuY3lfdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5DdXJyZW5jeVR5cGV9IGN1cnJlbmN5X3R5cGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUGxhbnRDcm9wXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUGxhbnRDcm9wLnByb3RvdHlwZS5jdXJyZW5jeV90eXBlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUGxhbnRDcm9wIG51bWJlci5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IG51bWJlclxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5QbGFudENyb3BcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBQbGFudENyb3AucHJvdG90eXBlLm51bWJlciA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUGxhbnRDcm9wIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUGxhbnRDcm9wLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlBsYW50Q3JvcFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUGxhbnRDcm9wfSBtIFBsYW50Q3JvcCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBQbGFudENyb3AuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmlkKTtcbiAgICAgICAgICAgIGlmIChtLmNvbmZpZ19pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiY29uZmlnX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmNvbmZpZ19pZCk7XG4gICAgICAgICAgICBpZiAobS5pc191bmxvY2sgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlzX3VubG9ja1wiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuYm9vbChtLmlzX3VubG9jayk7XG4gICAgICAgICAgICBpZiAobS5jdXJyZW5jeV90eXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjdXJyZW5jeV90eXBlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQzMihtLmN1cnJlbmN5X3R5cGUpO1xuICAgICAgICAgICAgaWYgKG0ubnVtYmVyICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJudW1iZXJcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDApLmludDY0KG0ubnVtYmVyKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUGxhbnRDcm9wIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUGxhbnRDcm9wXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUGxhbnRDcm9wfSBQbGFudENyb3BcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBQbGFudENyb3AuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUGxhbnRDcm9wKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLmNvbmZpZ19pZCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLmlzX3VubG9jayA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0uY3VycmVuY3lfdHlwZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtLm51bWJlciA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUGxhbnRDcm9wIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUGxhbnRDcm9wXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUGxhbnRDcm9wfSBQbGFudENyb3BcbiAgICAgICAgICovXG4gICAgICAgIFBsYW50Q3JvcC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUGxhbnRDcm9wKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5QbGFudENyb3AoKTtcbiAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNvbmZpZ19pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5jb25maWdfaWQgPSBkLmNvbmZpZ19pZCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5pc191bmxvY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaXNfdW5sb2NrID0gQm9vbGVhbihkLmlzX3VubG9jayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGQuY3VycmVuY3lfdHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcIkNOb3RoaW5nXCI6XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgbS5jdXJyZW5jeV90eXBlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJDR29sZFwiOlxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIG0uY3VycmVuY3lfdHlwZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQ0NyeXN0YWxcIjpcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtLmN1cnJlbmN5X3R5cGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkNMb3ZlXCI6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgbS5jdXJyZW5jeV90eXBlID0gMztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm51bWJlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLm51bWJlciA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubnVtYmVyKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5udW1iZXIgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubnVtYmVyID0gcGFyc2VJbnQoZC5udW1iZXIsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5udW1iZXIgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubnVtYmVyID0gZC5udW1iZXI7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubnVtYmVyID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLm51bWJlciA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm51bWJlci5sb3cgPj4+IDAsIGQubnVtYmVyLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUGxhbnRDcm9wIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlBsYW50Q3JvcFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5QbGFudENyb3B9IG0gUGxhbnRDcm9wXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUGxhbnRDcm9wLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmNvbmZpZ19pZCA9IDA7XG4gICAgICAgICAgICAgICAgZC5pc191bmxvY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBkLmN1cnJlbmN5X3R5cGUgPSBvLmVudW1zID09PSBTdHJpbmcgPyBcIkNOb3RoaW5nXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLm51bWJlciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubnVtYmVyID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jb25maWdfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY29uZmlnX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5jb25maWdfaWQgPSBtLmNvbmZpZ19pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlzX3VubG9jayAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpc191bmxvY2tcIikpIHtcbiAgICAgICAgICAgICAgICBkLmlzX3VubG9jayA9IG0uaXNfdW5sb2NrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY3VycmVuY3lfdHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjdXJyZW5jeV90eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5jdXJyZW5jeV90eXBlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QuZmFybS5DdXJyZW5jeVR5cGVbbS5jdXJyZW5jeV90eXBlXSA6IG0uY3VycmVuY3lfdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm51bWJlciAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJudW1iZXJcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubnVtYmVyID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLm51bWJlciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLm51bWJlcikgOiBtLm51bWJlcjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQubnVtYmVyID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLm51bWJlcikgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5udW1iZXIubG93ID4+PiAwLCBtLm51bWJlci5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5udW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBQbGFudENyb3AgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5QbGFudENyb3BcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFBsYW50Q3JvcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFBsYW50Q3JvcDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXNwQXJhYmxlTGFuZHNTdGF0ZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BBcmFibGVMYW5kc1N0YXRlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwQXJhYmxlTGFuZHNTdGF0ZVxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklBcmFibGVMYW5kU3RhdGU+fG51bGx9IFthcmFibGVfbGFuZHNfc3RhdGVdIFJlc3BBcmFibGVMYW5kc1N0YXRlIGFyYWJsZV9sYW5kc19zdGF0ZVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwQXJhYmxlTGFuZHNTdGF0ZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcEFyYWJsZUxhbmRzU3RhdGUuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwQXJhYmxlTGFuZHNTdGF0ZVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwQXJhYmxlTGFuZHNTdGF0ZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcEFyYWJsZUxhbmRzU3RhdGUocCkge1xuICAgICAgICAgICAgdGhpcy5hcmFibGVfbGFuZHNfc3RhdGUgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwQXJhYmxlTGFuZHNTdGF0ZSBhcmFibGVfbGFuZHNfc3RhdGUuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklBcmFibGVMYW5kU3RhdGU+fSBhcmFibGVfbGFuZHNfc3RhdGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQXJhYmxlTGFuZHNTdGF0ZS5wcm90b3R5cGUuYXJhYmxlX2xhbmRzX3N0YXRlID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BBcmFibGVMYW5kc1N0YXRlIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BBcmFibGVMYW5kc1N0YXRlfSBtIFJlc3BBcmFibGVMYW5kc1N0YXRlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BBcmFibGVMYW5kc1N0YXRlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5hcmFibGVfbGFuZHNfc3RhdGUgIT0gbnVsbCAmJiBtLmFyYWJsZV9sYW5kc19zdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uYXJhYmxlX2xhbmRzX3N0YXRlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5mYXJtLkFyYWJsZUxhbmRTdGF0ZS5lbmNvZGUobS5hcmFibGVfbGFuZHNfc3RhdGVbaV0sIHcudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwQXJhYmxlTGFuZHNTdGF0ZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BBcmFibGVMYW5kc1N0YXRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGV9IFJlc3BBcmFibGVMYW5kc1N0YXRlXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEFyYWJsZUxhbmRzU3RhdGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGUoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmFyYWJsZV9sYW5kc19zdGF0ZSAmJiBtLmFyYWJsZV9sYW5kc19zdGF0ZS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5hcmFibGVfbGFuZHNfc3RhdGUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5hcmFibGVfbGFuZHNfc3RhdGUucHVzaCgkcm9vdC5mYXJtLkFyYWJsZUxhbmRTdGF0ZS5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwQXJhYmxlTGFuZHNTdGF0ZSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BBcmFibGVMYW5kc1N0YXRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGV9IFJlc3BBcmFibGVMYW5kc1N0YXRlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQXJhYmxlTGFuZHNTdGF0ZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BBcmFibGVMYW5kc1N0YXRlKCk7XG4gICAgICAgICAgICBpZiAoZC5hcmFibGVfbGFuZHNfc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5hcmFibGVfbGFuZHNfc3RhdGUpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwQXJhYmxlTGFuZHNTdGF0ZS5hcmFibGVfbGFuZHNfc3RhdGU6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uYXJhYmxlX2xhbmRzX3N0YXRlID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmFyYWJsZV9sYW5kc19zdGF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuYXJhYmxlX2xhbmRzX3N0YXRlW2ldICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcEFyYWJsZUxhbmRzU3RhdGUuYXJhYmxlX2xhbmRzX3N0YXRlOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0uYXJhYmxlX2xhbmRzX3N0YXRlW2ldID0gJHJvb3QuZmFybS5BcmFibGVMYW5kU3RhdGUuZnJvbU9iamVjdChkLmFyYWJsZV9sYW5kc19zdGF0ZVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BBcmFibGVMYW5kc1N0YXRlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BBcmFibGVMYW5kc1N0YXRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BBcmFibGVMYW5kc1N0YXRlfSBtIFJlc3BBcmFibGVMYW5kc1N0YXRlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEFyYWJsZUxhbmRzU3RhdGUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5hcmFibGVfbGFuZHNfc3RhdGUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmFyYWJsZV9sYW5kc19zdGF0ZSAmJiBtLmFyYWJsZV9sYW5kc19zdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmFyYWJsZV9sYW5kc19zdGF0ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5hcmFibGVfbGFuZHNfc3RhdGUubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5hcmFibGVfbGFuZHNfc3RhdGVbal0gPSAkcm9vdC5mYXJtLkFyYWJsZUxhbmRTdGF0ZS50b09iamVjdChtLmFyYWJsZV9sYW5kc19zdGF0ZVtqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcEFyYWJsZUxhbmRzU3RhdGUgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwQXJhYmxlTGFuZHNTdGF0ZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEFyYWJsZUxhbmRzU3RhdGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwQXJhYmxlTGFuZHNTdGF0ZTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5BcmFibGVMYW5kU3RhdGUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYW4gQXJhYmxlTGFuZFN0YXRlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElBcmFibGVMYW5kU3RhdGVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbYnVpbGRpbmdfaWRdIEFyYWJsZUxhbmRTdGF0ZSBidWlsZGluZ19pZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbY3JvcF9jb25maWdJRF0gQXJhYmxlTGFuZFN0YXRlIGNyb3BfY29uZmlnSURcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3RpbWVfbGVmdF0gQXJhYmxlTGFuZFN0YXRlIHRpbWVfbGVmdFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBBcmFibGVMYW5kU3RhdGUuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhbiBBcmFibGVMYW5kU3RhdGUuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElBcmFibGVMYW5kU3RhdGVcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JQXJhYmxlTGFuZFN0YXRlPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBBcmFibGVMYW5kU3RhdGUocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFyYWJsZUxhbmRTdGF0ZSBidWlsZGluZ19pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGJ1aWxkaW5nX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFyYWJsZUxhbmRTdGF0ZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEFyYWJsZUxhbmRTdGF0ZS5wcm90b3R5cGUuYnVpbGRpbmdfaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQXJhYmxlTGFuZFN0YXRlIGNyb3BfY29uZmlnSUQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gY3JvcF9jb25maWdJRFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5BcmFibGVMYW5kU3RhdGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBBcmFibGVMYW5kU3RhdGUucHJvdG90eXBlLmNyb3BfY29uZmlnSUQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcmFibGVMYW5kU3RhdGUgdGltZV9sZWZ0LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHRpbWVfbGVmdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5BcmFibGVMYW5kU3RhdGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBBcmFibGVMYW5kU3RhdGUucHJvdG90eXBlLnRpbWVfbGVmdCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBBcmFibGVMYW5kU3RhdGUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5BcmFibGVMYW5kU3RhdGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQXJhYmxlTGFuZFN0YXRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklBcmFibGVMYW5kU3RhdGV9IG0gQXJhYmxlTGFuZFN0YXRlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEFyYWJsZUxhbmRTdGF0ZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImJ1aWxkaW5nX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uYnVpbGRpbmdfaWQpO1xuICAgICAgICAgICAgaWYgKG0uY3JvcF9jb25maWdJRCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiY3JvcF9jb25maWdJRFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50MzIobS5jcm9wX2NvbmZpZ0lEKTtcbiAgICAgICAgICAgIGlmIChtLnRpbWVfbGVmdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGltZV9sZWZ0XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQzMihtLnRpbWVfbGVmdCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhbiBBcmFibGVMYW5kU3RhdGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5BcmFibGVMYW5kU3RhdGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5BcmFibGVMYW5kU3RhdGV9IEFyYWJsZUxhbmRTdGF0ZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEFyYWJsZUxhbmRTdGF0ZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5BcmFibGVMYW5kU3RhdGUoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nX2lkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uY3JvcF9jb25maWdJRCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnRpbWVfbGVmdCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGFuIEFyYWJsZUxhbmRTdGF0ZSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFyYWJsZUxhbmRTdGF0ZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLkFyYWJsZUxhbmRTdGF0ZX0gQXJhYmxlTGFuZFN0YXRlXG4gICAgICAgICAqL1xuICAgICAgICBBcmFibGVMYW5kU3RhdGUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLkFyYWJsZUxhbmRTdGF0ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uQXJhYmxlTGFuZFN0YXRlKCk7XG4gICAgICAgICAgICBpZiAoZC5idWlsZGluZ19pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmJ1aWxkaW5nX2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5idWlsZGluZ19pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYnVpbGRpbmdfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWQgPSBwYXJzZUludChkLmJ1aWxkaW5nX2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYnVpbGRpbmdfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWQgPSBkLmJ1aWxkaW5nX2lkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmJ1aWxkaW5nX2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nX2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuYnVpbGRpbmdfaWQubG93ID4+PiAwLCBkLmJ1aWxkaW5nX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5jcm9wX2NvbmZpZ0lEICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmNyb3BfY29uZmlnSUQgPSBkLmNyb3BfY29uZmlnSUQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudGltZV9sZWZ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnRpbWVfbGVmdCA9IGQudGltZV9sZWZ0IHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYW4gQXJhYmxlTGFuZFN0YXRlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFyYWJsZUxhbmRTdGF0ZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5BcmFibGVMYW5kU3RhdGV9IG0gQXJhYmxlTGFuZFN0YXRlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQXJhYmxlTGFuZFN0YXRlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5idWlsZGluZ19pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmNyb3BfY29uZmlnSUQgPSAwO1xuICAgICAgICAgICAgICAgIGQudGltZV9sZWZ0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJ1aWxkaW5nX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImJ1aWxkaW5nX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmJ1aWxkaW5nX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uYnVpbGRpbmdfaWQpIDogbS5idWlsZGluZ19pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uYnVpbGRpbmdfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uYnVpbGRpbmdfaWQubG93ID4+PiAwLCBtLmJ1aWxkaW5nX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmJ1aWxkaW5nX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY3JvcF9jb25maWdJRCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjcm9wX2NvbmZpZ0lEXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5jcm9wX2NvbmZpZ0lEID0gbS5jcm9wX2NvbmZpZ0lEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udGltZV9sZWZ0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRpbWVfbGVmdFwiKSkge1xuICAgICAgICAgICAgICAgIGQudGltZV9sZWZ0ID0gbS50aW1lX2xlZnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBBcmFibGVMYW5kU3RhdGUgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5BcmFibGVMYW5kU3RhdGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIEFyYWJsZUxhbmRTdGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEFyYWJsZUxhbmRTdGF0ZTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFDcm9wT3B0aW9uID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxQ3JvcE9wdGlvbi5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxQ3JvcE9wdGlvblxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxudW1iZXJ8TG9uZz58bnVsbH0gW2J1aWxkaW5nX2lkc10gUmVxQ3JvcE9wdGlvbiBidWlsZGluZ19pZHNcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48bnVtYmVyPnxudWxsfSBbY3JvcF9jZmdpZHNdIFJlcUNyb3BPcHRpb24gY3JvcF9jZmdpZHNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxQ3JvcE9wdGlvbi5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxQ3JvcE9wdGlvbi5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcUNyb3BPcHRpb25cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQ3JvcE9wdGlvbj19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxQ3JvcE9wdGlvbihwKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkaW5nX2lkcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jcm9wX2NmZ2lkcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUNyb3BPcHRpb24gYnVpbGRpbmdfaWRzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48bnVtYmVyfExvbmc+fSBidWlsZGluZ19pZHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQ3JvcE9wdGlvblxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUNyb3BPcHRpb24ucHJvdG90eXBlLmJ1aWxkaW5nX2lkcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUNyb3BPcHRpb24gY3JvcF9jZmdpZHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXI+fSBjcm9wX2NmZ2lkc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFDcm9wT3B0aW9uXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQ3JvcE9wdGlvbi5wcm90b3R5cGUuY3JvcF9jZmdpZHMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxQ3JvcE9wdGlvbiBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcUNyb3BPcHRpb24udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQ3JvcE9wdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxQ3JvcE9wdGlvbn0gbSBSZXFDcm9wT3B0aW9uIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcUNyb3BPcHRpb24uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmJ1aWxkaW5nX2lkcyAhPSBudWxsICYmIG0uYnVpbGRpbmdfaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5mb3JrKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmJ1aWxkaW5nX2lkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLmJ1aWxkaW5nX2lkc1tpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmNyb3BfY2ZnaWRzICE9IG51bGwgJiYgbS5jcm9wX2NmZ2lkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxOCkuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5jcm9wX2NmZ2lkcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQzMihtLmNyb3BfY2ZnaWRzW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFDcm9wT3B0aW9uIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQ3JvcE9wdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcUNyb3BPcHRpb259IFJlcUNyb3BPcHRpb25cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFDcm9wT3B0aW9uLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcUNyb3BPcHRpb24oKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLmJ1aWxkaW5nX2lkcyAmJiBtLmJ1aWxkaW5nX2lkcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ19pZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWRzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nX2lkcy5wdXNoKHIuaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5jcm9wX2NmZ2lkcyAmJiBtLmNyb3BfY2ZnaWRzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNyb3BfY2ZnaWRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSByLnVpbnQzMigpICsgci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNyb3BfY2ZnaWRzLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmNyb3BfY2ZnaWRzLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxQ3JvcE9wdGlvbiBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcUNyb3BPcHRpb25cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFDcm9wT3B0aW9ufSBSZXFDcm9wT3B0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBSZXFDcm9wT3B0aW9uLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFDcm9wT3B0aW9uKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFDcm9wT3B0aW9uKCk7XG4gICAgICAgICAgICBpZiAoZC5idWlsZGluZ19pZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5idWlsZGluZ19pZHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXFDcm9wT3B0aW9uLmJ1aWxkaW5nX2lkczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5idWlsZGluZ19pZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuYnVpbGRpbmdfaWRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgKG0uYnVpbGRpbmdfaWRzW2ldID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5idWlsZGluZ19pZHNbaV0pKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5idWlsZGluZ19pZHNbaV0gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJ1aWxkaW5nX2lkc1tpXSA9IHBhcnNlSW50KGQuYnVpbGRpbmdfaWRzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmJ1aWxkaW5nX2lkc1tpXSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWRzW2ldID0gZC5idWlsZGluZ19pZHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmJ1aWxkaW5nX2lkc1tpXSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWRzW2ldID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuYnVpbGRpbmdfaWRzW2ldLmxvdyA+Pj4gMCwgZC5idWlsZGluZ19pZHNbaV0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5jcm9wX2NmZ2lkcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmNyb3BfY2ZnaWRzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVxQ3JvcE9wdGlvbi5jcm9wX2NmZ2lkczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5jcm9wX2NmZ2lkcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5jcm9wX2NmZ2lkcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLmNyb3BfY2ZnaWRzW2ldID0gZC5jcm9wX2NmZ2lkc1tpXSB8IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcUNyb3BPcHRpb24gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxQ3JvcE9wdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFDcm9wT3B0aW9ufSBtIFJlcUNyb3BPcHRpb25cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFDcm9wT3B0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdfaWRzID0gW107XG4gICAgICAgICAgICAgICAgZC5jcm9wX2NmZ2lkcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdfaWRzICYmIG0uYnVpbGRpbmdfaWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdfaWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmJ1aWxkaW5nX2lkcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uYnVpbGRpbmdfaWRzW2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5idWlsZGluZ19pZHNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5idWlsZGluZ19pZHNbal0pIDogbS5idWlsZGluZ19pZHNbal07XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdfaWRzW2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmJ1aWxkaW5nX2lkc1tqXSkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5idWlsZGluZ19pZHNbal0ubG93ID4+PiAwLCBtLmJ1aWxkaW5nX2lkc1tqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5idWlsZGluZ19pZHNbal07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY3JvcF9jZmdpZHMgJiYgbS5jcm9wX2NmZ2lkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmNyb3BfY2ZnaWRzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmNyb3BfY2ZnaWRzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuY3JvcF9jZmdpZHNbal0gPSBtLmNyb3BfY2ZnaWRzW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcUNyb3BPcHRpb24gdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFDcm9wT3B0aW9uXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFDcm9wT3B0aW9uLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxQ3JvcE9wdGlvbjtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFVbmxvY2tDcm9wID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxVW5sb2NrQ3JvcC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxVW5sb2NrQ3JvcFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbY29uZmlnSURdIFJlcVVubG9ja0Nyb3AgY29uZmlnSURcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxVW5sb2NrQ3JvcC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxVW5sb2NrQ3JvcC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcVVubG9ja0Nyb3BcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVW5sb2NrQ3JvcD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxVW5sb2NrQ3JvcChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxVW5sb2NrQ3JvcCBjb25maWdJRC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBjb25maWdJRFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVbmxvY2tDcm9wXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVW5sb2NrQ3JvcC5wcm90b3R5cGUuY29uZmlnSUQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxVW5sb2NrQ3JvcCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcVVubG9ja0Nyb3AudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVW5sb2NrQ3JvcFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVW5sb2NrQ3JvcH0gbSBSZXFVbmxvY2tDcm9wIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVubG9ja0Nyb3AuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmNvbmZpZ0lEICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjb25maWdJRFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmNvbmZpZ0lEKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxVW5sb2NrQ3JvcCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVubG9ja0Nyb3BcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVbmxvY2tDcm9wfSBSZXFVbmxvY2tDcm9wXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxVW5sb2NrQ3JvcC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFVbmxvY2tDcm9wKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5jb25maWdJRCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxVW5sb2NrQ3JvcCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVVubG9ja0Nyb3BcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFVbmxvY2tDcm9wfSBSZXFVbmxvY2tDcm9wXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbmxvY2tDcm9wLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFVbmxvY2tDcm9wKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFVbmxvY2tDcm9wKCk7XG4gICAgICAgICAgICBpZiAoZC5jb25maWdJRCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5jb25maWdJRCA9IGQuY29uZmlnSUQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcVVubG9ja0Nyb3AgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVW5sb2NrQ3JvcFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFVbmxvY2tDcm9wfSBtIFJlcVVubG9ja0Nyb3BcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbmxvY2tDcm9wLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuY29uZmlnSUQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY29uZmlnSUQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY29uZmlnSURcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvbmZpZ0lEID0gbS5jb25maWdJRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcVVubG9ja0Nyb3AgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFVbmxvY2tDcm9wXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVbmxvY2tDcm9wLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxVW5sb2NrQ3JvcDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5DdXJyZW5jeUxlZnQgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBDdXJyZW5jeUxlZnQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUN1cnJlbmN5TGVmdFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFt0a19nb2xkXSBDdXJyZW5jeUxlZnQgdGtfZ29sZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFt0a19jcnlzdGFsXSBDdXJyZW5jeUxlZnQgdGtfY3J5c3RhbFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBDdXJyZW5jeUxlZnQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIEN1cnJlbmN5TGVmdC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSUN1cnJlbmN5TGVmdFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklDdXJyZW5jeUxlZnQ9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEN1cnJlbmN5TGVmdChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3VycmVuY3lMZWZ0IHRrX2dvbGQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSB0a19nb2xkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkN1cnJlbmN5TGVmdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEN1cnJlbmN5TGVmdC5wcm90b3R5cGUudGtfZ29sZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDdXJyZW5jeUxlZnQgdGtfY3J5c3RhbC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHRrX2NyeXN0YWxcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ3VycmVuY3lMZWZ0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQ3VycmVuY3lMZWZ0LnByb3RvdHlwZS50a19jcnlzdGFsID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBDdXJyZW5jeUxlZnQgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5DdXJyZW5jeUxlZnQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ3VycmVuY3lMZWZ0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklDdXJyZW5jeUxlZnR9IG0gQ3VycmVuY3lMZWZ0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEN1cnJlbmN5TGVmdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0udGtfZ29sZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGtfZ29sZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLnRrX2dvbGQpO1xuICAgICAgICAgICAgaWYgKG0udGtfY3J5c3RhbCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGtfY3J5c3RhbFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50NjQobS50a19jcnlzdGFsKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgQ3VycmVuY3lMZWZ0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ3VycmVuY3lMZWZ0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uQ3VycmVuY3lMZWZ0fSBDdXJyZW5jeUxlZnRcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBDdXJyZW5jeUxlZnQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uQ3VycmVuY3lMZWZ0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS50a19nb2xkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0udGtfY3J5c3RhbCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgQ3VycmVuY3lMZWZ0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQ3VycmVuY3lMZWZ0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uQ3VycmVuY3lMZWZ0fSBDdXJyZW5jeUxlZnRcbiAgICAgICAgICovXG4gICAgICAgIEN1cnJlbmN5TGVmdC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uQ3VycmVuY3lMZWZ0KVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5DdXJyZW5jeUxlZnQoKTtcbiAgICAgICAgICAgIGlmIChkLnRrX2dvbGQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS50a19nb2xkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC50a19nb2xkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19nb2xkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2dvbGQgPSBwYXJzZUludChkLnRrX2dvbGQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19nb2xkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2dvbGQgPSBkLnRrX2dvbGQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQudGtfZ29sZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS50a19nb2xkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQudGtfZ29sZC5sb3cgPj4+IDAsIGQudGtfZ29sZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudGtfY3J5c3RhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLnRrX2NyeXN0YWwgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnRrX2NyeXN0YWwpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRrX2NyeXN0YWwgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udGtfY3J5c3RhbCA9IHBhcnNlSW50KGQudGtfY3J5c3RhbCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnRrX2NyeXN0YWwgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0udGtfY3J5c3RhbCA9IGQudGtfY3J5c3RhbDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC50a19jcnlzdGFsID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLnRrX2NyeXN0YWwgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC50a19jcnlzdGFsLmxvdyA+Pj4gMCwgZC50a19jcnlzdGFsLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgQ3VycmVuY3lMZWZ0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkN1cnJlbmN5TGVmdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5DdXJyZW5jeUxlZnR9IG0gQ3VycmVuY3lMZWZ0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQ3VycmVuY3lMZWZ0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnRrX2dvbGQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2dvbGQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQudGtfY3J5c3RhbCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IG4udG9TdHJpbmcoKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG4udG9OdW1iZXIoKSA6IG47XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudGtfY3J5c3RhbCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRrX2dvbGQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidGtfZ29sZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS50a19nb2xkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2dvbGQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS50a19nb2xkKSA6IG0udGtfZ29sZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudGtfZ29sZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS50a19nb2xkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnRrX2dvbGQubG93ID4+PiAwLCBtLnRrX2dvbGQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0udGtfZ29sZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRrX2NyeXN0YWwgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidGtfY3J5c3RhbFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS50a19jcnlzdGFsID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnRrX2NyeXN0YWwgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS50a19jcnlzdGFsKSA6IG0udGtfY3J5c3RhbDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQudGtfY3J5c3RhbCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS50a19jcnlzdGFsKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnRrX2NyeXN0YWwubG93ID4+PiAwLCBtLnRrX2NyeXN0YWwuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0udGtfY3J5c3RhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEN1cnJlbmN5TGVmdCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkN1cnJlbmN5TGVmdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQ3VycmVuY3lMZWZ0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQ3VycmVuY3lMZWZ0O1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIE1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGZhcm0uSVdvcmRCdWJibGU+fG51bGx9IFt3b3JkX2J1YmJsZXNdIE1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZCB3b3JkX2J1YmJsZXNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQocCkge1xuICAgICAgICAgICAgdGhpcy53b3JkX2J1YmJsZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQgd29yZF9idWJibGVzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JV29yZEJ1YmJsZT59IHdvcmRfYnViYmxlc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQucHJvdG90eXBlLndvcmRfYnViYmxlcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5NZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWR9IG0gTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ud29yZF9idWJibGVzICE9IG51bGwgJiYgbS53b3JkX2J1YmJsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLndvcmRfYnViYmxlcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5Xb3JkQnViYmxlLmVuY29kZShtLndvcmRfYnViYmxlc1tpXSwgdy51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZH0gTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0ud29yZF9idWJibGVzICYmIG0ud29yZF9idWJibGVzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLndvcmRfYnViYmxlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBtLndvcmRfYnViYmxlcy5wdXNoKCRyb290LmZhcm0uV29yZEJ1YmJsZS5kZWNvZGUociwgci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWR9IE1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZFxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5NZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZCgpO1xuICAgICAgICAgICAgaWYgKGQud29yZF9idWJibGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQud29yZF9idWJibGVzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkLndvcmRfYnViYmxlczogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS53b3JkX2J1YmJsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQud29yZF9idWJibGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC53b3JkX2J1YmJsZXNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5NZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQud29yZF9idWJibGVzOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIG0ud29yZF9idWJibGVzW2ldID0gJHJvb3QuZmFybS5Xb3JkQnViYmxlLmZyb21PYmplY3QoZC53b3JkX2J1YmJsZXNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZH0gbSBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWRcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlV29yZEJ1YmJsZUNoYW5nZWQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC53b3JkX2J1YmJsZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLndvcmRfYnViYmxlcyAmJiBtLndvcmRfYnViYmxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLndvcmRfYnViYmxlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS53b3JkX2J1YmJsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC53b3JkX2J1YmJsZXNbal0gPSAkcm9vdC5mYXJtLldvcmRCdWJibGUudG9PYmplY3QobS53b3JkX2J1YmJsZXNbal0sIG8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VXb3JkQnViYmxlQ2hhbmdlZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTWVzc2FnZVdvcmRCdWJibGVDaGFuZ2VkO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTWVzc2FnZVBsYXllckluZm8uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSU1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtuaWNrX25hbWVdIE1lc3NhZ2VQbGF5ZXJJbmZvIG5pY2tfbmFtZVxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdXNlcl9jb2RlXSBNZXNzYWdlUGxheWVySW5mbyB1c2VyX2NvZGVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2F2YXRhcl9pZF0gTWVzc2FnZVBsYXllckluZm8gYXZhdGFyX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjb2luXSBNZXNzYWdlUGxheWVySW5mbyBjb2luXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjcnlzdGFsXSBNZXNzYWdlUGxheWVySW5mbyBjcnlzdGFsXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtoZWFydF0gTWVzc2FnZVBsYXllckluZm8gaGVhcnRcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3Nsb2dhbl0gTWVzc2FnZVBsYXllckluZm8gc2xvZ2FuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbaXNNYWlsXSBNZXNzYWdlUGxheWVySW5mbyBpc01haWxcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWVzc2FnZVBsYXllckluZm8uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE1lc3NhZ2VQbGF5ZXJJbmZvLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJTWVzc2FnZVBsYXllckluZm9cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWVzc2FnZVBsYXllckluZm89fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE1lc3NhZ2VQbGF5ZXJJbmZvKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlUGxheWVySW5mbyBuaWNrX25hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbmlja19uYW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVBsYXllckluZm8ucHJvdG90eXBlLm5pY2tfbmFtZSA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VQbGF5ZXJJbmZvIHVzZXJfY29kZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSB1c2VyX2NvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVBsYXllckluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGxheWVySW5mby5wcm90b3R5cGUudXNlcl9jb2RlID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZVBsYXllckluZm8gYXZhdGFyX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGF2YXRhcl9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUGxheWVySW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQbGF5ZXJJbmZvLnByb3RvdHlwZS5hdmF0YXJfaWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlUGxheWVySW5mbyBjb2luLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGNvaW5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVBsYXllckluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGxheWVySW5mby5wcm90b3R5cGUuY29pbiA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VQbGF5ZXJJbmZvIGNyeXN0YWwuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gY3J5c3RhbFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUGxheWVySW5mb1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQbGF5ZXJJbmZvLnByb3RvdHlwZS5jcnlzdGFsID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZVBsYXllckluZm8gaGVhcnQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gaGVhcnRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVBsYXllckluZm9cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGxheWVySW5mby5wcm90b3R5cGUuaGVhcnQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlUGxheWVySW5mbyBzbG9nYW4uXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gc2xvZ2FuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVBsYXllckluZm8ucHJvdG90eXBlLnNsb2dhbiA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VQbGF5ZXJJbmZvIGlzTWFpbC5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gaXNNYWlsXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVBsYXllckluZm8ucHJvdG90eXBlLmlzTWFpbCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTWVzc2FnZVBsYXllckluZm8gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5NZXNzYWdlUGxheWVySW5mby52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUGxheWVySW5mb1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWVzc2FnZVBsYXllckluZm99IG0gTWVzc2FnZVBsYXllckluZm8gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVBsYXllckluZm8uZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLm5pY2tfbmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibmlja19uYW1lXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5zdHJpbmcobS5uaWNrX25hbWUpO1xuICAgICAgICAgICAgaWYgKG0udXNlcl9jb2RlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ1c2VyX2NvZGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTgpLnN0cmluZyhtLnVzZXJfY29kZSk7XG4gICAgICAgICAgICBpZiAobS5hdmF0YXJfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImF2YXRhcl9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50MzIobS5hdmF0YXJfaWQpO1xuICAgICAgICAgICAgaWYgKG0uY29pbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiY29pblwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50MzIobS5jb2luKTtcbiAgICAgICAgICAgIGlmIChtLmNyeXN0YWwgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNyeXN0YWxcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDApLmludDMyKG0uY3J5c3RhbCk7XG4gICAgICAgICAgICBpZiAobS5oZWFydCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaGVhcnRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDgpLmludDMyKG0uaGVhcnQpO1xuICAgICAgICAgICAgaWYgKG0uc2xvZ2FuICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzbG9nYW5cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoNTgpLnN0cmluZyhtLnNsb2dhbik7XG4gICAgICAgICAgICBpZiAobS5pc01haWwgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlzTWFpbFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig2NCkuYm9vbChtLmlzTWFpbCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE1lc3NhZ2VQbGF5ZXJJbmZvIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVBsYXllckluZm9cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlUGxheWVySW5mb30gTWVzc2FnZVBsYXllckluZm9cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGxheWVySW5mby5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5NZXNzYWdlUGxheWVySW5mbygpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0ubmlja19uYW1lID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLnVzZXJfY29kZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5hdmF0YXJfaWQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS5jb2luID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG0uY3J5c3RhbCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtLmhlYXJ0ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIG0uc2xvZ2FuID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBtLmlzTWFpbCA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBNZXNzYWdlUGxheWVySW5mbyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWVzc2FnZVBsYXllckluZm99IE1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGxheWVySW5mby5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uTWVzc2FnZVBsYXllckluZm8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvKCk7XG4gICAgICAgICAgICBpZiAoZC5uaWNrX25hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0ubmlja19uYW1lID0gU3RyaW5nKGQubmlja19uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnVzZXJfY29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS51c2VyX2NvZGUgPSBTdHJpbmcoZC51c2VyX2NvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuYXZhdGFyX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmF2YXRhcl9pZCA9IGQuYXZhdGFyX2lkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNvaW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY29pbiA9IGQuY29pbiB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5jcnlzdGFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmNyeXN0YWwgPSBkLmNyeXN0YWwgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuaGVhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaGVhcnQgPSBkLmhlYXJ0IHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnNsb2dhbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5zbG9nYW4gPSBTdHJpbmcoZC5zbG9nYW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuaXNNYWlsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmlzTWFpbCA9IEJvb2xlYW4oZC5pc01haWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIE1lc3NhZ2VQbGF5ZXJJbmZvIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvfSBtIE1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVBsYXllckluZm8udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5uaWNrX25hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGQudXNlcl9jb2RlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkLmF2YXRhcl9pZCA9IDA7XG4gICAgICAgICAgICAgICAgZC5jb2luID0gMDtcbiAgICAgICAgICAgICAgICBkLmNyeXN0YWwgPSAwO1xuICAgICAgICAgICAgICAgIGQuaGVhcnQgPSAwO1xuICAgICAgICAgICAgICAgIGQuc2xvZ2FuID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkLmlzTWFpbCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubmlja19uYW1lICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm5pY2tfbmFtZVwiKSkge1xuICAgICAgICAgICAgICAgIGQubmlja19uYW1lID0gbS5uaWNrX25hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS51c2VyX2NvZGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidXNlcl9jb2RlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC51c2VyX2NvZGUgPSBtLnVzZXJfY29kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmF2YXRhcl9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJhdmF0YXJfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmF2YXRhcl9pZCA9IG0uYXZhdGFyX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY29pbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjb2luXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5jb2luID0gbS5jb2luO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY3J5c3RhbCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJjcnlzdGFsXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5jcnlzdGFsID0gbS5jcnlzdGFsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaGVhcnQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaGVhcnRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmhlYXJ0ID0gbS5oZWFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnNsb2dhbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzbG9nYW5cIikpIHtcbiAgICAgICAgICAgICAgICBkLnNsb2dhbiA9IG0uc2xvZ2FuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaXNNYWlsICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlzTWFpbFwiKSkge1xuICAgICAgICAgICAgICAgIGQuaXNNYWlsID0gbS5pc01haWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBNZXNzYWdlUGxheWVySW5mbyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQbGF5ZXJJbmZvXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGxheWVySW5mby5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIE1lc3NhZ2VQbGF5ZXJJbmZvO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLldvcmRCdWJibGUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBXb3JkQnViYmxlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElXb3JkQnViYmxlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFt3b3JkX2lkXSBXb3JkQnViYmxlIHdvcmRfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbYnVpbGRpbmdfaWRdIFdvcmRCdWJibGUgYnVpbGRpbmdfaWRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgV29yZEJ1YmJsZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgV29yZEJ1YmJsZS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVdvcmRCdWJibGVcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JV29yZEJ1YmJsZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gV29yZEJ1YmJsZShwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogV29yZEJ1YmJsZSB3b3JkX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHdvcmRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEJ1YmJsZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFdvcmRCdWJibGUucHJvdG90eXBlLndvcmRfaWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXb3JkQnViYmxlIGJ1aWxkaW5nX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gYnVpbGRpbmdfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uV29yZEJ1YmJsZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFdvcmRCdWJibGUucHJvdG90eXBlLmJ1aWxkaW5nX2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBXb3JkQnViYmxlIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uV29yZEJ1YmJsZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Xb3JkQnViYmxlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklXb3JkQnViYmxlfSBtIFdvcmRCdWJibGUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEJ1YmJsZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ud29yZF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwid29yZF9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLndvcmRfaWQpO1xuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImJ1aWxkaW5nX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLmJ1aWxkaW5nX2lkKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgV29yZEJ1YmJsZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLldvcmRCdWJibGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Xb3JkQnViYmxlfSBXb3JkQnViYmxlXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgV29yZEJ1YmJsZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5Xb3JkQnViYmxlKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS53b3JkX2lkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFdvcmRCdWJibGUgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Xb3JkQnViYmxlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uV29yZEJ1YmJsZX0gV29yZEJ1YmJsZVxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEJ1YmJsZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uV29yZEJ1YmJsZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uV29yZEJ1YmJsZSgpO1xuICAgICAgICAgICAgaWYgKGQud29yZF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS53b3JkX2lkID0gZC53b3JkX2lkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmJ1aWxkaW5nX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uYnVpbGRpbmdfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmJ1aWxkaW5nX2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5idWlsZGluZ19pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ19pZCA9IHBhcnNlSW50KGQuYnVpbGRpbmdfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5idWlsZGluZ19pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ19pZCA9IGQuYnVpbGRpbmdfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYnVpbGRpbmdfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5idWlsZGluZ19pZC5sb3cgPj4+IDAsIGQuYnVpbGRpbmdfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBXb3JkQnViYmxlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLldvcmRCdWJibGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uV29yZEJ1YmJsZX0gbSBXb3JkQnViYmxlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgV29yZEJ1YmJsZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLndvcmRfaWQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5idWlsZGluZ19pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLndvcmRfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwid29yZF9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQud29yZF9pZCA9IG0ud29yZF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJ1aWxkaW5nX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImJ1aWxkaW5nX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmJ1aWxkaW5nX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uYnVpbGRpbmdfaWQpIDogbS5idWlsZGluZ19pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uYnVpbGRpbmdfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uYnVpbGRpbmdfaWQubG93ID4+PiAwLCBtLmJ1aWxkaW5nX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmJ1aWxkaW5nX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgV29yZEJ1YmJsZSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLldvcmRCdWJibGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFdvcmRCdWJibGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBXb3JkQnViYmxlO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVdvcmRCdWJibGVFbmQgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFXb3JkQnViYmxlRW5kLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFXb3JkQnViYmxlRW5kXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFt3b3JkX2lkXSBSZXFXb3JkQnViYmxlRW5kIHdvcmRfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbYnVpbGRpbmdfaWRdIFJlcVdvcmRCdWJibGVFbmQgYnVpbGRpbmdfaWRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxV29yZEJ1YmJsZUVuZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxV29yZEJ1YmJsZUVuZC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcVdvcmRCdWJibGVFbmRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxV29yZEJ1YmJsZUVuZD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxV29yZEJ1YmJsZUVuZChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxV29yZEJ1YmJsZUVuZCB3b3JkX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHdvcmRfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxV29yZEJ1YmJsZUVuZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVdvcmRCdWJibGVFbmQucHJvdG90eXBlLndvcmRfaWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFXb3JkQnViYmxlRW5kIGJ1aWxkaW5nX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gYnVpbGRpbmdfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxV29yZEJ1YmJsZUVuZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVdvcmRCdWJibGVFbmQucHJvdG90eXBlLmJ1aWxkaW5nX2lkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFXb3JkQnViYmxlRW5kIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxV29yZEJ1YmJsZUVuZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFXb3JkQnViYmxlRW5kXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFXb3JkQnViYmxlRW5kfSBtIFJlcVdvcmRCdWJibGVFbmQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxV29yZEJ1YmJsZUVuZC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ud29yZF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwid29yZF9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLndvcmRfaWQpO1xuICAgICAgICAgICAgaWYgKG0uYnVpbGRpbmdfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImJ1aWxkaW5nX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQ2NChtLmJ1aWxkaW5nX2lkKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxV29yZEJ1YmJsZUVuZCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVdvcmRCdWJibGVFbmRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFXb3JkQnViYmxlRW5kfSBSZXFXb3JkQnViYmxlRW5kXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVxV29yZEJ1YmJsZUVuZC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFXb3JkQnViYmxlRW5kKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS53b3JkX2lkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcVdvcmRCdWJibGVFbmQgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFXb3JkQnViYmxlRW5kXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxV29yZEJ1YmJsZUVuZH0gUmVxV29yZEJ1YmJsZUVuZFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxV29yZEJ1YmJsZUVuZC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVxV29yZEJ1YmJsZUVuZClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVxV29yZEJ1YmJsZUVuZCgpO1xuICAgICAgICAgICAgaWYgKGQud29yZF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS53b3JkX2lkID0gZC53b3JkX2lkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmJ1aWxkaW5nX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uYnVpbGRpbmdfaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmJ1aWxkaW5nX2lkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5idWlsZGluZ19pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ19pZCA9IHBhcnNlSW50KGQuYnVpbGRpbmdfaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5idWlsZGluZ19pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5idWlsZGluZ19pZCA9IGQuYnVpbGRpbmdfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYnVpbGRpbmdfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uYnVpbGRpbmdfaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5idWlsZGluZ19pZC5sb3cgPj4+IDAsIGQuYnVpbGRpbmdfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFXb3JkQnViYmxlRW5kIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVdvcmRCdWJibGVFbmRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVxV29yZEJ1YmJsZUVuZH0gbSBSZXFXb3JkQnViYmxlRW5kXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxV29yZEJ1YmJsZUVuZC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLndvcmRfaWQgPSAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5idWlsZGluZ19pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLndvcmRfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwid29yZF9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQud29yZF9pZCA9IG0ud29yZF9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJ1aWxkaW5nX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImJ1aWxkaW5nX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmJ1aWxkaW5nX2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmJ1aWxkaW5nX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uYnVpbGRpbmdfaWQpIDogbS5idWlsZGluZ19pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuYnVpbGRpbmdfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uYnVpbGRpbmdfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uYnVpbGRpbmdfaWQubG93ID4+PiAwLCBtLmJ1aWxkaW5nX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmJ1aWxkaW5nX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxV29yZEJ1YmJsZUVuZCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVdvcmRCdWJibGVFbmRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVdvcmRCdWJibGVFbmQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFXb3JkQnViYmxlRW5kO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFVcGRhdGVCaWxsYm9hcmRzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFVcGRhdGVCaWxsYm9hcmRzXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtjb250ZW50XSBSZXFVcGRhdGVCaWxsYm9hcmRzIGNvbnRlbnRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxVXBkYXRlQmlsbGJvYXJkcy5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxVXBkYXRlQmlsbGJvYXJkcy5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcVVwZGF0ZUJpbGxib2FyZHNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVXBkYXRlQmlsbGJvYXJkcz19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxVXBkYXRlQmlsbGJvYXJkcyhwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxVXBkYXRlQmlsbGJvYXJkcyBjb250ZW50LlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGNvbnRlbnRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQmlsbGJvYXJkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZUJpbGxib2FyZHMucHJvdG90eXBlLmNvbnRlbnQgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxVXBkYXRlQmlsbGJvYXJkcyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQmlsbGJvYXJkc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxVXBkYXRlQmlsbGJvYXJkc30gbSBSZXFVcGRhdGVCaWxsYm9hcmRzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZUJpbGxib2FyZHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmNvbnRlbnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImNvbnRlbnRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTApLnN0cmluZyhtLmNvbnRlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFVcGRhdGVCaWxsYm9hcmRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQmlsbGJvYXJkc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHN9IFJlcVVwZGF0ZUJpbGxib2FyZHNcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVCaWxsYm9hcmRzLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHMoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmNvbnRlbnQgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXFVcGRhdGVCaWxsYm9hcmRzIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQmlsbGJvYXJkc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHN9IFJlcVVwZGF0ZUJpbGxib2FyZHNcbiAgICAgICAgICovXG4gICAgICAgIFJlcVVwZGF0ZUJpbGxib2FyZHMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVVwZGF0ZUJpbGxib2FyZHMoKTtcbiAgICAgICAgICAgIGlmIChkLmNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY29udGVudCA9IFN0cmluZyhkLmNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcVVwZGF0ZUJpbGxib2FyZHMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQmlsbGJvYXJkc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFVcGRhdGVCaWxsYm9hcmRzfSBtIFJlcVVwZGF0ZUJpbGxib2FyZHNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFVcGRhdGVCaWxsYm9hcmRzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuY29udGVudCA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jb250ZW50ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNvbnRlbnRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvbnRlbnQgPSBtLmNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFVcGRhdGVCaWxsYm9hcmRzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxVXBkYXRlQmlsbGJvYXJkc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxVXBkYXRlQmlsbGJvYXJkcy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcVVwZGF0ZUJpbGxib2FyZHM7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcE1haWxMaXN0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcE1haWxMaXN0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwTWFpbExpc3RcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48ZmFybS5JTWFpbExpc3RJdGVtPnxudWxsfSBbbWFpbHNdIFJlc3BNYWlsTGlzdCBtYWlsc1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwTWFpbExpc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BNYWlsTGlzdC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BNYWlsTGlzdFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwTWFpbExpc3Q9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BNYWlsTGlzdChwKSB7XG4gICAgICAgICAgICB0aGlzLm1haWxzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1haWxMaXN0IG1haWxzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48ZmFybS5JTWFpbExpc3RJdGVtPn0gbWFpbHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1haWxMaXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1haWxMaXN0LnByb3RvdHlwZS5tYWlscyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwTWFpbExpc3QgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwTWFpbExpc3QudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1haWxMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwTWFpbExpc3R9IG0gUmVzcE1haWxMaXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsTGlzdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ubWFpbHMgIT0gbnVsbCAmJiBtLm1haWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5tYWlscy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5NYWlsTGlzdEl0ZW0uZW5jb2RlKG0ubWFpbHNbaV0sIHcudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwTWFpbExpc3QgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFpbExpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwTWFpbExpc3R9IFJlc3BNYWlsTGlzdFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsTGlzdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwTWFpbExpc3QoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLm1haWxzICYmIG0ubWFpbHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubWFpbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbS5tYWlscy5wdXNoKCRyb290LmZhcm0uTWFpbExpc3RJdGVtLmRlY29kZShyLCByLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BNYWlsTGlzdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYWlsTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BNYWlsTGlzdH0gUmVzcE1haWxMaXN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWFpbExpc3QuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BNYWlsTGlzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcE1haWxMaXN0KCk7XG4gICAgICAgICAgICBpZiAoZC5tYWlscykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLm1haWxzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVzcE1haWxMaXN0Lm1haWxzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLm1haWxzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLm1haWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5tYWlsc1tpXSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BNYWlsTGlzdC5tYWlsczogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLm1haWxzW2ldID0gJHJvb3QuZmFybS5NYWlsTGlzdEl0ZW0uZnJvbU9iamVjdChkLm1haWxzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcE1haWxMaXN0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYWlsTGlzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXNwTWFpbExpc3R9IG0gUmVzcE1haWxMaXN0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1haWxMaXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5hcnJheXMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQubWFpbHMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1haWxzICYmIG0ubWFpbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5tYWlscyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5tYWlscy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLm1haWxzW2pdID0gJHJvb3QuZmFybS5NYWlsTGlzdEl0ZW0udG9PYmplY3QobS5tYWlsc1tqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcE1haWxMaXN0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1haWxMaXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwTWFpbExpc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwTWFpbExpc3Q7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uTWFpbExpc3RJdGVtID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTWFpbExpc3RJdGVtLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElNYWlsTGlzdEl0ZW1cbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbaWRdIE1haWxMaXN0SXRlbSBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge2Zhcm0uTWFpbFR5cGV8bnVsbH0gW3R5cGVdIE1haWxMaXN0SXRlbSB0eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3NlbmRlcl91aWRdIE1haWxMaXN0SXRlbSBzZW5kZXJfdWlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt0aXRsZV0gTWFpbExpc3RJdGVtIHRpdGxlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7ZmFybS5NYWlsU3RhdGV8bnVsbH0gW3N0YXR1c10gTWFpbExpc3RJdGVtIHN0YXR1c1xuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNYWlsTGlzdEl0ZW0uXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE1haWxMaXN0SXRlbS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSU1haWxMaXN0SXRlbVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNYWlsTGlzdEl0ZW09fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE1haWxMaXN0SXRlbShwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFpbExpc3RJdGVtIGlkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFpbExpc3RJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWFpbExpc3RJdGVtLnByb3RvdHlwZS5pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWlsTGlzdEl0ZW0gdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5NYWlsVHlwZX0gdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYWlsTGlzdEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNYWlsTGlzdEl0ZW0ucHJvdG90eXBlLnR5cGUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWlsTGlzdEl0ZW0gc2VuZGVyX3VpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IHNlbmRlcl91aWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFpbExpc3RJdGVtXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWFpbExpc3RJdGVtLnByb3RvdHlwZS5zZW5kZXJfdWlkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1haWxMaXN0SXRlbSB0aXRsZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSB0aXRsZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYWlsTGlzdEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNYWlsTGlzdEl0ZW0ucHJvdG90eXBlLnRpdGxlID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWFpbExpc3RJdGVtIHN0YXR1cy5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5NYWlsU3RhdGV9IHN0YXR1c1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NYWlsTGlzdEl0ZW1cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNYWlsTGlzdEl0ZW0ucHJvdG90eXBlLnN0YXR1cyA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBNYWlsTGlzdEl0ZW0gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5NYWlsTGlzdEl0ZW0udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFpbExpc3RJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNYWlsTGlzdEl0ZW19IG0gTWFpbExpc3RJdGVtIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIE1haWxMaXN0SXRlbS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50MzIobS50eXBlKTtcbiAgICAgICAgICAgIGlmIChtLnNlbmRlcl91aWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInNlbmRlcl91aWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDY0KG0uc2VuZGVyX3VpZCk7XG4gICAgICAgICAgICBpZiAobS50aXRsZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidGl0bGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzQpLnN0cmluZyhtLnRpdGxlKTtcbiAgICAgICAgICAgIGlmIChtLnN0YXR1cyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic3RhdHVzXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDQwKS5pbnQzMihtLnN0YXR1cyk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE1haWxMaXN0SXRlbSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1haWxMaXN0SXRlbVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLk1haWxMaXN0SXRlbX0gTWFpbExpc3RJdGVtXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgTWFpbExpc3RJdGVtLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLk1haWxMaXN0SXRlbSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS50eXBlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0uc2VuZGVyX3VpZCA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnRpdGxlID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtLnN0YXR1cyA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgTWFpbExpc3RJdGVtIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFpbExpc3RJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWFpbExpc3RJdGVtfSBNYWlsTGlzdEl0ZW1cbiAgICAgICAgICovXG4gICAgICAgIE1haWxMaXN0SXRlbS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uTWFpbExpc3RJdGVtKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5NYWlsTGlzdEl0ZW0oKTtcbiAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiU1lTXCI6XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgbS50eXBlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJOUENcIjpcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBtLnR5cGUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlBsYXllclwiOlxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIG0udHlwZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5zZW5kZXJfdWlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uc2VuZGVyX3VpZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuc2VuZGVyX3VpZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc2VuZGVyX3VpZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5zZW5kZXJfdWlkID0gcGFyc2VJbnQoZC5zZW5kZXJfdWlkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuc2VuZGVyX3VpZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5zZW5kZXJfdWlkID0gZC5zZW5kZXJfdWlkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnNlbmRlcl91aWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uc2VuZGVyX3VpZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLnNlbmRlcl91aWQubG93ID4+PiAwLCBkLnNlbmRlcl91aWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRpdGxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnRpdGxlID0gU3RyaW5nKGQudGl0bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkLnN0YXR1cykge1xuICAgICAgICAgICAgY2FzZSBcIk5vX1JlYWRcIjpcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBtLnN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiUmVhZFwiOlxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIG0uc3RhdHVzID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNYWlsTGlzdEl0ZW0gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWFpbExpc3RJdGVtXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLk1haWxMaXN0SXRlbX0gbSBNYWlsTGlzdEl0ZW1cbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNYWlsTGlzdEl0ZW0udG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQudHlwZSA9IG8uZW51bXMgPT09IFN0cmluZyA/IFwiU1lTXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLnNlbmRlcl91aWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLnNlbmRlcl91aWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC50aXRsZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC5zdGF0dXMgPSBvLmVudW1zID09PSBTdHJpbmcgPyBcIk5vX1JlYWRcIiA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtLmlkKSA6IG0uaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmlkLmxvdyA+Pj4gMCwgbS5pZC5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidHlwZVwiKSkge1xuICAgICAgICAgICAgICAgIGQudHlwZSA9IG8uZW51bXMgPT09IFN0cmluZyA/ICRyb290LmZhcm0uTWFpbFR5cGVbbS50eXBlXSA6IG0udHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnNlbmRlcl91aWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic2VuZGVyX3VpZFwiKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5zZW5kZXJfdWlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLnNlbmRlcl91aWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5zZW5kZXJfdWlkKSA6IG0uc2VuZGVyX3VpZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuc2VuZGVyX3VpZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5zZW5kZXJfdWlkKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLnNlbmRlcl91aWQubG93ID4+PiAwLCBtLnNlbmRlcl91aWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uc2VuZGVyX3VpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRpdGxlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRpdGxlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50aXRsZSA9IG0udGl0bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGF0dXMgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic3RhdHVzXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5zdGF0dXMgPSBvLmVudW1zID09PSBTdHJpbmcgPyAkcm9vdC5mYXJtLk1haWxTdGF0ZVttLnN0YXR1c10gOiBtLnN0YXR1cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1haWxMaXN0SXRlbSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1haWxMaXN0SXRlbVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTWFpbExpc3RJdGVtLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTWFpbExpc3RJdGVtO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BNYWlsRGV0YWlsID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcE1haWxEZXRhaWwuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2lkXSBSZXNwTWFpbERldGFpbCBpZFxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbY29udGVudF0gUmVzcE1haWxEZXRhaWwgY29udGVudFxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxmYXJtLklBbm5leD58bnVsbH0gW2FubmV4ZXNdIFJlc3BNYWlsRGV0YWlsIGFubmV4ZXNcbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLk1haWxUYXBUeXBlfG51bGx9IFt0eXBlXSBSZXNwTWFpbERldGFpbCB0eXBlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BNYWlsRGV0YWlsLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwTWFpbERldGFpbC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BNYWlsRGV0YWlsPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwTWFpbERldGFpbChwKSB7XG4gICAgICAgICAgICB0aGlzLmFubmV4ZXMgPSBbXTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwTWFpbERldGFpbCBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1haWxEZXRhaWwucHJvdG90eXBlLmlkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BNYWlsRGV0YWlsIGNvbnRlbnQuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gY29udGVudFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFpbERldGFpbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsRGV0YWlsLnByb3RvdHlwZS5jb250ZW50ID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1haWxEZXRhaWwgYW5uZXhlcy5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGZhcm0uSUFubmV4Pn0gYW5uZXhlc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFpbERldGFpbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsRGV0YWlsLnByb3RvdHlwZS5hbm5leGVzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcE1haWxEZXRhaWwgdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5NYWlsVGFwVHlwZX0gdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFpbERldGFpbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsRGV0YWlsLnByb3RvdHlwZS50eXBlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BNYWlsRGV0YWlsIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVzcE1haWxEZXRhaWwudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1haWxEZXRhaWxcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BNYWlsRGV0YWlsfSBtIFJlc3BNYWlsRGV0YWlsIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsRGV0YWlsLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5pZCk7XG4gICAgICAgICAgICBpZiAobS5jb250ZW50ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjb250ZW50XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS5jb250ZW50KTtcbiAgICAgICAgICAgIGlmIChtLmFubmV4ZXMgIT0gbnVsbCAmJiBtLmFubmV4ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLmFubmV4ZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICRyb290LmZhcm0uQW5uZXguZW5jb2RlKG0uYW5uZXhlc1tpXSwgdy51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50eXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ0eXBlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQzMihtLnR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwTWFpbERldGFpbCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcE1haWxEZXRhaWx9IFJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1haWxEZXRhaWwuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcE1haWxEZXRhaWwoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uY29udGVudCA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5hbm5leGVzICYmIG0uYW5uZXhlcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5hbm5leGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0uYW5uZXhlcy5wdXNoKCRyb290LmZhcm0uQW5uZXguZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnR5cGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BNYWlsRGV0YWlsIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcE1haWxEZXRhaWxcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwTWFpbERldGFpbH0gUmVzcE1haWxEZXRhaWxcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BNYWlsRGV0YWlsLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXNwTWFpbERldGFpbClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcE1haWxEZXRhaWwoKTtcbiAgICAgICAgICAgIGlmIChkLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0uaWQgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmlkKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IHBhcnNlSW50KGQuaWQsIDEwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IGQuaWQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5pZC5sb3cgPj4+IDAsIGQuaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY29udGVudCA9IFN0cmluZyhkLmNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuYW5uZXhlcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmFubmV4ZXMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5SZXNwTWFpbERldGFpbC5hbm5leGVzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmFubmV4ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQuYW5uZXhlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuYW5uZXhlc1tpXSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlc3BNYWlsRGV0YWlsLmFubmV4ZXM6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbS5hbm5leGVzW2ldID0gJHJvb3QuZmFybS5Bbm5leC5mcm9tT2JqZWN0KGQuYW5uZXhlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJOb3RpZmljYXRpb25cIjpcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBtLnR5cGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkFubmV4ZXNcIjpcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBtLnR5cGUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BNYWlsRGV0YWlsIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BNYWlsRGV0YWlsfSBtIFJlc3BNYWlsRGV0YWlsXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1haWxEZXRhaWwudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5hbm5leGVzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgICAgICBkLmNvbnRlbnQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGQudHlwZSA9IG8uZW51bXMgPT09IFN0cmluZyA/IFwiTm90aWZpY2F0aW9uXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0uaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5pZCkgOiBtLmlkO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5pZC5sb3cgPj4+IDAsIG0uaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0uaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5jb250ZW50ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNvbnRlbnRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNvbnRlbnQgPSBtLmNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5hbm5leGVzICYmIG0uYW5uZXhlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmFubmV4ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0uYW5uZXhlcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLmFubmV4ZXNbal0gPSAkcm9vdC5mYXJtLkFubmV4LnRvT2JqZWN0KG0uYW5uZXhlc1tqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QuZmFybS5NYWlsVGFwVHlwZVttLnR5cGVdIDogbS50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcE1haWxEZXRhaWwgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwTWFpbERldGFpbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcE1haWxEZXRhaWwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwTWFpbERldGFpbDtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5Bbm5leCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhbiBBbm5leC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJQW5uZXhcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8TG9uZ3xudWxsfSBbYW5uZXhfaWRdIEFubmV4IGFubmV4X2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7ZmFybS5Bbm5leFN0YXRlfG51bGx9IFtzdGF0dXNdIEFubmV4IHN0YXR1c1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbbnVtXSBBbm5leCBudW1cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQW5uZXguXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhbiBBbm5leC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSUFubmV4XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUFubmV4PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBBbm5leChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQW5uZXggYW5uZXhfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBhbm5leF9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5Bbm5leFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEFubmV4LnByb3RvdHlwZS5hbm5leF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbm5leCBzdGF0dXMuXG4gICAgICAgICAqIEBtZW1iZXIge2Zhcm0uQW5uZXhTdGF0ZX0gc3RhdHVzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFubmV4XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgQW5uZXgucHJvdG90eXBlLnN0YXR1cyA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFubmV4IG51bS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBudW1cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQW5uZXhcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBBbm5leC5wcm90b3R5cGUubnVtID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEFubmV4IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uQW5uZXgudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQW5uZXhcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSUFubmV4fSBtIEFubmV4IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEFubmV4LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5hbm5leF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiYW5uZXhfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50NjQobS5hbm5leF9pZCk7XG4gICAgICAgICAgICBpZiAobS5zdGF0dXMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInN0YXR1c1wiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50MzIobS5zdGF0dXMpO1xuICAgICAgICAgICAgaWYgKG0ubnVtICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJudW1cIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDMyKG0ubnVtKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGFuIEFubmV4IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uQW5uZXhcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5Bbm5leH0gQW5uZXhcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBBbm5leC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5Bbm5leCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uYW5uZXhfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5zdGF0dXMgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5udW0gPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhbiBBbm5leCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFubmV4XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uQW5uZXh9IEFubmV4XG4gICAgICAgICAqL1xuICAgICAgICBBbm5leC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uQW5uZXgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLkFubmV4KCk7XG4gICAgICAgICAgICBpZiAoZC5hbm5leF9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmFubmV4X2lkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5hbm5leF9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYW5uZXhfaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uYW5uZXhfaWQgPSBwYXJzZUludChkLmFubmV4X2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYW5uZXhfaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uYW5uZXhfaWQgPSBkLmFubmV4X2lkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmFubmV4X2lkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmFubmV4X2lkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuYW5uZXhfaWQubG93ID4+PiAwLCBkLmFubmV4X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGQuc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFwiTm9fUmVjZWl2ZVwiOlxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIG0uc3RhdHVzID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJSZWNlaXZlZFwiOlxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIG0uc3RhdHVzID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm51bSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5udW0gPSBkLm51bSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGFuIEFubmV4IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFubmV4XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLkFubmV4fSBtIEFubmV4XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQW5uZXgudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuYW5uZXhfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmFubmV4X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQuc3RhdHVzID0gby5lbnVtcyA9PT0gU3RyaW5nID8gXCJOb19SZWNlaXZlXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQubnVtID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmFubmV4X2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImFubmV4X2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmFubmV4X2lkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmFubmV4X2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uYW5uZXhfaWQpIDogbS5hbm5leF9pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuYW5uZXhfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uYW5uZXhfaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uYW5uZXhfaWQubG93ID4+PiAwLCBtLmFubmV4X2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmFubmV4X2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3RhdHVzICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInN0YXR1c1wiKSkge1xuICAgICAgICAgICAgICAgIGQuc3RhdHVzID0gby5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QuZmFybS5Bbm5leFN0YXRlW20uc3RhdHVzXSA6IG0uc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubnVtICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm51bVwiKSkge1xuICAgICAgICAgICAgICAgIGQubnVtID0gbS5udW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBBbm5leCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLkFubmV4XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBBbm5leC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEFubmV4O1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlcVJlY2VpdmVBbm5leCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcVJlY2VpdmVBbm5leC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxUmVjZWl2ZUFubmV4XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcnxMb25nPnxudWxsfSBbYW5uZXhJRHNdIFJlcVJlY2VpdmVBbm5leCBhbm5leElEc1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFttYWlsX2lkXSBSZXFSZWNlaXZlQW5uZXggbWFpbF9pZFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXFSZWNlaXZlQW5uZXguXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcVJlY2VpdmVBbm5leC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcVJlY2VpdmVBbm5leFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFSZWNlaXZlQW5uZXg9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlcVJlY2VpdmVBbm5leChwKSB7XG4gICAgICAgICAgICB0aGlzLmFubmV4SURzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxUmVjZWl2ZUFubmV4IGFubmV4SURzLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48bnVtYmVyfExvbmc+fSBhbm5leElEc1xuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFSZWNlaXZlQW5uZXhcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFSZWNlaXZlQW5uZXgucHJvdG90eXBlLmFubmV4SURzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxUmVjZWl2ZUFubmV4IG1haWxfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcnxMb25nfSBtYWlsX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVJlY2VpdmVBbm5leFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVJlY2VpdmVBbm5leC5wcm90b3R5cGUubWFpbF9pZCA9ICR1dGlsLkxvbmcgPyAkdXRpbC5Mb25nLmZyb21CaXRzKDAsMCxmYWxzZSkgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxUmVjZWl2ZUFubmV4IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxUmVjZWl2ZUFubmV4LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVJlY2VpdmVBbm5leFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxUmVjZWl2ZUFubmV4fSBtIFJlcVJlY2VpdmVBbm5leCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFSZWNlaXZlQW5uZXguZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmFubmV4SURzICE9IG51bGwgJiYgbS5hbm5leElEcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxMCkuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5hbm5leElEcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgdy5pbnQ2NChtLmFubmV4SURzW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubWFpbF9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWFpbF9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50NjQobS5tYWlsX2lkKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxUmVjZWl2ZUFubmV4IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUmVjZWl2ZUFubmV4XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxUmVjZWl2ZUFubmV4fSBSZXFSZWNlaXZlQW5uZXhcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFSZWNlaXZlQW5uZXguZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVxUmVjZWl2ZUFubmV4KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5hbm5leElEcyAmJiBtLmFubmV4SURzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmFubmV4SURzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSByLnVpbnQzMigpICsgci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmFubmV4SURzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmFubmV4SURzLnB1c2goci5pbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLm1haWxfaWQgPSByLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcVJlY2VpdmVBbm5leCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVJlY2VpdmVBbm5leFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVJlY2VpdmVBbm5leH0gUmVxUmVjZWl2ZUFubmV4XG4gICAgICAgICAqL1xuICAgICAgICBSZXFSZWNlaXZlQW5uZXguZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlcVJlY2VpdmVBbm5leClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVxUmVjZWl2ZUFubmV4KCk7XG4gICAgICAgICAgICBpZiAoZC5hbm5leElEcykge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkLmFubmV4SURzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUmVxUmVjZWl2ZUFubmV4LmFubmV4SURzOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmFubmV4SURzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmFubmV4SURzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAgICAgKG0uYW5uZXhJRHNbaV0gPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLmFubmV4SURzW2ldKSkudW5zaWduZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuYW5uZXhJRHNbaV0gPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmFubmV4SURzW2ldID0gcGFyc2VJbnQoZC5hbm5leElEc1tpXSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5hbm5leElEc1tpXSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYW5uZXhJRHNbaV0gPSBkLmFubmV4SURzW2ldO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5hbm5leElEc1tpXSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYW5uZXhJRHNbaV0gPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5hbm5leElEc1tpXS5sb3cgPj4+IDAsIGQuYW5uZXhJRHNbaV0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tYWlsX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgKG0ubWFpbF9pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubWFpbF9pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWFpbF9pZCA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tYWlsX2lkID0gcGFyc2VJbnQoZC5tYWlsX2lkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQubWFpbF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgbS5tYWlsX2lkID0gZC5tYWlsX2lkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLm1haWxfaWQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIG0ubWFpbF9pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLm1haWxfaWQubG93ID4+PiAwLCBkLm1haWxfaWQuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFSZWNlaXZlQW5uZXggbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUmVjZWl2ZUFubmV4XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlcVJlY2VpdmVBbm5leH0gbSBSZXFSZWNlaXZlQW5uZXhcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFSZWNlaXZlQW5uZXgudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5hbm5leElEcyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyAkdXRpbC5Mb25nKDAsIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZC5tYWlsX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5tYWlsX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYW5uZXhJRHMgJiYgbS5hbm5leElEcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmFubmV4SURzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmFubmV4SURzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbS5hbm5leElEc1tqXSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuYW5uZXhJRHNbal0gPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5hbm5leElEc1tqXSkgOiBtLmFubmV4SURzW2pdO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBkLmFubmV4SURzW2pdID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLmFubmV4SURzW2pdKSA6IG8ubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtLmFubmV4SURzW2pdLmxvdyA+Pj4gMCwgbS5hbm5leElEc1tqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5hbm5leElEc1tqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tYWlsX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcIm1haWxfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubWFpbF9pZCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgZC5tYWlsX2lkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0ubWFpbF9pZCkgOiBtLm1haWxfaWQ7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLm1haWxfaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0ubWFpbF9pZCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5tYWlsX2lkLmxvdyA+Pj4gMCwgbS5tYWlsX2lkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLm1haWxfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXFSZWNlaXZlQW5uZXggdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFSZWNlaXZlQW5uZXhcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVJlY2VpdmVBbm5leC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcVJlY2VpdmVBbm5leDtcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogUXVlc3RTdGF0ZSBlbnVtLlxuICAgICAqIEBuYW1lIGZhcm0uUXVlc3RTdGF0ZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFBlbmRpbmc9MCBQZW5kaW5nIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFVubG9ja2VkPTEgVW5sb2NrZWQgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gSW5wcm9ncmVzcz0yIElucHJvZ3Jlc3MgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gQ29tcGxldGU9MyBDb21wbGV0ZSB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBDYW5jZWw9NCBDYW5jZWwgdmFsdWVcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gRG9uZT01IERvbmUgdmFsdWVcbiAgICAgKi9cbiAgICBmYXJtLlF1ZXN0U3RhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZXNCeUlkID0ge30sIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUodmFsdWVzQnlJZCk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJQZW5kaW5nXCJdID0gMDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMV0gPSBcIlVubG9ja2VkXCJdID0gMTtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMl0gPSBcIklucHJvZ3Jlc3NcIl0gPSAyO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFszXSA9IFwiQ29tcGxldGVcIl0gPSAzO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs0XSA9IFwiQ2FuY2VsXCJdID0gNDtcbiAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNV0gPSBcIkRvbmVcIl0gPSA1O1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBEaWFsb2dTdGFnZVR5cGUgZW51bS5cbiAgICAgKiBAbmFtZSBmYXJtLkRpYWxvZ1N0YWdlVHlwZVxuICAgICAqIEBlbnVtIHtudW1iZXJ9XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IE5QQ0RpYWxvZz0wIE5QQ0RpYWxvZyB2YWx1ZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQaG9uZURpYWxvZz0xIFBob25lRGlhbG9nIHZhbHVlXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFF1ZXN0Qm9hcmREaWFsb2c9MiBRdWVzdEJvYXJkRGlhbG9nIHZhbHVlXG4gICAgICovXG4gICAgZmFybS5EaWFsb2dTdGFnZVR5cGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZXNCeUlkID0ge30sIHZhbHVlcyA9IE9iamVjdC5jcmVhdGUodmFsdWVzQnlJZCk7XG4gICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJOUENEaWFsb2dcIl0gPSAwO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsxXSA9IFwiUGhvbmVEaWFsb2dcIl0gPSAxO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFsyXSA9IFwiUXVlc3RCb2FyZERpYWxvZ1wiXSA9IDI7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uTWVzc2FnZVBob25lQ2FsbCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIE1lc3NhZ2VQaG9uZUNhbGwuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSU1lc3NhZ2VQaG9uZUNhbGxcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2NoYXJfY29uZmlnX2lkXSBNZXNzYWdlUGhvbmVDYWxsIGNoYXJfY29uZmlnX2lkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtkbGdfc3RhZ2VfaWRdIE1lc3NhZ2VQaG9uZUNhbGwgZGxnX3N0YWdlX2lkXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IE1lc3NhZ2VQaG9uZUNhbGwuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE1lc3NhZ2VQaG9uZUNhbGwuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNZXNzYWdlUGhvbmVDYWxsXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSU1lc3NhZ2VQaG9uZUNhbGw9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE1lc3NhZ2VQaG9uZUNhbGwocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VQaG9uZUNhbGwgY2hhcl9jb25maWdfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gY2hhcl9jb25maWdfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVBob25lQ2FsbFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQaG9uZUNhbGwucHJvdG90eXBlLmNoYXJfY29uZmlnX2lkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZVBob25lQ2FsbCBkbGdfc3RhZ2VfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gZGxnX3N0YWdlX2lkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQaG9uZUNhbGxcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUGhvbmVDYWxsLnByb3RvdHlwZS5kbGdfc3RhZ2VfaWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTWVzc2FnZVBob25lQ2FsbCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLk1lc3NhZ2VQaG9uZUNhbGwudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVBob25lQ2FsbFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWVzc2FnZVBob25lQ2FsbH0gbSBNZXNzYWdlUGhvbmVDYWxsIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQaG9uZUNhbGwuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmNoYXJfY29uZmlnX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjaGFyX2NvbmZpZ19pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmNoYXJfY29uZmlnX2lkKTtcbiAgICAgICAgICAgIGlmIChtLmRsZ19zdGFnZV9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZGxnX3N0YWdlX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmRsZ19zdGFnZV9pZCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE1lc3NhZ2VQaG9uZUNhbGwgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUGhvbmVDYWxsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWVzc2FnZVBob25lQ2FsbH0gTWVzc2FnZVBob25lQ2FsbFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQaG9uZUNhbGwuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uTWVzc2FnZVBob25lQ2FsbCgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uY2hhcl9jb25maWdfaWQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5kbGdfc3RhZ2VfaWQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIE1lc3NhZ2VQaG9uZUNhbGwgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUGhvbmVDYWxsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWVzc2FnZVBob25lQ2FsbH0gTWVzc2FnZVBob25lQ2FsbFxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVBob25lQ2FsbC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uTWVzc2FnZVBob25lQ2FsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uTWVzc2FnZVBob25lQ2FsbCgpO1xuICAgICAgICAgICAgaWYgKGQuY2hhcl9jb25maWdfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY2hhcl9jb25maWdfaWQgPSBkLmNoYXJfY29uZmlnX2lkIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmRsZ19zdGFnZV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5kbGdfc3RhZ2VfaWQgPSBkLmRsZ19zdGFnZV9pZCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgTWVzc2FnZVBob25lQ2FsbCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUGhvbmVDYWxsXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLk1lc3NhZ2VQaG9uZUNhbGx9IG0gTWVzc2FnZVBob25lQ2FsbFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQaG9uZUNhbGwudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5jaGFyX2NvbmZpZ19pZCA9IDA7XG4gICAgICAgICAgICAgICAgZC5kbGdfc3RhZ2VfaWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY2hhcl9jb25maWdfaWQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiY2hhcl9jb25maWdfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmNoYXJfY29uZmlnX2lkID0gbS5jaGFyX2NvbmZpZ19pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmRsZ19zdGFnZV9pZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkbGdfc3RhZ2VfaWRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmRsZ19zdGFnZV9pZCA9IG0uZGxnX3N0YWdlX2lkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgTWVzc2FnZVBob25lQ2FsbCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VQaG9uZUNhbGxcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VQaG9uZUNhbGwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBNZXNzYWdlUGhvbmVDYWxsO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlF1ZXN0RGF0YSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFF1ZXN0RGF0YS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUXVlc3REYXRhXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2lkXSBRdWVzdERhdGEgaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2NvbmZpZ19pZF0gUXVlc3REYXRhIGNvbmZpZ19pZFxuICAgICAgICAgKiBAcHJvcGVydHkge2Zhcm0uUXVlc3RTdGF0ZXxudWxsfSBbc3RhdGVdIFF1ZXN0RGF0YSBzdGF0ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxMb25nfG51bGx9IFtsZWZ0X2R1cl0gUXVlc3REYXRhIGxlZnRfZHVyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPG51bWJlcj58bnVsbH0gW3Rhc2tfZGF0YV0gUXVlc3REYXRhIHRhc2tfZGF0YVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBRdWVzdERhdGEuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFF1ZXN0RGF0YS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVF1ZXN0RGF0YVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklRdWVzdERhdGE9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFF1ZXN0RGF0YShwKSB7XG4gICAgICAgICAgICB0aGlzLnRhc2tfZGF0YSA9IFtdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXN0RGF0YSBpZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlF1ZXN0RGF0YVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXN0RGF0YS5wcm90b3R5cGUuaWQgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUXVlc3REYXRhIGNvbmZpZ19pZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBjb25maWdfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUXVlc3REYXRhXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUXVlc3REYXRhLnByb3RvdHlwZS5jb25maWdfaWQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBRdWVzdERhdGEgc3RhdGUuXG4gICAgICAgICAqIEBtZW1iZXIge2Zhcm0uUXVlc3RTdGF0ZX0gc3RhdGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUXVlc3REYXRhXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUXVlc3REYXRhLnByb3RvdHlwZS5zdGF0ZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXN0RGF0YSBsZWZ0X2R1ci5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfExvbmd9IGxlZnRfZHVyXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlF1ZXN0RGF0YVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXN0RGF0YS5wcm90b3R5cGUubGVmdF9kdXIgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUXVlc3REYXRhIHRhc2tfZGF0YS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IHRhc2tfZGF0YVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5RdWVzdERhdGFcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBRdWVzdERhdGEucHJvdG90eXBlLnRhc2tfZGF0YSA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBRdWVzdERhdGEgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5RdWVzdERhdGEudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUXVlc3REYXRhXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklRdWVzdERhdGF9IG0gUXVlc3REYXRhIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXN0RGF0YS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImlkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDY0KG0uaWQpO1xuICAgICAgICAgICAgaWYgKG0uY29uZmlnX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJjb25maWdfaWRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0uY29uZmlnX2lkKTtcbiAgICAgICAgICAgIGlmIChtLnN0YXRlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzdGF0ZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNCkuaW50MzIobS5zdGF0ZSk7XG4gICAgICAgICAgICBpZiAobS5sZWZ0X2R1ciAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibGVmdF9kdXJcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMzIpLmludDY0KG0ubGVmdF9kdXIpO1xuICAgICAgICAgICAgaWYgKG0udGFza19kYXRhICE9IG51bGwgJiYgbS50YXNrX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoNDIpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0udGFza19kYXRhLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICB3LmludDMyKG0udGFza19kYXRhW2ldKTtcbiAgICAgICAgICAgICAgICB3LmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBRdWVzdERhdGEgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5RdWVzdERhdGFcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5RdWVzdERhdGF9IFF1ZXN0RGF0YVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXN0RGF0YS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5RdWVzdERhdGEoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uY29uZmlnX2lkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0uc3RhdGUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbS5sZWZ0X2R1ciA9IHIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtLnRhc2tfZGF0YSAmJiBtLnRhc2tfZGF0YS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS50YXNrX2RhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh0ICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjMiA9IHIudWludDMyKCkgKyByLnBvcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udGFza19kYXRhLnB1c2goci5pbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnRhc2tfZGF0YS5wdXNoKHIuaW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFF1ZXN0RGF0YSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlF1ZXN0RGF0YVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlF1ZXN0RGF0YX0gUXVlc3REYXRhXG4gICAgICAgICAqL1xuICAgICAgICBRdWVzdERhdGEuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlF1ZXN0RGF0YSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUXVlc3REYXRhKCk7XG4gICAgICAgICAgICBpZiAoZC5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpXG4gICAgICAgICAgICAgICAgICAgIChtLmlkID0gJHV0aWwuTG9uZy5mcm9tVmFsdWUoZC5pZCkpLnVuc2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBwYXJzZUludChkLmlkLCAxMCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQuaWQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG0uaWQgPSBkLmlkO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gbmV3ICR1dGlsLkxvbmdCaXRzKGQuaWQubG93ID4+PiAwLCBkLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5jb25maWdfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uY29uZmlnX2lkID0gZC5jb25maWdfaWQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFwiUGVuZGluZ1wiOlxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlVubG9ja2VkXCI6XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiSW5wcm9ncmVzc1wiOlxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIkNvbXBsZXRlXCI6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiQ2FuY2VsXCI6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IDQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiRG9uZVwiOlxuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG0uc3RhdGUgPSA1O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubGVmdF9kdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5sZWZ0X2R1ciA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQubGVmdF9kdXIpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmxlZnRfZHVyID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmxlZnRfZHVyID0gcGFyc2VJbnQoZC5sZWZ0X2R1ciwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmxlZnRfZHVyID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmxlZnRfZHVyID0gZC5sZWZ0X2R1cjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5sZWZ0X2R1ciA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5sZWZ0X2R1ciA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmxlZnRfZHVyLmxvdyA+Pj4gMCwgZC5sZWZ0X2R1ci5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQudGFza19kYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQudGFza19kYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLmZhcm0uUXVlc3REYXRhLnRhc2tfZGF0YTogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS50YXNrX2RhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQudGFza19kYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIG0udGFza19kYXRhW2ldID0gZC50YXNrX2RhdGFbaV0gfCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBRdWVzdERhdGEgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUXVlc3REYXRhXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlF1ZXN0RGF0YX0gbSBRdWVzdERhdGFcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBRdWVzdERhdGEudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC50YXNrX2RhdGEgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQuY29uZmlnX2lkID0gMDtcbiAgICAgICAgICAgICAgICBkLnN0YXRlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gXCJQZW5kaW5nXCIgOiAwO1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBkLmxlZnRfZHVyID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5sZWZ0X2R1ciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/IFwiMFwiIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uY29uZmlnX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImNvbmZpZ19pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQuY29uZmlnX2lkID0gbS5jb25maWdfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGF0ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuc3RhdGUgPSBvLmVudW1zID09PSBTdHJpbmcgPyAkcm9vdC5mYXJtLlF1ZXN0U3RhdGVbbS5zdGF0ZV0gOiBtLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0ubGVmdF9kdXIgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibGVmdF9kdXJcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG0ubGVmdF9kdXIgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIGQubGVmdF9kdXIgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5sZWZ0X2R1cikgOiBtLmxlZnRfZHVyO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZC5sZWZ0X2R1ciA9IG8ubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobS5sZWZ0X2R1cikgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobS5sZWZ0X2R1ci5sb3cgPj4+IDAsIG0ubGVmdF9kdXIuaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG0ubGVmdF9kdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50YXNrX2RhdGEgJiYgbS50YXNrX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC50YXNrX2RhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG0udGFza19kYXRhLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQudGFza19kYXRhW2pdID0gbS50YXNrX2RhdGFbal07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUXVlc3REYXRhIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUXVlc3REYXRhXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBRdWVzdERhdGEucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBRdWVzdERhdGE7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uTWVzc2FnZVF1ZXN0TGlzdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIE1lc3NhZ2VRdWVzdExpc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSU1lc3NhZ2VRdWVzdExpc3RcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48ZmFybS5JUXVlc3REYXRhPnxudWxsfSBbcXVlc3RzXSBNZXNzYWdlUXVlc3RMaXN0IHF1ZXN0c1xuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbZG9uZV9xdWVzdF9jb3VudF90b2RheV0gTWVzc2FnZVF1ZXN0TGlzdCBkb25lX3F1ZXN0X2NvdW50X3RvZGF5XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXSBNZXNzYWdlUXVlc3RMaXN0IGV4dHJhX2F3YXJkX2xlZnRfdGltZXNcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2RhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3RdIE1lc3NhZ2VRdWVzdExpc3QgZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNZXNzYWdlUXVlc3RMaXN0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBNZXNzYWdlUXVlc3RMaXN0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJTWVzc2FnZVF1ZXN0TGlzdFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNZXNzYWdlUXVlc3RMaXN0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBNZXNzYWdlUXVlc3RMaXN0KHApIHtcbiAgICAgICAgICAgIHRoaXMucXVlc3RzID0gW107XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZVF1ZXN0TGlzdCBxdWVzdHMuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxmYXJtLklRdWVzdERhdGE+fSBxdWVzdHNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVF1ZXN0TGlzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdExpc3QucHJvdG90eXBlLnF1ZXN0cyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VRdWVzdExpc3QgZG9uZV9xdWVzdF9jb3VudF90b2RheS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBkb25lX3F1ZXN0X2NvdW50X3RvZGF5XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdExpc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUXVlc3RMaXN0LnByb3RvdHlwZS5kb25lX3F1ZXN0X2NvdW50X3RvZGF5ID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZVF1ZXN0TGlzdCBleHRyYV9hd2FyZF9sZWZ0X3RpbWVzLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGV4dHJhX2F3YXJkX2xlZnRfdGltZXNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVF1ZXN0TGlzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdExpc3QucHJvdG90eXBlLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlUXVlc3RMaXN0IGRhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3QuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RMaXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVF1ZXN0TGlzdC5wcm90b3R5cGUuZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBNZXNzYWdlUXVlc3RMaXN0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uTWVzc2FnZVF1ZXN0TGlzdC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RMaXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklNZXNzYWdlUXVlc3RMaXN0fSBtIE1lc3NhZ2VRdWVzdExpc3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVF1ZXN0TGlzdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0ucXVlc3RzICE9IG51bGwgJiYgbS5xdWVzdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtLnF1ZXN0cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuZmFybS5RdWVzdERhdGEuZW5jb2RlKG0ucXVlc3RzW2ldLCB3LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImRvbmVfcXVlc3RfY291bnRfdG9kYXlcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0uZG9uZV9xdWVzdF9jb3VudF90b2RheSk7XG4gICAgICAgICAgICBpZiAobS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI0KS5pbnQzMihtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMpO1xuICAgICAgICAgICAgaWYgKG0uZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50MzIobS5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0KTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgTWVzc2FnZVF1ZXN0TGlzdCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdExpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlUXVlc3RMaXN0fSBNZXNzYWdlUXVlc3RMaXN0XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVF1ZXN0TGlzdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5NZXNzYWdlUXVlc3RMaXN0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5xdWVzdHMgJiYgbS5xdWVzdHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucXVlc3RzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG0ucXVlc3RzLnB1c2goJHJvb3QuZmFybS5RdWVzdERhdGEuZGVjb2RlKHIsIHIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0uZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgTWVzc2FnZVF1ZXN0TGlzdCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdExpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlUXVlc3RMaXN0fSBNZXNzYWdlUXVlc3RMaXN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUXVlc3RMaXN0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5NZXNzYWdlUXVlc3RMaXN0KVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5NZXNzYWdlUXVlc3RMaXN0KCk7XG4gICAgICAgICAgICBpZiAoZC5xdWVzdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZC5xdWVzdHMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5NZXNzYWdlUXVlc3RMaXN0LnF1ZXN0czogYXJyYXkgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5xdWVzdHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQucXVlc3RzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5xdWVzdHNbaV0gIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIuZmFybS5NZXNzYWdlUXVlc3RMaXN0LnF1ZXN0czogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICBtLnF1ZXN0c1tpXSA9ICRyb290LmZhcm0uUXVlc3REYXRhLmZyb21PYmplY3QoZC5xdWVzdHNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uZG9uZV9xdWVzdF9jb3VudF90b2RheSA9IGQuZG9uZV9xdWVzdF9jb3VudF90b2RheSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgPSBkLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0ID0gZC5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0IHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBNZXNzYWdlUXVlc3RMaXN0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdExpc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uTWVzc2FnZVF1ZXN0TGlzdH0gbSBNZXNzYWdlUXVlc3RMaXN0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVF1ZXN0TGlzdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLnF1ZXN0cyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgPSAwO1xuICAgICAgICAgICAgICAgIGQuZXh0cmFfYXdhcmRfbGVmdF90aW1lcyA9IDA7XG4gICAgICAgICAgICAgICAgZC5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnF1ZXN0cyAmJiBtLnF1ZXN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnF1ZXN0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5xdWVzdHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5xdWVzdHNbal0gPSAkcm9vdC5mYXJtLlF1ZXN0RGF0YS50b09iamVjdChtLnF1ZXN0c1tqXSwgbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZG9uZV9xdWVzdF9jb3VudF90b2RheSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkb25lX3F1ZXN0X2NvdW50X3RvZGF5XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5kb25lX3F1ZXN0X2NvdW50X3RvZGF5ID0gbS5kb25lX3F1ZXN0X2NvdW50X3RvZGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZXh0cmFfYXdhcmRfbGVmdF90aW1lcyAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzID0gbS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0ID0gbS5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgTWVzc2FnZVF1ZXN0TGlzdCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdExpc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdExpc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBNZXNzYWdlUXVlc3RMaXN0O1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLk1lc3NhZ2VRdWVzdFVwZGF0ZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIE1lc3NhZ2VRdWVzdFVwZGF0ZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJTWVzc2FnZVF1ZXN0VXBkYXRlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7ZmFybS5JUXVlc3REYXRhfG51bGx9IFtxdWVzdF0gTWVzc2FnZVF1ZXN0VXBkYXRlIHF1ZXN0XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtoZWFyZF9jb3VudF0gTWVzc2FnZVF1ZXN0VXBkYXRlIGhlYXJkX2NvdW50XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtkb25lX3F1ZXN0X2NvdW50X3RvZGF5XSBNZXNzYWdlUXVlc3RVcGRhdGUgZG9uZV9xdWVzdF9jb3VudF90b2RheVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbZXh0cmFfYXdhcmRfbGVmdF90aW1lc10gTWVzc2FnZVF1ZXN0VXBkYXRlIGV4dHJhX2F3YXJkX2xlZnRfdGltZXNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTWVzc2FnZVF1ZXN0VXBkYXRlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBNZXNzYWdlUXVlc3RVcGRhdGUuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElNZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JTWVzc2FnZVF1ZXN0VXBkYXRlPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBNZXNzYWdlUXVlc3RVcGRhdGUocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VRdWVzdFVwZGF0ZSBxdWVzdC5cbiAgICAgICAgICogQG1lbWJlciB7ZmFybS5JUXVlc3REYXRhfG51bGx8dW5kZWZpbmVkfSBxdWVzdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlUXVlc3RVcGRhdGUucHJvdG90eXBlLnF1ZXN0ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZVF1ZXN0VXBkYXRlIGhlYXJkX2NvdW50LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGhlYXJkX2NvdW50XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdFVwZGF0ZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdFVwZGF0ZS5wcm90b3R5cGUuaGVhcmRfY291bnQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlUXVlc3RVcGRhdGUgZG9uZV9xdWVzdF9jb3VudF90b2RheS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBkb25lX3F1ZXN0X2NvdW50X3RvZGF5XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLk1lc3NhZ2VRdWVzdFVwZGF0ZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdFVwZGF0ZS5wcm90b3R5cGUuZG9uZV9xdWVzdF9jb3VudF90b2RheSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2VRdWVzdFVwZGF0ZSBleHRyYV9hd2FyZF9sZWZ0X3RpbWVzLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGV4dHJhX2F3YXJkX2xlZnRfdGltZXNcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVF1ZXN0VXBkYXRlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVF1ZXN0VXBkYXRlLnByb3RvdHlwZS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIE1lc3NhZ2VRdWVzdFVwZGF0ZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBmYXJtLk1lc3NhZ2VRdWVzdFVwZGF0ZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSU1lc3NhZ2VRdWVzdFVwZGF0ZX0gbSBNZXNzYWdlUXVlc3RVcGRhdGUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZVF1ZXN0VXBkYXRlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5xdWVzdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwicXVlc3RcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuZmFybS5RdWVzdERhdGEuZW5jb2RlKG0ucXVlc3QsIHcudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgaWYgKG0uaGVhcmRfY291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImhlYXJkX2NvdW50XCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE2KS5pbnQzMihtLmhlYXJkX2NvdW50KTtcbiAgICAgICAgICAgIGlmIChtLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImRvbmVfcXVlc3RfY291bnRfdG9kYXlcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjQpLmludDMyKG0uZG9uZV9xdWVzdF9jb3VudF90b2RheSk7XG4gICAgICAgICAgICBpZiAobS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDMyKS5pbnQzMihtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBNZXNzYWdlUXVlc3RVcGRhdGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5NZXNzYWdlUXVlc3RVcGRhdGV9IE1lc3NhZ2VRdWVzdFVwZGF0ZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdFVwZGF0ZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5NZXNzYWdlUXVlc3RVcGRhdGUoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLnF1ZXN0ID0gJHJvb3QuZmFybS5RdWVzdERhdGEuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uaGVhcmRfY291bnQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbS5kb25lX3F1ZXN0X2NvdW50X3RvZGF5ID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0uZXh0cmFfYXdhcmRfbGVmdF90aW1lcyA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgTWVzc2FnZVF1ZXN0VXBkYXRlIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uTWVzc2FnZVF1ZXN0VXBkYXRlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uTWVzc2FnZVF1ZXN0VXBkYXRlfSBNZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdFVwZGF0ZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uTWVzc2FnZVF1ZXN0VXBkYXRlKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5NZXNzYWdlUXVlc3RVcGRhdGUoKTtcbiAgICAgICAgICAgIGlmIChkLnF1ZXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucXVlc3QgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLk1lc3NhZ2VRdWVzdFVwZGF0ZS5xdWVzdDogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0ucXVlc3QgPSAkcm9vdC5mYXJtLlF1ZXN0RGF0YS5mcm9tT2JqZWN0KGQucXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuaGVhcmRfY291bnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaGVhcmRfY291bnQgPSBkLmhlYXJkX2NvdW50IHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uZG9uZV9xdWVzdF9jb3VudF90b2RheSA9IGQuZG9uZV9xdWVzdF9jb3VudF90b2RheSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgPSBkLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIE1lc3NhZ2VRdWVzdFVwZGF0ZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uTWVzc2FnZVF1ZXN0VXBkYXRlfSBtIE1lc3NhZ2VRdWVzdFVwZGF0ZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdFVwZGF0ZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLnF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBkLmhlYXJkX2NvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBkLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgPSAwO1xuICAgICAgICAgICAgICAgIGQuZXh0cmFfYXdhcmRfbGVmdF90aW1lcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5xdWVzdCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJxdWVzdFwiKSkge1xuICAgICAgICAgICAgICAgIGQucXVlc3QgPSAkcm9vdC5mYXJtLlF1ZXN0RGF0YS50b09iamVjdChtLnF1ZXN0LCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmhlYXJkX2NvdW50ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImhlYXJkX2NvdW50XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5oZWFyZF9jb3VudCA9IG0uaGVhcmRfY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5kb25lX3F1ZXN0X2NvdW50X3RvZGF5ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImRvbmVfcXVlc3RfY291bnRfdG9kYXlcIikpIHtcbiAgICAgICAgICAgICAgICBkLmRvbmVfcXVlc3RfY291bnRfdG9kYXkgPSBtLmRvbmVfcXVlc3RfY291bnRfdG9kYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImV4dHJhX2F3YXJkX2xlZnRfdGltZXNcIikpIHtcbiAgICAgICAgICAgICAgICBkLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgPSBtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBNZXNzYWdlUXVlc3RVcGRhdGUgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5NZXNzYWdlUXVlc3RVcGRhdGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2VRdWVzdFVwZGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIE1lc3NhZ2VRdWVzdFVwZGF0ZTtcbiAgICB9KSgpO1xuXG4gICAgZmFybS5SZXFRdWVzdEdhaW5FeHRyYUF3YXJkID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxUXVlc3RHYWluRXh0cmFBd2FyZC5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxUXVlc3RHYWluRXh0cmFBd2FyZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbZXh0ZW5kXSBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkIGV4dGVuZFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxUXVlc3RHYWluRXh0cmFBd2FyZFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFRdWVzdEdhaW5FeHRyYUF3YXJkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkIGV4dGVuZC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBleHRlbmRcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUXVlc3RHYWluRXh0cmFBd2FyZFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVF1ZXN0R2FpbkV4dHJhQXdhcmQucHJvdG90eXBlLmV4dGVuZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxUXVlc3RHYWluRXh0cmFBd2FyZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFRdWVzdEdhaW5FeHRyYUF3YXJkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXFRdWVzdEdhaW5FeHRyYUF3YXJkfSBtIFJlcVF1ZXN0R2FpbkV4dHJhQXdhcmQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxUXVlc3RHYWluRXh0cmFBd2FyZC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uZXh0ZW5kICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJleHRlbmRcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5leHRlbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUXVlc3RHYWluRXh0cmFBd2FyZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVF1ZXN0R2FpbkV4dHJhQXdhcmR9IFJlcVF1ZXN0R2FpbkV4dHJhQXdhcmRcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVF1ZXN0R2FpbkV4dHJhQXdhcmQoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmV4dGVuZCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxUXVlc3RHYWluRXh0cmFBd2FyZCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVF1ZXN0R2FpbkV4dHJhQXdhcmRcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFRdWVzdEdhaW5FeHRyYUF3YXJkfSBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkXG4gICAgICAgICAqL1xuICAgICAgICBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFRdWVzdEdhaW5FeHRyYUF3YXJkKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFRdWVzdEdhaW5FeHRyYUF3YXJkKCk7XG4gICAgICAgICAgICBpZiAoZC5leHRlbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uZXh0ZW5kID0gZC5leHRlbmQgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcVF1ZXN0R2FpbkV4dHJhQXdhcmQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUXVlc3RHYWluRXh0cmFBd2FyZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFRdWVzdEdhaW5FeHRyYUF3YXJkfSBtIFJlcVF1ZXN0R2FpbkV4dHJhQXdhcmRcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuZXh0ZW5kID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmV4dGVuZCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJleHRlbmRcIikpIHtcbiAgICAgICAgICAgICAgICBkLmV4dGVuZCA9IG0uZXh0ZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxUXVlc3RHYWluRXh0cmFBd2FyZCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcVF1ZXN0R2FpbkV4dHJhQXdhcmRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVF1ZXN0R2FpbkV4dHJhQXdhcmQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFRdWVzdEdhaW5FeHRyYUF3YXJkO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXSBSZXNwUXVlc3RHYWluRXh0cmFBV2FyZCBleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXNwUXVlc3RHYWluRXh0cmFBV2FyZC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXNwUXVlc3RHYWluRXh0cmFBV2FyZChwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQgZXh0cmFfYXdhcmRfbGVmdF90aW1lcy5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBleHRyYV9hd2FyZF9sZWZ0X3RpbWVzXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQucHJvdG90eXBlLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwUXVlc3RHYWluRXh0cmFBV2FyZC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUXVlc3RHYWluRXh0cmFBV2FyZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmR9IG0gUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImV4dHJhX2F3YXJkX2xlZnRfdGltZXNcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUXVlc3RHYWluRXh0cmFBV2FyZFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkfSBSZXNwUXVlc3RHYWluRXh0cmFBV2FyZFxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwUXVlc3RHYWluRXh0cmFBV2FyZCBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmR9IFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUXVlc3RHYWluRXh0cmFBV2FyZC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkKCk7XG4gICAgICAgICAgICBpZiAoZC5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgPSBkLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkfSBtIFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5leHRyYV9hd2FyZF9sZWZ0X3RpbWVzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmV4dHJhX2F3YXJkX2xlZnRfdGltZXMgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZXh0cmFfYXdhcmRfbGVmdF90aW1lc1wiKSkge1xuICAgICAgICAgICAgICAgIGQuZXh0cmFfYXdhcmRfbGVmdF90aW1lcyA9IG0uZXh0cmFfYXdhcmRfbGVmdF90aW1lcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmRcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BRdWVzdEdhaW5FeHRyYUFXYXJkLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcFF1ZXN0R2FpbkV4dHJhQVdhcmQ7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2V4dGVuZF0gUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgZXh0ZW5kXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZShwKSB7XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgZXh0ZW5kLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGV4dGVuZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLnByb3RvdHlwZS5leHRlbmQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmV9IG0gUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmV4dGVuZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZXh0ZW5kXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0uZXh0ZW5kKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lfSBSZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5mYXJtLlJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5leHRlbmQgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZX0gUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICovXG4gICAgICAgIFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZmFybS5SZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUoKTtcbiAgICAgICAgICAgIGlmIChkLmV4dGVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5leHRlbmQgPSBkLmV4dGVuZCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmV9IG0gUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXFRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmV4dGVuZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5leHRlbmQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZXh0ZW5kXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5leHRlbmQgPSBtLmV4dGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcVF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxUXVlc3RHYWluRGFpbHlDaXJjbGVPbmU7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2RhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3RdIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSBkYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0XG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdC5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBkYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS5wcm90b3R5cGUuZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLklSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmV9IG0gUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmRhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3QpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmV9IFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmRhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3QgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZX0gUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290LmZhcm0uUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lKCk7XG4gICAgICAgICAgICBpZiAoZC5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmRhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3QgPSBkLmRhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3QgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lfSBtIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BRdWVzdEdhaW5EYWlseUNpcmNsZU9uZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmRhaWx5X2NpcmNsZV9xdWVzdF9uZXh0X2Nvc3QgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGFpbHlfY2lyY2xlX3F1ZXN0X25leHRfY29zdCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJkYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0ID0gbS5kYWlseV9jaXJjbGVfcXVlc3RfbmV4dF9jb3N0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcFF1ZXN0R2FpbkRhaWx5Q2lyY2xlT25lXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXNwUXVlc3RHYWluRGFpbHlDaXJjbGVPbmU7XG4gICAgfSkoKTtcblxuICAgIGZhcm0uUmVxRGxnU3RhZ2VEb25lID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxRGxnU3RhZ2VEb25lLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXFEbGdTdGFnZURvbmVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2RsZ19zdGFnZV9pZF0gUmVxRGxnU3RhZ2VEb25lIGRsZ19zdGFnZV9pZFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbc3RhdGVdIFJlcURsZ1N0YWdlRG9uZSBzdGF0ZVxuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLHN0cmluZz58bnVsbH0gW21ldGFkYXRhXSBSZXFEbGdTdGFnZURvbmUgbWV0YWRhdGFcbiAgICAgICAgICogQHByb3BlcnR5IHtmYXJtLkRpYWxvZ1N0YWdlVHlwZXxudWxsfSBbc3RhZ2VUeXBlXSBSZXFEbGdTdGFnZURvbmUgc3RhZ2VUeXBlXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcURsZ1N0YWdlRG9uZS5cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm1cbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxRGxnU3RhZ2VEb25lLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVxRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlcURsZ1N0YWdlRG9uZT19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxRGxnU3RhZ2VEb25lKHApIHtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFEbGdTdGFnZURvbmUgZGxnX3N0YWdlX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGRsZ19zdGFnZV9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFEbGdTdGFnZURvbmVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFEbGdTdGFnZURvbmUucHJvdG90eXBlLmRsZ19zdGFnZV9pZCA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcURsZ1N0YWdlRG9uZSBzdGF0ZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBzdGF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFEbGdTdGFnZURvbmVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFEbGdTdGFnZURvbmUucHJvdG90eXBlLnN0YXRlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxRGxnU3RhZ2VEb25lIG1ldGFkYXRhLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBtZXRhZGF0YVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFEbGdTdGFnZURvbmVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFEbGdTdGFnZURvbmUucHJvdG90eXBlLm1ldGFkYXRhID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcURsZ1N0YWdlRG9uZSBzdGFnZVR5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge2Zhcm0uRGlhbG9nU3RhZ2VUeXBlfSBzdGFnZVR5cGVcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxRGxnU3RhZ2VEb25lLnByb3RvdHlwZS5zdGFnZVR5cGUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxRGxnU3RhZ2VEb25lIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGZhcm0uUmVxRGxnU3RhZ2VEb25lLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcURsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5JUmVxRGxnU3RhZ2VEb25lfSBtIFJlcURsZ1N0YWdlRG9uZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXFEbGdTdGFnZURvbmUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmRsZ19zdGFnZV9pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiZGxnX3N0YWdlX2lkXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0uZGxnX3N0YWdlX2lkKTtcbiAgICAgICAgICAgIGlmIChtLnN0YXRlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzdGF0ZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuaW50MzIobS5zdGF0ZSk7XG4gICAgICAgICAgICBpZiAobS5tZXRhZGF0YSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWV0YWRhdGFcIikpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0ubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDI2KS5mb3JrKCkudWludDMyKDEwKS5zdHJpbmcoa3NbaV0pLnVpbnQzMigxOCkuc3RyaW5nKG0ubWV0YWRhdGFba3NbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGFnZVR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInN0YWdlVHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigzMikuaW50MzIobS5zdGFnZVR5cGUpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFEbGdTdGFnZURvbmUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXFEbGdTdGFnZURvbmVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7ZmFybS5SZXFEbGdTdGFnZURvbmV9IFJlcURsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcURsZ1N0YWdlRG9uZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFEbGdTdGFnZURvbmUoKSwgaztcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmRsZ19zdGFnZV9pZCA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLnN0YXRlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBpZiAobS5tZXRhZGF0YSA9PT0gJHV0aWwuZW1wdHlPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgIGsgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICByLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tdID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBtLnN0YWdlVHlwZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVxRGxnU3RhZ2VEb25lIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVxRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVxRGxnU3RhZ2VEb25lfSBSZXFEbGdTdGFnZURvbmVcbiAgICAgICAgICovXG4gICAgICAgIFJlcURsZ1N0YWdlRG9uZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290LmZhcm0uUmVxRGxnU3RhZ2VEb25lKVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZmFybS5SZXFEbGdTdGFnZURvbmUoKTtcbiAgICAgICAgICAgIGlmIChkLmRsZ19zdGFnZV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5kbGdfc3RhZ2VfaWQgPSBkLmRsZ19zdGFnZV9pZCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5zdGF0ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5zdGF0ZSA9IGQuc3RhdGUgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQubWV0YWRhdGEgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5mYXJtLlJlcURsZ1N0YWdlRG9uZS5tZXRhZGF0YTogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0ubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKGQubWV0YWRhdGEpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIG0ubWV0YWRhdGFba3NbaV1dID0gU3RyaW5nKGQubWV0YWRhdGFba3NbaV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGQuc3RhZ2VUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiTlBDRGlhbG9nXCI6XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgbS5zdGFnZVR5cGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlBob25lRGlhbG9nXCI6XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbS5zdGFnZVR5cGUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIlF1ZXN0Qm9hcmREaWFsb2dcIjpcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtLnN0YWdlVHlwZSA9IDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxRGxnU3RhZ2VEb25lIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcURsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7ZmFybS5SZXFEbGdTdGFnZURvbmV9IG0gUmVxRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxRGxnU3RhZ2VEb25lLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5vYmplY3RzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQuZGxnX3N0YWdlX2lkID0gMDtcbiAgICAgICAgICAgICAgICBkLnN0YXRlID0gMDtcbiAgICAgICAgICAgICAgICBkLnN0YWdlVHlwZSA9IG8uZW51bXMgPT09IFN0cmluZyA/IFwiTlBDRGlhbG9nXCIgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGxnX3N0YWdlX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImRsZ19zdGFnZV9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQuZGxnX3N0YWdlX2lkID0gbS5kbGdfc3RhZ2VfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGF0ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuc3RhdGUgPSBtLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGtzMjtcbiAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhICYmIChrczIgPSBPYmplY3Qua2V5cyhtLm1ldGFkYXRhKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga3MyLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQubWV0YWRhdGFba3MyW2pdXSA9IG0ubWV0YWRhdGFba3MyW2pdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdGFnZVR5cGUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic3RhZ2VUeXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5zdGFnZVR5cGUgPSBvLmVudW1zID09PSBTdHJpbmcgPyAkcm9vdC5mYXJtLkRpYWxvZ1N0YWdlVHlwZVttLnN0YWdlVHlwZV0gOiBtLnN0YWdlVHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcURsZ1N0YWdlRG9uZSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlcURsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxRGxnU3RhZ2VEb25lLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxRGxnU3RhZ2VEb25lO1xuICAgIH0pKCk7XG5cbiAgICBmYXJtLlJlc3BEbGdTdGFnZURvbmUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXNwRGxnU3RhZ2VEb25lLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXNwRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtkbGdfc3RhZ2VfaWRdIFJlc3BEbGdTdGFnZURvbmUgZGxnX3N0YWdlX2lkXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlc3BEbGdTdGFnZURvbmUuXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BEbGdTdGFnZURvbmUuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXNwRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BEbGdTdGFnZURvbmU9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BEbGdTdGFnZURvbmUocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BEbGdTdGFnZURvbmUgZGxnX3N0YWdlX2lkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGRsZ19zdGFnZV9pZFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcERsZ1N0YWdlRG9uZS5wcm90b3R5cGUuZGxnX3N0YWdlX2lkID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BEbGdTdGFnZURvbmUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZmFybS5SZXNwRGxnU3RhZ2VEb25lLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBmYXJtLlJlc3BEbGdTdGFnZURvbmVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge2Zhcm0uSVJlc3BEbGdTdGFnZURvbmV9IG0gUmVzcERsZ1N0YWdlRG9uZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwRGxnU3RhZ2VEb25lLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5kbGdfc3RhZ2VfaWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImRsZ19zdGFnZV9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmRsZ19zdGFnZV9pZCk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BEbGdTdGFnZURvbmUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge2Zhcm0uUmVzcERsZ1N0YWdlRG9uZX0gUmVzcERsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BEbGdTdGFnZURvbmUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290LmZhcm0uUmVzcERsZ1N0YWdlRG9uZSgpO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uZGxnX3N0YWdlX2lkID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXNwRGxnU3RhZ2VEb25lIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcERsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHtmYXJtLlJlc3BEbGdTdGFnZURvbmV9IFJlc3BEbGdTdGFnZURvbmVcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BEbGdTdGFnZURvbmUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5mYXJtLlJlc3BEbGdTdGFnZURvbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5mYXJtLlJlc3BEbGdTdGFnZURvbmUoKTtcbiAgICAgICAgICAgIGlmIChkLmRsZ19zdGFnZV9pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5kbGdfc3RhZ2VfaWQgPSBkLmRsZ19zdGFnZV9pZCB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcERsZ1N0YWdlRG9uZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgZmFybS5SZXNwRGxnU3RhZ2VEb25lXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtmYXJtLlJlc3BEbGdTdGFnZURvbmV9IG0gUmVzcERsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BEbGdTdGFnZURvbmUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5kbGdfc3RhZ2VfaWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGxnX3N0YWdlX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImRsZ19zdGFnZV9pZFwiKSkge1xuICAgICAgICAgICAgICAgIGQuZGxnX3N0YWdlX2lkID0gbS5kbGdfc3RhZ2VfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXNwRGxnU3RhZ2VEb25lIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIGZhcm0uUmVzcERsZ1N0YWdlRG9uZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcERsZ1N0YWdlRG9uZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlc3BEbGdTdGFnZURvbmU7XG4gICAgfSkoKTtcblxuICAgIHJldHVybiBmYXJtO1xufSkoKTtcblxuJHJvb3QubWVzc2FnZSA9IChmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSBtZXNzYWdlLlxuICAgICAqIEBleHBvcnRzIG1lc3NhZ2VcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICovXG4gICAgdmFyIG1lc3NhZ2UgPSB7fTtcblxuICAgIG1lc3NhZ2UuRXZlbnRCYXNpYyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhbiBFdmVudEJhc2ljLlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElFdmVudEJhc2ljXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPnxudWxsfSBbbWV0YWRhdGFdIEV2ZW50QmFzaWMgbWV0YWRhdGFcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRXZlbnRCYXNpYy5cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2VcbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGFuIEV2ZW50QmFzaWMuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElFdmVudEJhc2ljXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuSUV2ZW50QmFzaWM9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEV2ZW50QmFzaWMocCkge1xuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV2ZW50QmFzaWMgbWV0YWRhdGEuXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdC48c3RyaW5nLHN0cmluZz59IG1ldGFkYXRhXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLkV2ZW50QmFzaWNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBFdmVudEJhc2ljLnByb3RvdHlwZS5tZXRhZGF0YSA9ICR1dGlsLmVtcHR5T2JqZWN0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRXZlbnRCYXNpYyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBtZXNzYWdlLkV2ZW50QmFzaWMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuRXZlbnRCYXNpY1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JRXZlbnRCYXNpY30gbSBFdmVudEJhc2ljIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEV2ZW50QmFzaWMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtZXRhZGF0YVwiKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMobS5tZXRhZGF0YSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTApLmZvcmsoKS51aW50MzIoMTApLnN0cmluZyhrc1tpXSkudWludDMyKDE4KS5zdHJpbmcobS5tZXRhZGF0YVtrc1tpXV0pLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGFuIEV2ZW50QmFzaWMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5FdmVudEJhc2ljXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge21lc3NhZ2UuRXZlbnRCYXNpY30gRXZlbnRCYXNpY1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEV2ZW50QmFzaWMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lm1lc3NhZ2UuRXZlbnRCYXNpYygpLCBrO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBpZiAobS5tZXRhZGF0YSA9PT0gJHV0aWwuZW1wdHlPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgICAgIGsgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICByLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tdID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGFuIEV2ZW50QmFzaWMgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5FdmVudEJhc2ljXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge21lc3NhZ2UuRXZlbnRCYXNpY30gRXZlbnRCYXNpY1xuICAgICAgICAgKi9cbiAgICAgICAgRXZlbnRCYXNpYy5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lm1lc3NhZ2UuRXZlbnRCYXNpYylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lm1lc3NhZ2UuRXZlbnRCYXNpYygpO1xuICAgICAgICAgICAgaWYgKGQubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQubWV0YWRhdGEgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5tZXNzYWdlLkV2ZW50QmFzaWMubWV0YWRhdGE6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLm1ldGFkYXRhID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhkLm1ldGFkYXRhKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLm1ldGFkYXRhW2tzW2ldXSA9IFN0cmluZyhkLm1ldGFkYXRhW2tzW2ldXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBFdmVudEJhc2ljIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLkV2ZW50QmFzaWNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuRXZlbnRCYXNpY30gbSBFdmVudEJhc2ljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgRXZlbnRCYXNpYy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8ub2JqZWN0cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGtzMjtcbiAgICAgICAgICAgIGlmIChtLm1ldGFkYXRhICYmIChrczIgPSBPYmplY3Qua2V5cyhtLm1ldGFkYXRhKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZC5tZXRhZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga3MyLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQubWV0YWRhdGFba3MyW2pdXSA9IG0ubWV0YWRhdGFba3MyW2pdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBFdmVudEJhc2ljIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuRXZlbnRCYXNpY1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgRXZlbnRCYXNpYy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIEV2ZW50QmFzaWM7XG4gICAgfSkoKTtcblxuICAgIG1lc3NhZ2UuUmVxdWVzdEJhc2ljID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxdWVzdEJhc2ljLlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElSZXF1ZXN0QmFzaWNcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fG51bGx9IFtwYXJhbXNdIFJlcXVlc3RCYXNpYyBwYXJhbXNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxdWVzdEJhc2ljLlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXF1ZXN0QmFzaWMuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXF1ZXN0QmFzaWNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JUmVxdWVzdEJhc2ljPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBSZXF1ZXN0QmFzaWMocCkge1xuICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXF1ZXN0QmFzaWMgcGFyYW1zLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSBwYXJhbXNcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxdWVzdEJhc2ljXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxdWVzdEJhc2ljLnByb3RvdHlwZS5wYXJhbXMgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcXVlc3RCYXNpYyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBtZXNzYWdlLlJlcXVlc3RCYXNpYy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXF1ZXN0QmFzaWNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuSVJlcXVlc3RCYXNpY30gbSBSZXF1ZXN0QmFzaWMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUmVxdWVzdEJhc2ljLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5wYXJhbXMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInBhcmFtc1wiKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMobS5wYXJhbXMpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5mb3JrKCkudWludDMyKDEwKS5zdHJpbmcoa3NbaV0pLnVpbnQzMigxOCkuc3RyaW5nKG0ucGFyYW1zW2tzW2ldXSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXF1ZXN0QmFzaWMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXF1ZXN0QmFzaWNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7bWVzc2FnZS5SZXF1ZXN0QmFzaWN9IFJlcXVlc3RCYXNpY1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIFJlcXVlc3RCYXNpYy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QubWVzc2FnZS5SZXF1ZXN0QmFzaWMoKSwgaztcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICByLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG0ucGFyYW1zID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ucGFyYW1zID0ge307XG4gICAgICAgICAgICAgICAgICAgIGsgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICByLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBtLnBhcmFtc1trXSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcXVlc3RCYXNpYyBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBmcm9tT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcXVlc3RCYXNpY1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLlJlcXVlc3RCYXNpY30gUmVxdWVzdEJhc2ljXG4gICAgICAgICAqL1xuICAgICAgICBSZXF1ZXN0QmFzaWMuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5tZXNzYWdlLlJlcXVlc3RCYXNpYylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lm1lc3NhZ2UuUmVxdWVzdEJhc2ljKCk7XG4gICAgICAgICAgICBpZiAoZC5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQucGFyYW1zICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIubWVzc2FnZS5SZXF1ZXN0QmFzaWMucGFyYW1zOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5wYXJhbXMgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKGQucGFyYW1zKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLnBhcmFtc1trc1tpXV0gPSBTdHJpbmcoZC5wYXJhbXNba3NbaV1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVxdWVzdEJhc2ljIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcXVlc3RCYXNpY1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5SZXF1ZXN0QmFzaWN9IG0gUmVxdWVzdEJhc2ljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxdWVzdEJhc2ljLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5vYmplY3RzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLnBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGtzMjtcbiAgICAgICAgICAgIGlmIChtLnBhcmFtcyAmJiAoa3MyID0gT2JqZWN0LmtleXMobS5wYXJhbXMpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLnBhcmFtcyA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga3MyLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGQucGFyYW1zW2tzMltqXV0gPSBtLnBhcmFtc1trczJbal1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcXVlc3RCYXNpYyB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcXVlc3RCYXNpY1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxdWVzdEJhc2ljLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVxdWVzdEJhc2ljO1xuICAgIH0pKCk7XG5cbiAgICBtZXNzYWdlLk1lc3NhZ2UgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBNZXNzYWdlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElNZXNzYWdlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW2lkXSBNZXNzYWdlIGlkXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bWVzc2FnZS5NZXNzYWdlLlR5cGV8bnVsbH0gW3R5cGVdIE1lc3NhZ2UgdHlwZVxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdmVyc2lvbl0gTWVzc2FnZSB2ZXJzaW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtqd3RfdG9rZW5dIE1lc3NhZ2Ugand0X3Rva2VuXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7Z29vZ2xlLnByb3RvYnVmLklBbnl8bnVsbH0gW2RhdF0gTWVzc2FnZSBkYXRcbiAgICAgICAgICogQHByb3BlcnR5IHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcHxudWxsfSBbdGltZXN0YW1wXSBNZXNzYWdlIHRpbWVzdGFtcFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBNZXNzYWdlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBNZXNzYWdlLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJTWVzc2FnZVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHttZXNzYWdlLklNZXNzYWdlPX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBNZXNzYWdlKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlIGlkLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gaWRcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuTWVzc2FnZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2UucHJvdG90eXBlLmlkID0gJHV0aWwuTG9uZyA/ICR1dGlsLkxvbmcuZnJvbUJpdHMoMCwwLGZhbHNlKSA6IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2UgdHlwZS5cbiAgICAgICAgICogQG1lbWJlciB7bWVzc2FnZS5NZXNzYWdlLlR5cGV9IHR5cGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuTWVzc2FnZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2UucHJvdG90eXBlLnR5cGUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNZXNzYWdlIHZlcnNpb24uXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gdmVyc2lvblxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5NZXNzYWdlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZS5wcm90b3R5cGUudmVyc2lvbiA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2Ugand0X3Rva2VuLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGp3dF90b2tlblxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5NZXNzYWdlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZS5wcm90b3R5cGUuand0X3Rva2VuID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWVzc2FnZSBkYXQuXG4gICAgICAgICAqIEBtZW1iZXIge2dvb2dsZS5wcm90b2J1Zi5JQW55fG51bGx8dW5kZWZpbmVkfSBkYXRcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuTWVzc2FnZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2UucHJvdG90eXBlLmRhdCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1lc3NhZ2UgdGltZXN0YW1wLlxuICAgICAgICAgKiBAbWVtYmVyIHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcHxudWxsfHVuZGVmaW5lZH0gdGltZXN0YW1wXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLk1lc3NhZ2VcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlLnByb3RvdHlwZS50aW1lc3RhbXAgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTWVzc2FnZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBtZXNzYWdlLk1lc3NhZ2UudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuTWVzc2FnZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JTWVzc2FnZX0gbSBNZXNzYWdlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2UuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLmlkKTtcbiAgICAgICAgICAgIGlmIChtLnR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInR5cGVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0udHlwZSk7XG4gICAgICAgICAgICBpZiAobS52ZXJzaW9uICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ2ZXJzaW9uXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDI2KS5zdHJpbmcobS52ZXJzaW9uKTtcbiAgICAgICAgICAgIGlmIChtLmp3dF90b2tlbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiand0X3Rva2VuXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDM0KS5zdHJpbmcobS5qd3RfdG9rZW4pO1xuICAgICAgICAgICAgaWYgKG0uZGF0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJkYXRcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS5lbmNvZGUobS5kYXQsIHcudWludDMyKDQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgaWYgKG0udGltZXN0YW1wICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ0aW1lc3RhbXBcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5lbmNvZGUobS50aW1lc3RhbXAsIHcudWludDMyKDUwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBNZXNzYWdlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuTWVzc2FnZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLk1lc3NhZ2V9IE1lc3NhZ2VcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5tZXNzYWdlLk1lc3NhZ2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0udHlwZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLnZlcnNpb24gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0uand0X3Rva2VuID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBtLmRhdCA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5BbnkuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG0udGltZXN0YW1wID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5kZWNvZGUociwgci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIE1lc3NhZ2UgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5NZXNzYWdlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge21lc3NhZ2UuTWVzc2FnZX0gTWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgTWVzc2FnZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lm1lc3NhZ2UuTWVzc2FnZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lm1lc3NhZ2UuTWVzc2FnZSgpO1xuICAgICAgICAgICAgaWYgKGQuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICgkdXRpbC5Mb25nKVxuICAgICAgICAgICAgICAgICAgICAobS5pZCA9ICR1dGlsLkxvbmcuZnJvbVZhbHVlKGQuaWQpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gcGFyc2VJbnQoZC5pZCwgMTApO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBtLmlkID0gZC5pZDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5pZCA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgbS5pZCA9IG5ldyAkdXRpbC5Mb25nQml0cyhkLmlkLmxvdyA+Pj4gMCwgZC5pZC5oaWdoID4+PiAwKS50b051bWJlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChkLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJFVkVOVF9CQVNJQ1wiOlxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIG0udHlwZSA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiTk9USUZZX0JBU0lDXCI6XG4gICAgICAgICAgICBjYXNlIDEwMDAwMDpcbiAgICAgICAgICAgICAgICBtLnR5cGUgPSAxMDAwMDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiU1RSRUFNX0JBU0lDXCI6XG4gICAgICAgICAgICBjYXNlIDIwMDAwMDpcbiAgICAgICAgICAgICAgICBtLnR5cGUgPSAyMDAwMDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC52ZXJzaW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnZlcnNpb24gPSBTdHJpbmcoZC52ZXJzaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmp3dF90b2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5qd3RfdG9rZW4gPSBTdHJpbmcoZC5qd3RfdG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZGF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuZGF0ICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIubWVzc2FnZS5NZXNzYWdlLmRhdDogb2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uZGF0ID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS5mcm9tT2JqZWN0KGQuZGF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRpbWVzdGFtcCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLnRpbWVzdGFtcCAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLm1lc3NhZ2UuTWVzc2FnZS50aW1lc3RhbXA6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLnRpbWVzdGFtcCA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAuZnJvbU9iamVjdChkLnRpbWVzdGFtcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgTWVzc2FnZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5NZXNzYWdlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHttZXNzYWdlLk1lc3NhZ2V9IG0gTWVzc2FnZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE1lc3NhZ2UudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgJHV0aWwuTG9uZygwLCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBuLnRvU3RyaW5nKCkgOiBvLmxvbmdzID09PSBOdW1iZXIgPyBuLnRvTnVtYmVyKCkgOiBuO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gXCIwXCIgOiAwO1xuICAgICAgICAgICAgICAgIGQudHlwZSA9IG8uZW51bXMgPT09IFN0cmluZyA/IFwiRVZFTlRfQkFTSUNcIiA6IDA7XG4gICAgICAgICAgICAgICAgZC52ZXJzaW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkLmp3dF90b2tlbiA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC5kYXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGQudGltZXN0YW1wID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmlkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLmlkID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBkLmlkID0gby5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG0uaWQpIDogbS5pZDtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGQuaWQgPSBvLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG0uaWQpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uaWQubG93ID4+PiAwLCBtLmlkLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtLmlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0udHlwZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0eXBlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50eXBlID0gby5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QubWVzc2FnZS5NZXNzYWdlLlR5cGVbbS50eXBlXSA6IG0udHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnZlcnNpb24gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidmVyc2lvblwiKSkge1xuICAgICAgICAgICAgICAgIGQudmVyc2lvbiA9IG0udmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmp3dF90b2tlbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJqd3RfdG9rZW5cIikpIHtcbiAgICAgICAgICAgICAgICBkLmp3dF90b2tlbiA9IG0uand0X3Rva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGF0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImRhdFwiKSkge1xuICAgICAgICAgICAgICAgIGQuZGF0ID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS50b09iamVjdChtLmRhdCwgbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS50aW1lc3RhbXAgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidGltZXN0YW1wXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50aW1lc3RhbXAgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnRvT2JqZWN0KG0udGltZXN0YW1wLCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIE1lc3NhZ2UgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5NZXNzYWdlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHlwZSBlbnVtLlxuICAgICAgICAgKiBAbmFtZSBtZXNzYWdlLk1lc3NhZ2UuVHlwZVxuICAgICAgICAgKiBAZW51bSB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gRVZFTlRfQkFTSUM9MCBFVkVOVF9CQVNJQyB2YWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gTk9USUZZX0JBU0lDPTEwMDAwMCBOT1RJRllfQkFTSUMgdmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFNUUkVBTV9CQVNJQz0yMDAwMDAgU1RSRUFNX0JBU0lDIHZhbHVlXG4gICAgICAgICAqL1xuICAgICAgICBNZXNzYWdlLlR5cGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMF0gPSBcIkVWRU5UX0JBU0lDXCJdID0gMDtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzEwMDAwMF0gPSBcIk5PVElGWV9CQVNJQ1wiXSA9IDEwMDAwMDtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzIwMDAwMF0gPSBcIlNUUkVBTV9CQVNJQ1wiXSA9IDIwMDAwMDtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgcmV0dXJuIE1lc3NhZ2U7XG4gICAgfSkoKTtcblxuICAgIG1lc3NhZ2UuUmVxdWVzdCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlcXVlc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlcXVlc3RcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3ZlcnNpb25dIFJlcXVlc3QgdmVyc2lvblxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBband0X3Rva2VuXSBSZXF1ZXN0IGp3dF90b2tlblxuICAgICAgICAgKiBAcHJvcGVydHkge2dvb2dsZS5wcm90b2J1Zi5JQW55fG51bGx9IFtkYXRdIFJlcXVlc3QgZGF0XG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcXVlc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcXVlc3QuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElSZXF1ZXN0XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuSVJlcXVlc3Q9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlcXVlc3QocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcXVlc3QgdmVyc2lvbi5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSB2ZXJzaW9uXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcXVlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXF1ZXN0LnByb3RvdHlwZS52ZXJzaW9uID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxdWVzdCBqd3RfdG9rZW4uXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gand0X3Rva2VuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcXVlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXF1ZXN0LnByb3RvdHlwZS5qd3RfdG9rZW4gPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXF1ZXN0IGRhdC5cbiAgICAgICAgICogQG1lbWJlciB7Z29vZ2xlLnByb3RvYnVmLklBbnl8bnVsbHx1bmRlZmluZWR9IGRhdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXF1ZXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxdWVzdC5wcm90b3R5cGUuZGF0ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcXVlc3QgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgbWVzc2FnZS5SZXF1ZXN0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcXVlc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuSVJlcXVlc3R9IG0gUmVxdWVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXF1ZXN0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS52ZXJzaW9uICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ2ZXJzaW9uXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDEwKS5zdHJpbmcobS52ZXJzaW9uKTtcbiAgICAgICAgICAgIGlmIChtLmp3dF90b2tlbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiand0X3Rva2VuXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS5qd3RfdG9rZW4pO1xuICAgICAgICAgICAgaWYgKG0uZGF0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJkYXRcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS5lbmNvZGUobS5kYXQsIHcudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXF1ZXN0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxdWVzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLlJlcXVlc3R9IFJlcXVlc3RcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXF1ZXN0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5tZXNzYWdlLlJlcXVlc3QoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLnZlcnNpb24gPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uand0X3Rva2VuID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBtLmRhdCA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5BbnkuZGVjb2RlKHIsIHIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBSZXF1ZXN0IG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxdWVzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLlJlcXVlc3R9IFJlcXVlc3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcXVlc3QuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5tZXNzYWdlLlJlcXVlc3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5tZXNzYWdlLlJlcXVlc3QoKTtcbiAgICAgICAgICAgIGlmIChkLnZlcnNpb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0udmVyc2lvbiA9IFN0cmluZyhkLnZlcnNpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuand0X3Rva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLmp3dF90b2tlbiA9IFN0cmluZyhkLmp3dF90b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5kYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5kYXQgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIi5tZXNzYWdlLlJlcXVlc3QuZGF0OiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5kYXQgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuQW55LmZyb21PYmplY3QoZC5kYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcXVlc3QgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxdWVzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5SZXF1ZXN0fSBtIFJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXF1ZXN0LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgaWYgKCFvKVxuICAgICAgICAgICAgICAgIG8gPSB7fTtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICBpZiAoby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQudmVyc2lvbiA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZC5qd3RfdG9rZW4gPSBcIlwiO1xuICAgICAgICAgICAgICAgIGQuZGF0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnZlcnNpb24gIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidmVyc2lvblwiKSkge1xuICAgICAgICAgICAgICAgIGQudmVyc2lvbiA9IG0udmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmp3dF90b2tlbiAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJqd3RfdG9rZW5cIikpIHtcbiAgICAgICAgICAgICAgICBkLmp3dF90b2tlbiA9IG0uand0X3Rva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uZGF0ICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImRhdFwiKSkge1xuICAgICAgICAgICAgICAgIGQuZGF0ID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS50b09iamVjdChtLmRhdCwgbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBSZXF1ZXN0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxdWVzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxdWVzdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIFJlcXVlc3Q7XG4gICAgfSkoKTtcblxuICAgIG1lc3NhZ2UuUmVzcG9uc2UgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBSZXNwb25zZS5cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2VcbiAgICAgICAgICogQGludGVyZmFjZSBJUmVzcG9uc2VcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2Vycl0gUmVzcG9uc2UgZXJyXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFttZXNzYWdlXSBSZXNwb25zZSBtZXNzYWdlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFt0cmFjZV9pZF0gUmVzcG9uc2UgdHJhY2VfaWRcbiAgICAgICAgICogQHByb3BlcnR5IHtnb29nbGUucHJvdG9idWYuSUFueXxudWxsfSBbZGF0XSBSZXNwb25zZSBkYXRcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcG9uc2UuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BvbnNlLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcG9uc2VcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JUmVzcG9uc2U9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BvbnNlKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zZSBlcnIuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gZXJyXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlc3BvbnNlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcG9uc2UucHJvdG90eXBlLmVyciA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BvbnNlIG1lc3NhZ2UuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbWVzc2FnZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXNwb25zZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BvbnNlLnByb3RvdHlwZS5tZXNzYWdlID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcG9uc2UgdHJhY2VfaWQuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gdHJhY2VfaWRcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcG9uc2VcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwb25zZS5wcm90b3R5cGUudHJhY2VfaWQgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwb25zZSBkYXQuXG4gICAgICAgICAqIEBtZW1iZXIge2dvb2dsZS5wcm90b2J1Zi5JQW55fG51bGx8dW5kZWZpbmVkfSBkYXRcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcG9uc2VcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwb25zZS5wcm90b3R5cGUuZGF0ID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BvbnNlIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIG1lc3NhZ2UuUmVzcG9uc2UudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcG9uc2VcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuSVJlc3BvbnNlfSBtIFJlc3BvbnNlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BvbnNlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5lcnIgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImVyclwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmVycik7XG4gICAgICAgICAgICBpZiAobS5tZXNzYWdlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtZXNzYWdlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS5tZXNzYWdlKTtcbiAgICAgICAgICAgIGlmIChtLnRyYWNlX2lkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ0cmFjZV9pZFwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNikuc3RyaW5nKG0udHJhY2VfaWQpO1xuICAgICAgICAgICAgaWYgKG0uZGF0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJkYXRcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS5lbmNvZGUobS5kYXQsIHcudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXNwb25zZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlc3BvbnNlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge21lc3NhZ2UuUmVzcG9uc2V9IFJlc3BvbnNlXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgUmVzcG9uc2UuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lm1lc3NhZ2UuUmVzcG9uc2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmVyciA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLm1lc3NhZ2UgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0udHJhY2VfaWQgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG0uZGF0ID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLkFueS5kZWNvZGUociwgci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlc3BvbnNlIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcG9uc2VcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7bWVzc2FnZS5SZXNwb25zZX0gUmVzcG9uc2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BvbnNlLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QubWVzc2FnZS5SZXNwb25zZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lm1lc3NhZ2UuUmVzcG9uc2UoKTtcbiAgICAgICAgICAgIGlmIChkLmVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5lcnIgPSBkLmVyciB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tZXNzYWdlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLm1lc3NhZ2UgPSBTdHJpbmcoZC5tZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnRyYWNlX2lkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnRyYWNlX2lkID0gU3RyaW5nKGQudHJhY2VfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZGF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGQuZGF0ICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIubWVzc2FnZS5SZXNwb25zZS5kYXQ6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmRhdCA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5BbnkuZnJvbU9iamVjdChkLmRhdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUmVzcG9uc2UgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcG9uc2VcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuUmVzcG9uc2V9IG0gUmVzcG9uc2VcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBSZXNwb25zZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmVyciA9IDA7XG4gICAgICAgICAgICAgICAgZC5tZXNzYWdlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkLnRyYWNlX2lkID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkLmRhdCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5lcnIgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZXJyXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5lcnIgPSBtLmVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1lc3NhZ2UgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwibWVzc2FnZVwiKSkge1xuICAgICAgICAgICAgICAgIGQubWVzc2FnZSA9IG0ubWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLnRyYWNlX2lkICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInRyYWNlX2lkXCIpKSB7XG4gICAgICAgICAgICAgICAgZC50cmFjZV9pZCA9IG0udHJhY2VfaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5kYXQgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiZGF0XCIpKSB7XG4gICAgICAgICAgICAgICAgZC5kYXQgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuQW55LnRvT2JqZWN0KG0uZGF0LCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BvbnNlIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcG9uc2VcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BvbnNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcG9uc2U7XG4gICAgfSkoKTtcblxuICAgIG1lc3NhZ2UuTm90aWZ5QmFzaWMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBOb3RpZnlCYXNpYy5cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2VcbiAgICAgICAgICogQGludGVyZmFjZSBJTm90aWZ5QmFzaWNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgTm90aWZ5QmFzaWMuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIE5vdGlmeUJhc2ljLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJTm90aWZ5QmFzaWNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JTm90aWZ5QmFzaWM9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE5vdGlmeUJhc2ljKHApIHtcbiAgICAgICAgICAgIGlmIChwKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trc1tpXV0gPSBwW2tzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTm90aWZ5QmFzaWMgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgbWVzc2FnZS5Ob3RpZnlCYXNpYy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5Ob3RpZnlCYXNpY1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JTm90aWZ5QmFzaWN9IG0gTm90aWZ5QmFzaWMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTm90aWZ5QmFzaWMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgTm90aWZ5QmFzaWMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5Ob3RpZnlCYXNpY1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLk5vdGlmeUJhc2ljfSBOb3RpZnlCYXNpY1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE5vdGlmeUJhc2ljLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5tZXNzYWdlLk5vdGlmeUJhc2ljKCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIE5vdGlmeUJhc2ljIG1lc3NhZ2UgZnJvbSBhIHBsYWluIG9iamVjdC4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gdGhlaXIgcmVzcGVjdGl2ZSBpbnRlcm5hbCB0eXBlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuTm90aWZ5QmFzaWNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7bWVzc2FnZS5Ob3RpZnlCYXNpY30gTm90aWZ5QmFzaWNcbiAgICAgICAgICovXG4gICAgICAgIE5vdGlmeUJhc2ljLmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QubWVzc2FnZS5Ob3RpZnlCYXNpYylcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHJldHVybiBuZXcgJHJvb3QubWVzc2FnZS5Ob3RpZnlCYXNpYygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBOb3RpZnlCYXNpYyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5Ob3RpZnlCYXNpY1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5Ob3RpZnlCYXNpY30gbSBOb3RpZnlCYXNpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIE5vdGlmeUJhc2ljLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgTm90aWZ5QmFzaWMgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5Ob3RpZnlCYXNpY1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTm90aWZ5QmFzaWMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBOb3RpZnlCYXNpYztcbiAgICB9KSgpO1xuXG4gICAgbWVzc2FnZS5SZXFDdXN0b21UZXN0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVxQ3VzdG9tVGVzdC5cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2VcbiAgICAgICAgICogQGludGVyZmFjZSBJUmVxQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbaW50VmFsdWVdIFJlcUN1c3RvbVRlc3QgaW50VmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3N0clZhbHVlXSBSZXFDdXN0b21UZXN0IHN0clZhbHVlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPGJvb2xlYW4+fG51bGx9IFtib29sVmFsdWVdIFJlcUN1c3RvbVRlc3QgYm9vbFZhbHVlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsc3RyaW5nPnxudWxsfSBbbWFwVmFsdWVdIFJlcUN1c3RvbVRlc3QgbWFwVmFsdWVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVxQ3VzdG9tVGVzdC5cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2VcbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVxQ3VzdG9tVGVzdC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSVJlcUN1c3RvbVRlc3RcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JUmVxQ3VzdG9tVGVzdD19IFtwXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUmVxQ3VzdG9tVGVzdChwKSB7XG4gICAgICAgICAgICB0aGlzLmJvb2xWYWx1ZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5tYXBWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUN1c3RvbVRlc3QgaW50VmFsdWUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gaW50VmFsdWVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUN1c3RvbVRlc3QucHJvdG90eXBlLmludFZhbHVlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVxQ3VzdG9tVGVzdCBzdHJWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzdHJWYWx1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXFDdXN0b21UZXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQ3VzdG9tVGVzdC5wcm90b3R5cGUuc3RyVmFsdWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXFDdXN0b21UZXN0IGJvb2xWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGJvb2xlYW4+fSBib29sVmFsdWVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlcUN1c3RvbVRlc3QucHJvdG90eXBlLmJvb2xWYWx1ZSA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcUN1c3RvbVRlc3QgbWFwVmFsdWUuXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdC48c3RyaW5nLHN0cmluZz59IG1hcFZhbHVlXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcUN1c3RvbVRlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXFDdXN0b21UZXN0LnByb3RvdHlwZS5tYXBWYWx1ZSA9ICR1dGlsLmVtcHR5T2JqZWN0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVxQ3VzdG9tVGVzdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBtZXNzYWdlLlJlcUN1c3RvbVRlc3QudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JUmVxQ3VzdG9tVGVzdH0gbSBSZXFDdXN0b21UZXN0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3XSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFJlcUN1c3RvbVRlc3QuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgIGlmICghdylcbiAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtLmludFZhbHVlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJpbnRWYWx1ZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQzMihtLmludFZhbHVlKTtcbiAgICAgICAgICAgIGlmIChtLnN0clZhbHVlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzdHJWYWx1ZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxOCkuc3RyaW5nKG0uc3RyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKG0uYm9vbFZhbHVlICE9IG51bGwgJiYgbS5ib29sVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjYpLmZvcmsoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0uYm9vbFZhbHVlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICB3LmJvb2wobS5ib29sVmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgIHcubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5tYXBWYWx1ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwibWFwVmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKG0ubWFwVmFsdWUpLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDM0KS5mb3JrKCkudWludDMyKDgpLmludDMyKGtzW2ldKS51aW50MzIoMTgpLnN0cmluZyhtLm1hcFZhbHVlW2tzW2ldXSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBSZXFDdXN0b21UZXN0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVxQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLlJlcUN1c3RvbVRlc3R9IFJlcUN1c3RvbVRlc3RcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXFDdXN0b21UZXN0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5tZXNzYWdlLlJlcUN1c3RvbVRlc3QoKSwgaztcbiAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtLmludFZhbHVlID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG0uc3RyVmFsdWUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKG0uYm9vbFZhbHVlICYmIG0uYm9vbFZhbHVlLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJvb2xWYWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHQgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMyID0gci51aW50MzIoKSArIHIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYzIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5ib29sVmFsdWUucHVzaChyLmJvb2woKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5ib29sVmFsdWUucHVzaChyLmJvb2woKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwKCkucG9zKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtLm1hcFZhbHVlID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubWFwVmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgayA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgci5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgbS5tYXBWYWx1ZVtrXSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIFJlcUN1c3RvbVRlc3QgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXFDdXN0b21UZXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gZCBQbGFpbiBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge21lc3NhZ2UuUmVxQ3VzdG9tVGVzdH0gUmVxQ3VzdG9tVGVzdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQ3VzdG9tVGVzdC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICBpZiAoZCBpbnN0YW5jZW9mICRyb290Lm1lc3NhZ2UuUmVxQ3VzdG9tVGVzdClcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgIHZhciBtID0gbmV3ICRyb290Lm1lc3NhZ2UuUmVxQ3VzdG9tVGVzdCgpO1xuICAgICAgICAgICAgaWYgKGQuaW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaW50VmFsdWUgPSBkLmludFZhbHVlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnN0clZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnN0clZhbHVlID0gU3RyaW5nKGQuc3RyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuYm9vbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuYm9vbFZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLm1lc3NhZ2UuUmVxQ3VzdG9tVGVzdC5ib29sVmFsdWU6IGFycmF5IGV4cGVjdGVkXCIpO1xuICAgICAgICAgICAgICAgIG0uYm9vbFZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmJvb2xWYWx1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLmJvb2xWYWx1ZVtpXSA9IEJvb2xlYW4oZC5ib29sVmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLm1hcFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkLm1hcFZhbHVlICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCIubWVzc2FnZS5SZXFDdXN0b21UZXN0Lm1hcFZhbHVlOiBvYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgbS5tYXBWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMoZC5tYXBWYWx1ZSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5tYXBWYWx1ZVtrc1tpXV0gPSBTdHJpbmcoZC5tYXBWYWx1ZVtrc1tpXV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZXFDdXN0b21UZXN0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcUN1c3RvbVRlc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuUmVxQ3VzdG9tVGVzdH0gbSBSZXFDdXN0b21UZXN0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVxQ3VzdG9tVGVzdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uYXJyYXlzIHx8IG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmJvb2xWYWx1ZSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8ub2JqZWN0cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5tYXBWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmludFZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICBkLnN0clZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmludFZhbHVlICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcImludFZhbHVlXCIpKSB7XG4gICAgICAgICAgICAgICAgZC5pbnRWYWx1ZSA9IG0uaW50VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5zdHJWYWx1ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJzdHJWYWx1ZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuc3RyVmFsdWUgPSBtLnN0clZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uYm9vbFZhbHVlICYmIG0uYm9vbFZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQuYm9vbFZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtLmJvb2xWYWx1ZS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLmJvb2xWYWx1ZVtqXSA9IG0uYm9vbFZhbHVlW2pdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBrczI7XG4gICAgICAgICAgICBpZiAobS5tYXBWYWx1ZSAmJiAoa3MyID0gT2JqZWN0LmtleXMobS5tYXBWYWx1ZSkpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGQubWFwVmFsdWUgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtzMi5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICBkLm1hcFZhbHVlW2tzMltqXV0gPSBtLm1hcFZhbHVlW2tzMltqXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVxQ3VzdG9tVGVzdCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlcUN1c3RvbVRlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlcUN1c3RvbVRlc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBSZXFDdXN0b21UZXN0O1xuICAgIH0pKCk7XG5cbiAgICBtZXNzYWdlLlJlc3BDdXN0b21UZXN0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVzcEN1c3RvbVRlc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSVJlc3BDdXN0b21UZXN0XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtpbnRWYWx1ZV0gUmVzcEN1c3RvbVRlc3QgaW50VmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3N0clZhbHVlXSBSZXNwQ3VzdG9tVGVzdCBzdHJWYWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5Ljxib29sZWFuPnxudWxsfSBbYm9vbFZhbHVlXSBSZXNwQ3VzdG9tVGVzdCBib29sVmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fG51bGx9IFttYXBWYWx1ZV0gUmVzcEN1c3RvbVRlc3QgbWFwVmFsdWVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVzcEN1c3RvbVRlc3QuXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BDdXN0b21UZXN0LlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcEN1c3RvbVRlc3RcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JUmVzcEN1c3RvbVRlc3Q9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIFJlc3BDdXN0b21UZXN0KHApIHtcbiAgICAgICAgICAgIHRoaXMuYm9vbFZhbHVlID0gW107XG4gICAgICAgICAgICB0aGlzLm1hcFZhbHVlID0ge307XG4gICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrcyA9IE9iamVjdC5rZXlzKHApLCBpID0gMDsgaSA8IGtzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEN1c3RvbVRlc3QgaW50VmFsdWUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gaW50VmFsdWVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcEN1c3RvbVRlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ3VzdG9tVGVzdC5wcm90b3R5cGUuaW50VmFsdWUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNwQ3VzdG9tVGVzdCBzdHJWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzdHJWYWx1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXNwQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BDdXN0b21UZXN0LnByb3RvdHlwZS5zdHJWYWx1ZSA9IFwiXCI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc3BDdXN0b21UZXN0IGJvb2xWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPGJvb2xlYW4+fSBib29sVmFsdWVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcEN1c3RvbVRlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ3VzdG9tVGVzdC5wcm90b3R5cGUuYm9vbFZhbHVlID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzcEN1c3RvbVRlc3QgbWFwVmFsdWUuXG4gICAgICAgICAqIEBtZW1iZXIge09iamVjdC48c3RyaW5nLHN0cmluZz59IG1hcFZhbHVlXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlc3BDdXN0b21UZXN0XG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEN1c3RvbVRlc3QucHJvdG90eXBlLm1hcFZhbHVlID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwQ3VzdG9tVGVzdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBtZXNzYWdlLlJlc3BDdXN0b21UZXN0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlc3BDdXN0b21UZXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHttZXNzYWdlLklSZXNwQ3VzdG9tVGVzdH0gbSBSZXNwQ3VzdG9tVGVzdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ3VzdG9tVGVzdC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobSwgdykge1xuICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG0uaW50VmFsdWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImludFZhbHVlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDgpLmludDMyKG0uaW50VmFsdWUpO1xuICAgICAgICAgICAgaWYgKG0uc3RyVmFsdWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcInN0clZhbHVlXCIpKVxuICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5zdHJpbmcobS5zdHJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobS5ib29sVmFsdWUgIT0gbnVsbCAmJiBtLmJvb2xWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigyNikuZm9yaygpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbS5ib29sVmFsdWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIHcuYm9vbChtLmJvb2xWYWx1ZVtpXSk7XG4gICAgICAgICAgICAgICAgdy5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLm1hcFZhbHVlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJtYXBWYWx1ZVwiKSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMobS5tYXBWYWx1ZSksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMzQpLmZvcmsoKS51aW50MzIoOCkuaW50MzIoa3NbaV0pLnVpbnQzMigxOCkuc3RyaW5nKG0ubWFwVmFsdWVba3NbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIFJlc3BDdXN0b21UZXN0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcEN1c3RvbVRlc3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7bWVzc2FnZS5SZXNwQ3VzdG9tVGVzdH0gUmVzcEN1c3RvbVRlc3RcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBSZXNwQ3VzdG9tVGVzdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHIgPSAkUmVhZGVyLmNyZWF0ZShyKTtcbiAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QubWVzc2FnZS5SZXNwQ3VzdG9tVGVzdCgpLCBrO1xuICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG0uaW50VmFsdWUgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbS5zdHJWYWx1ZSA9IHIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5ib29sVmFsdWUgJiYgbS5ib29sVmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG0uYm9vbFZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICgodCAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYzIgPSByLnVpbnQzMigpICsgci5wb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmJvb2xWYWx1ZS5wdXNoKHIuYm9vbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtLmJvb2xWYWx1ZS5wdXNoKHIuYm9vbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG0ubWFwVmFsdWUgPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5tYXBWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBrID0gci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICByLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBtLm1hcFZhbHVlW2tdID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgci5za2lwVHlwZSh0ICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgUmVzcEN1c3RvbVRlc3QgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5SZXNwQ3VzdG9tVGVzdFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAqIEByZXR1cm5zIHttZXNzYWdlLlJlc3BDdXN0b21UZXN0fSBSZXNwQ3VzdG9tVGVzdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEN1c3RvbVRlc3QuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5tZXNzYWdlLlJlc3BDdXN0b21UZXN0KVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QubWVzc2FnZS5SZXNwQ3VzdG9tVGVzdCgpO1xuICAgICAgICAgICAgaWYgKGQuaW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaW50VmFsdWUgPSBkLmludFZhbHVlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnN0clZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnN0clZhbHVlID0gU3RyaW5nKGQuc3RyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuYm9vbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGQuYm9vbFZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLm1lc3NhZ2UuUmVzcEN1c3RvbVRlc3QuYm9vbFZhbHVlOiBhcnJheSBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLmJvb2xWYWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZC5ib29sVmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5ib29sVmFsdWVbaV0gPSBCb29sZWFuKGQuYm9vbFZhbHVlW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tYXBWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC5tYXBWYWx1ZSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiLm1lc3NhZ2UuUmVzcEN1c3RvbVRlc3QubWFwVmFsdWU6IG9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICAgICAgICBtLm1hcFZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhkLm1hcFZhbHVlKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBtLm1hcFZhbHVlW2tzW2ldXSA9IFN0cmluZyhkLm1hcFZhbHVlW2tzW2ldXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BDdXN0b21UZXN0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlJlc3BDdXN0b21UZXN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHttZXNzYWdlLlJlc3BDdXN0b21UZXN0fSBtIFJlc3BDdXN0b21UZXN0XG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgUmVzcEN1c3RvbVRlc3QudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtLCBvKSB7XG4gICAgICAgICAgICBpZiAoIW8pXG4gICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgdmFyIGQgPSB7fTtcbiAgICAgICAgICAgIGlmIChvLmFycmF5cyB8fCBvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5ib29sVmFsdWUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLm9iamVjdHMgfHwgby5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGQubWFwVmFsdWUgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZC5pbnRWYWx1ZSA9IDA7XG4gICAgICAgICAgICAgICAgZC5zdHJWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobS5pbnRWYWx1ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJpbnRWYWx1ZVwiKSkge1xuICAgICAgICAgICAgICAgIGQuaW50VmFsdWUgPSBtLmludFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3RyVmFsdWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic3RyVmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLnN0clZhbHVlID0gbS5zdHJWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJvb2xWYWx1ZSAmJiBtLmJvb2xWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLmJvb2xWYWx1ZSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbS5ib29sVmFsdWUubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5ib29sVmFsdWVbal0gPSBtLmJvb2xWYWx1ZVtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIga3MyO1xuICAgICAgICAgICAgaWYgKG0ubWFwVmFsdWUgJiYgKGtzMiA9IE9iamVjdC5rZXlzKG0ubWFwVmFsdWUpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkLm1hcFZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrczIubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgZC5tYXBWYWx1ZVtrczJbal1dID0gbS5tYXBWYWx1ZVtrczJbal1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFJlc3BDdXN0b21UZXN0IHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuUmVzcEN1c3RvbVRlc3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFJlc3BDdXN0b21UZXN0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gUmVzcEN1c3RvbVRlc3Q7XG4gICAgfSkoKTtcblxuICAgIG1lc3NhZ2UuU2ltcGxlU3RydWN0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgU2ltcGxlU3RydWN0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElTaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2ludFZhbHVlXSBTaW1wbGVTdHJ1Y3QgaW50VmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufG51bGx9IFtib29sVmFsdWVdIFNpbXBsZVN0cnVjdCBib29sVmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3N0clZhbHVlXSBTaW1wbGVTdHJ1Y3Qgc3RyVmFsdWVcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgU2ltcGxlU3RydWN0LlxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBTaW1wbGVTdHJ1Y3QuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElTaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7bWVzc2FnZS5JU2ltcGxlU3RydWN0PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBTaW1wbGVTdHJ1Y3QocCkge1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBba3NbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpbXBsZVN0cnVjdCBpbnRWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBpbnRWYWx1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5TaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBTaW1wbGVTdHJ1Y3QucHJvdG90eXBlLmludFZhbHVlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2ltcGxlU3RydWN0IGJvb2xWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn0gYm9vbFZhbHVlXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlNpbXBsZVN0cnVjdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFNpbXBsZVN0cnVjdC5wcm90b3R5cGUuYm9vbFZhbHVlID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpbXBsZVN0cnVjdCBzdHJWYWx1ZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzdHJWYWx1ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5TaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBTaW1wbGVTdHJ1Y3QucHJvdG90eXBlLnN0clZhbHVlID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFNpbXBsZVN0cnVjdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBtZXNzYWdlLlNpbXBsZVN0cnVjdC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5TaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuSVNpbXBsZVN0cnVjdH0gbSBTaW1wbGVTdHJ1Y3QgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgU2ltcGxlU3RydWN0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgdyA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICBpZiAobS5pbnRWYWx1ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwiaW50VmFsdWVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoOCkuaW50MzIobS5pbnRWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobS5ib29sVmFsdWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtLCBcImJvb2xWYWx1ZVwiKSlcbiAgICAgICAgICAgICAgICB3LnVpbnQzMigxNikuYm9vbChtLmJvb2xWYWx1ZSk7XG4gICAgICAgICAgICBpZiAobS5zdHJWYWx1ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwic3RyVmFsdWVcIikpXG4gICAgICAgICAgICAgICAgdy51aW50MzIoMjYpLnN0cmluZyhtLnN0clZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgU2ltcGxlU3RydWN0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIG1lc3NhZ2UuU2ltcGxlU3RydWN0XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge21lc3NhZ2UuU2ltcGxlU3RydWN0fSBTaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBTaW1wbGVTdHJ1Y3QuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHIsIGwpIHtcbiAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICB2YXIgYyA9IGwgPT09IHVuZGVmaW5lZCA/IHIubGVuIDogci5wb3MgKyBsLCBtID0gbmV3ICRyb290Lm1lc3NhZ2UuU2ltcGxlU3RydWN0KCk7XG4gICAgICAgICAgICB3aGlsZSAoci5wb3MgPCBjKSB7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbS5pbnRWYWx1ZSA9IHIuaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtLmJvb2xWYWx1ZSA9IHIuYm9vbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG0uc3RyVmFsdWUgPSByLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBTaW1wbGVTdHJ1Y3QgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5TaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7bWVzc2FnZS5TaW1wbGVTdHJ1Y3R9IFNpbXBsZVN0cnVjdFxuICAgICAgICAgKi9cbiAgICAgICAgU2ltcGxlU3RydWN0LmZyb21PYmplY3QgPSBmdW5jdGlvbiBmcm9tT2JqZWN0KGQpIHtcbiAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QubWVzc2FnZS5TaW1wbGVTdHJ1Y3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5tZXNzYWdlLlNpbXBsZVN0cnVjdCgpO1xuICAgICAgICAgICAgaWYgKGQuaW50VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG0uaW50VmFsdWUgPSBkLmludFZhbHVlIHwgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLmJvb2xWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbS5ib29sVmFsdWUgPSBCb29sZWFuKGQuYm9vbFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkLnN0clZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtLnN0clZhbHVlID0gU3RyaW5nKGQuc3RyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFNpbXBsZVN0cnVjdCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgbWVzc2FnZS5TaW1wbGVTdHJ1Y3RcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge21lc3NhZ2UuU2ltcGxlU3RydWN0fSBtIFNpbXBsZVN0cnVjdFxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFNpbXBsZVN0cnVjdC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG0sIG8pIHtcbiAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICBvID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHt9O1xuICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBkLmludFZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICBkLmJvb2xWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGQuc3RyVmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uaW50VmFsdWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwiaW50VmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLmludFZhbHVlID0gbS5pbnRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtLmJvb2xWYWx1ZSAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJib29sVmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLmJvb2xWYWx1ZSA9IG0uYm9vbFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG0uc3RyVmFsdWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwic3RyVmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICBkLnN0clZhbHVlID0gbS5zdHJWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIFNpbXBsZVN0cnVjdCB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBtZXNzYWdlLlNpbXBsZVN0cnVjdFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgU2ltcGxlU3RydWN0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gU2ltcGxlU3RydWN0O1xuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gbWVzc2FnZTtcbn0pKCk7XG5cbiRyb290Lmdvb2dsZSA9IChmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSBnb29nbGUuXG4gICAgICogQGV4cG9ydHMgZ29vZ2xlXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIHZhciBnb29nbGUgPSB7fTtcblxuICAgIGdvb2dsZS5wcm90b2J1ZiA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTmFtZXNwYWNlIHByb3RvYnVmLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlXG4gICAgICAgICAqIEBuYW1lc3BhY2VcbiAgICAgICAgICovXG4gICAgICAgIHZhciBwcm90b2J1ZiA9IHt9O1xuXG4gICAgICAgIHByb3RvYnVmLkFueSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGFuIEFueS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWZcbiAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSUFueVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3R5cGVfdXJsXSBBbnkgdHlwZV91cmxcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7VWludDhBcnJheXxudWxsfSBbdmFsdWVdIEFueSB2YWx1ZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBBbnkuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmXG4gICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYW4gQW55LlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSUFueVxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2dvb2dsZS5wcm90b2J1Zi5JQW55PX0gW3BdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIEFueShwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtzID0gT2JqZWN0LmtleXMocCksIGkgPSAwOyBpIDwga3MubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocFtrc1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tzW2ldXSA9IHBba3NbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFueSB0eXBlX3VybC5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gdHlwZV91cmxcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuQW55XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQW55LnByb3RvdHlwZS50eXBlX3VybCA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQW55IHZhbHVlLlxuICAgICAgICAgICAgICogQG1lbWJlciB7VWludDhBcnJheX0gdmFsdWVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuQW55XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQW55LnByb3RvdHlwZS52YWx1ZSA9ICR1dGlsLm5ld0J1ZmZlcihbXSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEFueSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuQW55LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5BbnlcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Z29vZ2xlLnByb3RvYnVmLklBbnl9IG0gQW55IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd10gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBBbnkuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG0sIHcpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgICAgICAgICAgIHcgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtLnR5cGVfdXJsICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJ0eXBlX3VybFwiKSlcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTApLnN0cmluZyhtLnR5cGVfdXJsKTtcbiAgICAgICAgICAgICAgICBpZiAobS52YWx1ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG0sIFwidmFsdWVcIikpXG4gICAgICAgICAgICAgICAgICAgIHcudWludDMyKDE4KS5ieXRlcyhtLnZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhbiBBbnkgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuQW55XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtnb29nbGUucHJvdG9idWYuQW55fSBBbnlcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQW55LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyLCBsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEociBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByID0gJFJlYWRlci5jcmVhdGUocik7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBsID09PSB1bmRlZmluZWQgPyByLmxlbiA6IHIucG9zICsgbCwgbSA9IG5ldyAkcm9vdC5nb29nbGUucHJvdG9idWYuQW55KCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHIucG9zIDwgYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodCA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBtLnR5cGVfdXJsID0gci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtLnZhbHVlID0gci5ieXRlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByLnNraXBUeXBlKHQgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGFuIEFueSBtZXNzYWdlIGZyb20gYSBwbGFpbiBvYmplY3QuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIHRoZWlyIHJlc3BlY3RpdmUgaW50ZXJuYWwgdHlwZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZnJvbU9iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5BbnlcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IGQgUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Z29vZ2xlLnByb3RvYnVmLkFueX0gQW55XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEFueS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24gZnJvbU9iamVjdChkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGQgaW5zdGFuY2VvZiAkcm9vdC5nb29nbGUucHJvdG9idWYuQW55KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IG5ldyAkcm9vdC5nb29nbGUucHJvdG9idWYuQW55KCk7XG4gICAgICAgICAgICAgICAgaWYgKGQudHlwZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBtLnR5cGVfdXJsID0gU3RyaW5nKGQudHlwZV91cmwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZC52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZC52YWx1ZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICR1dGlsLmJhc2U2NC5kZWNvZGUoZC52YWx1ZSwgbS52YWx1ZSA9ICR1dGlsLm5ld0J1ZmZlcigkdXRpbC5iYXNlNjQubGVuZ3RoKGQudmFsdWUpKSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGQudmFsdWUubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS52YWx1ZSA9IGQudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYW4gQW55IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5BbnlcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Z29vZ2xlLnByb3RvYnVmLkFueX0gbSBBbnlcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQW55LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZC50eXBlX3VybCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmJ5dGVzID09PSBTdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLnZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5ieXRlcyAhPT0gQXJyYXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC52YWx1ZSA9ICR1dGlsLm5ld0J1ZmZlcihkLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS50eXBlX3VybCAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJ0eXBlX3VybFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBkLnR5cGVfdXJsID0gbS50eXBlX3VybDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG0udmFsdWUgIT0gbnVsbCAmJiBtLmhhc093blByb3BlcnR5KFwidmFsdWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgZC52YWx1ZSA9IG8uYnl0ZXMgPT09IFN0cmluZyA/ICR1dGlsLmJhc2U2NC5lbmNvZGUobS52YWx1ZSwgMCwgbS52YWx1ZS5sZW5ndGgpIDogby5ieXRlcyA9PT0gQXJyYXkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtLnZhbHVlKSA6IG0udmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEFueSB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5BbnlcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBBbnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBBbnk7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgcHJvdG9idWYuVGltZXN0YW1wID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBUaW1lc3RhbXAuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElUaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfExvbmd8bnVsbH0gW3NlY29uZHNdIFRpbWVzdGFtcCBzZWNvbmRzXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbbmFub3NdIFRpbWVzdGFtcCBuYW5vc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBUaW1lc3RhbXAuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmXG4gICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBUaW1lc3RhbXAuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXA9fSBbcF0gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gVGltZXN0YW1wKHApIHtcbiAgICAgICAgICAgICAgICBpZiAocClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga3MgPSBPYmplY3Qua2V5cyhwKSwgaSA9IDA7IGkgPCBrcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwW2tzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba3NbaV1dID0gcFtrc1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGltZXN0YW1wIHNlY29uZHMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ8TG9uZ30gc2Vjb25kc1xuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBUaW1lc3RhbXAucHJvdG90eXBlLnNlY29uZHMgPSAkdXRpbC5Mb25nID8gJHV0aWwuTG9uZy5mcm9tQml0cygwLDAsZmFsc2UpIDogMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaW1lc3RhbXAgbmFub3MuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IG5hbm9zXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5wcm90b3R5cGUubmFub3MgPSAwO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBUaW1lc3RhbXAgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2dvb2dsZS5wcm90b2J1Zi5JVGltZXN0YW1wfSBtIFRpbWVzdGFtcCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3ddIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVGltZXN0YW1wLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtLCB3KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3KVxuICAgICAgICAgICAgICAgICAgICB3ID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobS5zZWNvbmRzICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJzZWNvbmRzXCIpKVxuICAgICAgICAgICAgICAgICAgICB3LnVpbnQzMig4KS5pbnQ2NChtLnNlY29uZHMpO1xuICAgICAgICAgICAgICAgIGlmIChtLm5hbm9zICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobSwgXCJuYW5vc1wiKSlcbiAgICAgICAgICAgICAgICAgICAgdy51aW50MzIoMTYpLmludDMyKG0ubmFub3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgVGltZXN0YW1wIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUociwgbCkge1xuICAgICAgICAgICAgICAgIGlmICghKHIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgciA9ICRSZWFkZXIuY3JlYXRlKHIpO1xuICAgICAgICAgICAgICAgIHZhciBjID0gbCA9PT0gdW5kZWZpbmVkID8gci5sZW4gOiByLnBvcyArIGwsIG0gPSBuZXcgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyLnBvcyA8IGMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSByLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zZWNvbmRzID0gci5pbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG0ubmFub3MgPSByLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc2tpcFR5cGUodCAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBUaW1lc3RhbXAgbWVzc2FnZSBmcm9tIGEgcGxhaW4gb2JqZWN0LiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byB0aGVpciByZXNwZWN0aXZlIGludGVybmFsIHR5cGVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGZyb21PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBkIFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICogQHJldHVybnMge2dvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9IFRpbWVzdGFtcFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBUaW1lc3RhbXAuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIGZyb21PYmplY3QoZCkge1xuICAgICAgICAgICAgICAgIGlmIChkIGluc3RhbmNlb2YgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICAgICAgdmFyIG0gPSBuZXcgJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCgpO1xuICAgICAgICAgICAgICAgIGlmIChkLnNlY29uZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHV0aWwuTG9uZylcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLnNlY29uZHMgPSAkdXRpbC5Mb25nLmZyb21WYWx1ZShkLnNlY29uZHMpKS51bnNpZ25lZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZC5zZWNvbmRzID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgbS5zZWNvbmRzID0gcGFyc2VJbnQoZC5zZWNvbmRzLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnNlY29uZHMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnNlY29uZHMgPSBkLnNlY29uZHM7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkLnNlY29uZHMgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtLnNlY29uZHMgPSBuZXcgJHV0aWwuTG9uZ0JpdHMoZC5zZWNvbmRzLmxvdyA+Pj4gMCwgZC5zZWNvbmRzLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkLm5hbm9zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5uYW5vcyA9IGQubmFub3MgfCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgVGltZXN0YW1wIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gbSBUaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29dIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVGltZXN0YW1wLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobSwgbykge1xuICAgICAgICAgICAgICAgIGlmICghbylcbiAgICAgICAgICAgICAgICAgICAgbyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG8uZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCR1dGlsLkxvbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbmV3ICR1dGlsLkxvbmcoMCwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5zZWNvbmRzID0gby5sb25ncyA9PT0gU3RyaW5nID8gbi50b1N0cmluZygpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbi50b051bWJlcigpIDogbjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnNlY29uZHMgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBcIjBcIiA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGQubmFub3MgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS5zZWNvbmRzICE9IG51bGwgJiYgbS5oYXNPd25Qcm9wZXJ0eShcInNlY29uZHNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtLnNlY29uZHMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnNlY29uZHMgPSBvLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobS5zZWNvbmRzKSA6IG0uc2Vjb25kcztcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZC5zZWNvbmRzID0gby5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtLnNlY29uZHMpIDogby5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG0uc2Vjb25kcy5sb3cgPj4+IDAsIG0uc2Vjb25kcy5oaWdoID4+PiAwKS50b051bWJlcigpIDogbS5zZWNvbmRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobS5uYW5vcyAhPSBudWxsICYmIG0uaGFzT3duUHJvcGVydHkoXCJuYW5vc1wiKSkge1xuICAgICAgICAgICAgICAgICAgICBkLm5hbm9zID0gbS5uYW5vcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgVGltZXN0YW1wIHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIFRpbWVzdGFtcDtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gcHJvdG9idWY7XG4gICAgfSkoKTtcblxuICAgIHJldHVybiBnb29nbGU7XG59KSgpO1xuXG4kcm9vdC5lcnJvciA9IChmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSBlcnJvci5cbiAgICAgKiBAZXhwb3J0cyBlcnJvclxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKi9cbiAgICB2YXIgZXJyb3IgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgZW51bS5cbiAgICAgKiBAbmFtZSBlcnJvci5UeXBlXG4gICAgICogQGVudW0ge251bWJlcn1cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gTk9ORT0wIE5PTkUgdmFsdWVcbiAgICAgKi9cbiAgICBlcnJvci5UeXBlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWVzQnlJZCA9IHt9LCB2YWx1ZXMgPSBPYmplY3QuY3JlYXRlKHZhbHVlc0J5SWQpO1xuICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFswXSA9IFwiTk9ORVwiXSA9IDA7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSkoKTtcblxuICAgIHJldHVybiBlcnJvcjtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gJHJvb3Q7Il19